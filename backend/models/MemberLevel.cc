/**
 *
 *  MemberLevel.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "MemberLevel.h"
#include "MarketingCampaign.h"
#include "Member.h"
#include "Tenant.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::saas_restaurant;

const std::string MemberLevel::Cols::_level_id = "level_id";
const std::string MemberLevel::Cols::_tenant_id = "tenant_id";
const std::string MemberLevel::Cols::_level_name = "level_name";
const std::string MemberLevel::Cols::_required_points = "required_points";
const std::string MemberLevel::Cols::_required_spent = "required_spent";
const std::string MemberLevel::Cols::_discount_rate = "discount_rate";
const std::string MemberLevel::Cols::_icon_url = "icon_url";
const std::string MemberLevel::Cols::_benefits = "benefits";
const std::string MemberLevel::primaryKeyName = "level_id";
const bool MemberLevel::hasPrimaryKey = true;
const std::string MemberLevel::tableName = "member_level";

const std::vector<typename MemberLevel::MetaData> MemberLevel::metaData_={
{"level_id","uint32_t","int(10) unsigned",4,1,1,1},
{"tenant_id","uint32_t","int(10) unsigned",4,0,0,0},
{"level_name","std::string","varchar(255)",255,0,0,0},
{"required_points","uint32_t","int(10) unsigned",4,0,0,0},
{"required_spent","std::string","varchar(255)",255,0,0,0},
{"discount_rate","std::string","varchar(255)",255,0,0,0},
{"icon_url","std::string","varchar(255)",255,0,0,0},
{"benefits","std::string","longtext",0,0,0,0}
};
const std::string &MemberLevel::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
MemberLevel::MemberLevel(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["level_id"].isNull())
        {
            levelId_=std::make_shared<uint32_t>(r["level_id"].as<uint32_t>());
        }
        if(!r["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r["tenant_id"].as<uint32_t>());
        }
        if(!r["level_name"].isNull())
        {
            levelName_=std::make_shared<std::string>(r["level_name"].as<std::string>());
        }
        if(!r["required_points"].isNull())
        {
            requiredPoints_=std::make_shared<uint32_t>(r["required_points"].as<uint32_t>());
        }
        if(!r["required_spent"].isNull())
        {
            requiredSpent_=std::make_shared<std::string>(r["required_spent"].as<std::string>());
        }
        if(!r["discount_rate"].isNull())
        {
            discountRate_=std::make_shared<std::string>(r["discount_rate"].as<std::string>());
        }
        if(!r["icon_url"].isNull())
        {
            iconUrl_=std::make_shared<std::string>(r["icon_url"].as<std::string>());
        }
        if(!r["benefits"].isNull())
        {
            benefits_=std::make_shared<std::string>(r["benefits"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            levelId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            levelName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            requiredPoints_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            requiredSpent_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            discountRate_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            iconUrl_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            benefits_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

MemberLevel::MemberLevel(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            levelId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            levelName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            requiredPoints_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            requiredSpent_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            discountRate_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            iconUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            benefits_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
}

MemberLevel::MemberLevel(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("level_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["level_id"].isNull())
        {
            levelId_=std::make_shared<uint32_t>((uint32_t)pJson["level_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("level_name"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["level_name"].isNull())
        {
            levelName_=std::make_shared<std::string>(pJson["level_name"].asString());
        }
    }
    if(pJson.isMember("required_points"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["required_points"].isNull())
        {
            requiredPoints_=std::make_shared<uint32_t>((uint32_t)pJson["required_points"].asUInt64());
        }
    }
    if(pJson.isMember("required_spent"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["required_spent"].isNull())
        {
            requiredSpent_=std::make_shared<std::string>(pJson["required_spent"].asString());
        }
    }
    if(pJson.isMember("discount_rate"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["discount_rate"].isNull())
        {
            discountRate_=std::make_shared<std::string>(pJson["discount_rate"].asString());
        }
    }
    if(pJson.isMember("icon_url"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["icon_url"].isNull())
        {
            iconUrl_=std::make_shared<std::string>(pJson["icon_url"].asString());
        }
    }
    if(pJson.isMember("benefits"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["benefits"].isNull())
        {
            benefits_=std::make_shared<std::string>(pJson["benefits"].asString());
        }
    }
}

void MemberLevel::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            levelId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            levelName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            requiredPoints_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            requiredSpent_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            discountRate_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            iconUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            benefits_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
}

void MemberLevel::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("level_id"))
    {
        if(!pJson["level_id"].isNull())
        {
            levelId_=std::make_shared<uint32_t>((uint32_t)pJson["level_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("level_name"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["level_name"].isNull())
        {
            levelName_=std::make_shared<std::string>(pJson["level_name"].asString());
        }
    }
    if(pJson.isMember("required_points"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["required_points"].isNull())
        {
            requiredPoints_=std::make_shared<uint32_t>((uint32_t)pJson["required_points"].asUInt64());
        }
    }
    if(pJson.isMember("required_spent"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["required_spent"].isNull())
        {
            requiredSpent_=std::make_shared<std::string>(pJson["required_spent"].asString());
        }
    }
    if(pJson.isMember("discount_rate"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["discount_rate"].isNull())
        {
            discountRate_=std::make_shared<std::string>(pJson["discount_rate"].asString());
        }
    }
    if(pJson.isMember("icon_url"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["icon_url"].isNull())
        {
            iconUrl_=std::make_shared<std::string>(pJson["icon_url"].asString());
        }
    }
    if(pJson.isMember("benefits"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["benefits"].isNull())
        {
            benefits_=std::make_shared<std::string>(pJson["benefits"].asString());
        }
    }
}

const uint32_t &MemberLevel::getValueOfLevelId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(levelId_)
        return *levelId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &MemberLevel::getLevelId() const noexcept
{
    return levelId_;
}
void MemberLevel::setLevelId(const uint32_t &pLevelId) noexcept
{
    levelId_ = std::make_shared<uint32_t>(pLevelId);
    dirtyFlag_[0] = true;
}
const typename MemberLevel::PrimaryKeyType & MemberLevel::getPrimaryKey() const
{
    assert(levelId_);
    return *levelId_;
}

const uint32_t &MemberLevel::getValueOfTenantId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(tenantId_)
        return *tenantId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &MemberLevel::getTenantId() const noexcept
{
    return tenantId_;
}
void MemberLevel::setTenantId(const uint32_t &pTenantId) noexcept
{
    tenantId_ = std::make_shared<uint32_t>(pTenantId);
    dirtyFlag_[1] = true;
}
void MemberLevel::setTenantIdToNull() noexcept
{
    tenantId_.reset();
    dirtyFlag_[1] = true;
}

const std::string &MemberLevel::getValueOfLevelName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(levelName_)
        return *levelName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MemberLevel::getLevelName() const noexcept
{
    return levelName_;
}
void MemberLevel::setLevelName(const std::string &pLevelName) noexcept
{
    levelName_ = std::make_shared<std::string>(pLevelName);
    dirtyFlag_[2] = true;
}
void MemberLevel::setLevelName(std::string &&pLevelName) noexcept
{
    levelName_ = std::make_shared<std::string>(std::move(pLevelName));
    dirtyFlag_[2] = true;
}
void MemberLevel::setLevelNameToNull() noexcept
{
    levelName_.reset();
    dirtyFlag_[2] = true;
}

const uint32_t &MemberLevel::getValueOfRequiredPoints() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(requiredPoints_)
        return *requiredPoints_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &MemberLevel::getRequiredPoints() const noexcept
{
    return requiredPoints_;
}
void MemberLevel::setRequiredPoints(const uint32_t &pRequiredPoints) noexcept
{
    requiredPoints_ = std::make_shared<uint32_t>(pRequiredPoints);
    dirtyFlag_[3] = true;
}
void MemberLevel::setRequiredPointsToNull() noexcept
{
    requiredPoints_.reset();
    dirtyFlag_[3] = true;
}

const std::string &MemberLevel::getValueOfRequiredSpent() const noexcept
{
    static const std::string defaultValue = std::string();
    if(requiredSpent_)
        return *requiredSpent_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MemberLevel::getRequiredSpent() const noexcept
{
    return requiredSpent_;
}
void MemberLevel::setRequiredSpent(const std::string &pRequiredSpent) noexcept
{
    requiredSpent_ = std::make_shared<std::string>(pRequiredSpent);
    dirtyFlag_[4] = true;
}
void MemberLevel::setRequiredSpent(std::string &&pRequiredSpent) noexcept
{
    requiredSpent_ = std::make_shared<std::string>(std::move(pRequiredSpent));
    dirtyFlag_[4] = true;
}
void MemberLevel::setRequiredSpentToNull() noexcept
{
    requiredSpent_.reset();
    dirtyFlag_[4] = true;
}

const std::string &MemberLevel::getValueOfDiscountRate() const noexcept
{
    static const std::string defaultValue = std::string();
    if(discountRate_)
        return *discountRate_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MemberLevel::getDiscountRate() const noexcept
{
    return discountRate_;
}
void MemberLevel::setDiscountRate(const std::string &pDiscountRate) noexcept
{
    discountRate_ = std::make_shared<std::string>(pDiscountRate);
    dirtyFlag_[5] = true;
}
void MemberLevel::setDiscountRate(std::string &&pDiscountRate) noexcept
{
    discountRate_ = std::make_shared<std::string>(std::move(pDiscountRate));
    dirtyFlag_[5] = true;
}
void MemberLevel::setDiscountRateToNull() noexcept
{
    discountRate_.reset();
    dirtyFlag_[5] = true;
}

const std::string &MemberLevel::getValueOfIconUrl() const noexcept
{
    static const std::string defaultValue = std::string();
    if(iconUrl_)
        return *iconUrl_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MemberLevel::getIconUrl() const noexcept
{
    return iconUrl_;
}
void MemberLevel::setIconUrl(const std::string &pIconUrl) noexcept
{
    iconUrl_ = std::make_shared<std::string>(pIconUrl);
    dirtyFlag_[6] = true;
}
void MemberLevel::setIconUrl(std::string &&pIconUrl) noexcept
{
    iconUrl_ = std::make_shared<std::string>(std::move(pIconUrl));
    dirtyFlag_[6] = true;
}
void MemberLevel::setIconUrlToNull() noexcept
{
    iconUrl_.reset();
    dirtyFlag_[6] = true;
}

const std::string &MemberLevel::getValueOfBenefits() const noexcept
{
    static const std::string defaultValue = std::string();
    if(benefits_)
        return *benefits_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MemberLevel::getBenefits() const noexcept
{
    return benefits_;
}
void MemberLevel::setBenefits(const std::string &pBenefits) noexcept
{
    benefits_ = std::make_shared<std::string>(pBenefits);
    dirtyFlag_[7] = true;
}
void MemberLevel::setBenefits(std::string &&pBenefits) noexcept
{
    benefits_ = std::make_shared<std::string>(std::move(pBenefits));
    dirtyFlag_[7] = true;
}
void MemberLevel::setBenefitsToNull() noexcept
{
    benefits_.reset();
    dirtyFlag_[7] = true;
}

void MemberLevel::updateId(const uint64_t id)
{
    levelId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &MemberLevel::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "tenant_id",
        "level_name",
        "required_points",
        "required_spent",
        "discount_rate",
        "icon_url",
        "benefits"
    };
    return inCols;
}

void MemberLevel::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLevelName())
        {
            binder << getValueOfLevelName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRequiredPoints())
        {
            binder << getValueOfRequiredPoints();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getRequiredSpent())
        {
            binder << getValueOfRequiredSpent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDiscountRate())
        {
            binder << getValueOfDiscountRate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getIconUrl())
        {
            binder << getValueOfIconUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getBenefits())
        {
            binder << getValueOfBenefits();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> MemberLevel::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void MemberLevel::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLevelName())
        {
            binder << getValueOfLevelName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRequiredPoints())
        {
            binder << getValueOfRequiredPoints();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getRequiredSpent())
        {
            binder << getValueOfRequiredSpent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDiscountRate())
        {
            binder << getValueOfDiscountRate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getIconUrl())
        {
            binder << getValueOfIconUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getBenefits())
        {
            binder << getValueOfBenefits();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value MemberLevel::toJson() const
{
    Json::Value ret;
    if(getLevelId())
    {
        ret["level_id"]=getValueOfLevelId();
    }
    else
    {
        ret["level_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getLevelName())
    {
        ret["level_name"]=getValueOfLevelName();
    }
    else
    {
        ret["level_name"]=Json::Value();
    }
    if(getRequiredPoints())
    {
        ret["required_points"]=getValueOfRequiredPoints();
    }
    else
    {
        ret["required_points"]=Json::Value();
    }
    if(getRequiredSpent())
    {
        ret["required_spent"]=getValueOfRequiredSpent();
    }
    else
    {
        ret["required_spent"]=Json::Value();
    }
    if(getDiscountRate())
    {
        ret["discount_rate"]=getValueOfDiscountRate();
    }
    else
    {
        ret["discount_rate"]=Json::Value();
    }
    if(getIconUrl())
    {
        ret["icon_url"]=getValueOfIconUrl();
    }
    else
    {
        ret["icon_url"]=Json::Value();
    }
    if(getBenefits())
    {
        ret["benefits"]=getValueOfBenefits();
    }
    else
    {
        ret["benefits"]=Json::Value();
    }
    return ret;
}

Json::Value MemberLevel::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getLevelId())
            {
                ret[pMasqueradingVector[0]]=getValueOfLevelId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTenantId())
            {
                ret[pMasqueradingVector[1]]=getValueOfTenantId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getLevelName())
            {
                ret[pMasqueradingVector[2]]=getValueOfLevelName();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getRequiredPoints())
            {
                ret[pMasqueradingVector[3]]=getValueOfRequiredPoints();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getRequiredSpent())
            {
                ret[pMasqueradingVector[4]]=getValueOfRequiredSpent();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getDiscountRate())
            {
                ret[pMasqueradingVector[5]]=getValueOfDiscountRate();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getIconUrl())
            {
                ret[pMasqueradingVector[6]]=getValueOfIconUrl();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getBenefits())
            {
                ret[pMasqueradingVector[7]]=getValueOfBenefits();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getLevelId())
    {
        ret["level_id"]=getValueOfLevelId();
    }
    else
    {
        ret["level_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getLevelName())
    {
        ret["level_name"]=getValueOfLevelName();
    }
    else
    {
        ret["level_name"]=Json::Value();
    }
    if(getRequiredPoints())
    {
        ret["required_points"]=getValueOfRequiredPoints();
    }
    else
    {
        ret["required_points"]=Json::Value();
    }
    if(getRequiredSpent())
    {
        ret["required_spent"]=getValueOfRequiredSpent();
    }
    else
    {
        ret["required_spent"]=Json::Value();
    }
    if(getDiscountRate())
    {
        ret["discount_rate"]=getValueOfDiscountRate();
    }
    else
    {
        ret["discount_rate"]=Json::Value();
    }
    if(getIconUrl())
    {
        ret["icon_url"]=getValueOfIconUrl();
    }
    else
    {
        ret["icon_url"]=Json::Value();
    }
    if(getBenefits())
    {
        ret["benefits"]=getValueOfBenefits();
    }
    else
    {
        ret["benefits"]=Json::Value();
    }
    return ret;
}

bool MemberLevel::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("level_id"))
    {
        if(!validJsonOfField(0, "level_id", pJson["level_id"], err, true))
            return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(1, "tenant_id", pJson["tenant_id"], err, true))
            return false;
    }
    if(pJson.isMember("level_name"))
    {
        if(!validJsonOfField(2, "level_name", pJson["level_name"], err, true))
            return false;
    }
    if(pJson.isMember("required_points"))
    {
        if(!validJsonOfField(3, "required_points", pJson["required_points"], err, true))
            return false;
    }
    if(pJson.isMember("required_spent"))
    {
        if(!validJsonOfField(4, "required_spent", pJson["required_spent"], err, true))
            return false;
    }
    if(pJson.isMember("discount_rate"))
    {
        if(!validJsonOfField(5, "discount_rate", pJson["discount_rate"], err, true))
            return false;
    }
    if(pJson.isMember("icon_url"))
    {
        if(!validJsonOfField(6, "icon_url", pJson["icon_url"], err, true))
            return false;
    }
    if(pJson.isMember("benefits"))
    {
        if(!validJsonOfField(7, "benefits", pJson["benefits"], err, true))
            return false;
    }
    return true;
}
bool MemberLevel::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool MemberLevel::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("level_id"))
    {
        if(!validJsonOfField(0, "level_id", pJson["level_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(1, "tenant_id", pJson["tenant_id"], err, false))
            return false;
    }
    if(pJson.isMember("level_name"))
    {
        if(!validJsonOfField(2, "level_name", pJson["level_name"], err, false))
            return false;
    }
    if(pJson.isMember("required_points"))
    {
        if(!validJsonOfField(3, "required_points", pJson["required_points"], err, false))
            return false;
    }
    if(pJson.isMember("required_spent"))
    {
        if(!validJsonOfField(4, "required_spent", pJson["required_spent"], err, false))
            return false;
    }
    if(pJson.isMember("discount_rate"))
    {
        if(!validJsonOfField(5, "discount_rate", pJson["discount_rate"], err, false))
            return false;
    }
    if(pJson.isMember("icon_url"))
    {
        if(!validJsonOfField(6, "icon_url", pJson["icon_url"], err, false))
            return false;
    }
    if(pJson.isMember("benefits"))
    {
        if(!validJsonOfField(7, "benefits", pJson["benefits"], err, false))
            return false;
    }
    return true;
}
bool MemberLevel::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool MemberLevel::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson,
                                   std::string &err,
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Tenant MemberLevel::getTenant(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from tenant where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Tenant(r[0]);
}

void MemberLevel::getTenant(const DbClientPtr &clientPtr,
                            const std::function<void(Tenant)> &rcb,
                            const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from tenant where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Tenant(r[0]));
                    }
               }
               >> ecb;
}
std::vector<MarketingCampaign> MemberLevel::getMarketing_campaigns(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from marketing_campaign where level_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *levelId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<MarketingCampaign> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(MarketingCampaign(row));
    }
    return ret;
}

void MemberLevel::getMarketing_campaigns(const DbClientPtr &clientPtr,
                                         const std::function<void(std::vector<MarketingCampaign>)> &rcb,
                                         const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from marketing_campaign where level_id = ?";
    *clientPtr << sql
               << *levelId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<MarketingCampaign> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(MarketingCampaign(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<Member> MemberLevel::getMembers(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from member where level_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *levelId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Member> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Member(row));
    }
    return ret;
}

void MemberLevel::getMembers(const DbClientPtr &clientPtr,
                             const std::function<void(std::vector<Member>)> &rcb,
                             const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from member where level_id = ?";
    *clientPtr << sql
               << *levelId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Member> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Member(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
