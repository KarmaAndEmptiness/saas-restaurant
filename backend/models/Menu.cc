/**
 *
 *  Menu.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Menu.h"
#include "Permission.h"
#include "Tenant.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::saas_restaurant;

const std::string Menu::Cols::_menu_id = "menu_id";
const std::string Menu::Cols::_tenant_id = "tenant_id";
const std::string Menu::Cols::_parent_id = "parent_id";
const std::string Menu::Cols::_permission_id = "permission_id";
const std::string Menu::Cols::_menu_name = "menu_name";
const std::string Menu::Cols::_menu_type = "menu_type";
const std::string Menu::Cols::_path = "path";
const std::string Menu::Cols::_icon = "icon";
const std::string Menu::Cols::_sort = "sort";
const std::string Menu::Cols::_is_visible = "is_visible";
const std::string Menu::Cols::_created_at = "created_at";
const std::string Menu::Cols::_updated_at = "updated_at";
const std::string Menu::primaryKeyName = "menu_id";
const bool Menu::hasPrimaryKey = true;
const std::string Menu::tableName = "menu";

const std::vector<typename Menu::MetaData> Menu::metaData_={
{"menu_id","uint32_t","int(10) unsigned",4,1,1,1},
{"tenant_id","uint32_t","int(10) unsigned",4,0,0,0},
{"parent_id","uint32_t","int(10) unsigned",4,0,0,0},
{"permission_id","uint32_t","int(10) unsigned",4,0,0,0},
{"menu_name","std::string","varchar(255)",255,0,0,0},
{"menu_type","std::string","varchar(50)",50,0,0,0},
{"path","std::string","varchar(255)",255,0,0,0},
{"icon","std::string","varchar(255)",255,0,0,0},
{"sort","uint32_t","int(10) unsigned",4,0,0,0},
{"is_visible","uint8_t","tinyint(1) unsigned",1,0,0,0},
{"created_at","::trantor::Date","timestamp",0,0,0,0},
{"updated_at","::trantor::Date","timestamp",0,0,0,0}
};
const std::string &Menu::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Menu::Menu(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["menu_id"].isNull())
        {
            menuId_=std::make_shared<uint32_t>(r["menu_id"].as<uint32_t>());
        }
        if(!r["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r["tenant_id"].as<uint32_t>());
        }
        if(!r["parent_id"].isNull())
        {
            parentId_=std::make_shared<uint32_t>(r["parent_id"].as<uint32_t>());
        }
        if(!r["permission_id"].isNull())
        {
            permissionId_=std::make_shared<uint32_t>(r["permission_id"].as<uint32_t>());
        }
        if(!r["menu_name"].isNull())
        {
            menuName_=std::make_shared<std::string>(r["menu_name"].as<std::string>());
        }
        if(!r["menu_type"].isNull())
        {
            menuType_=std::make_shared<std::string>(r["menu_type"].as<std::string>());
        }
        if(!r["path"].isNull())
        {
            path_=std::make_shared<std::string>(r["path"].as<std::string>());
        }
        if(!r["icon"].isNull())
        {
            icon_=std::make_shared<std::string>(r["icon"].as<std::string>());
        }
        if(!r["sort"].isNull())
        {
            sort_=std::make_shared<uint32_t>(r["sort"].as<uint32_t>());
        }
        if(!r["is_visible"].isNull())
        {
            isVisible_=std::make_shared<uint8_t>(r["is_visible"].as<uint8_t>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 12 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            menuId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            parentId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            permissionId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            menuName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            menuType_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            path_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            icon_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            sort_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            isVisible_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

Menu::Menu(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            menuId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            parentId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            permissionId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            menuName_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            menuType_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            path_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            icon_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            sort_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            isVisible_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

Menu::Menu(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("menu_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["menu_id"].isNull())
        {
            menuId_=std::make_shared<uint32_t>((uint32_t)pJson["menu_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("parent_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["parent_id"].isNull())
        {
            parentId_=std::make_shared<uint32_t>((uint32_t)pJson["parent_id"].asUInt64());
        }
    }
    if(pJson.isMember("permission_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["permission_id"].isNull())
        {
            permissionId_=std::make_shared<uint32_t>((uint32_t)pJson["permission_id"].asUInt64());
        }
    }
    if(pJson.isMember("menu_name"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["menu_name"].isNull())
        {
            menuName_=std::make_shared<std::string>(pJson["menu_name"].asString());
        }
    }
    if(pJson.isMember("menu_type"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["menu_type"].isNull())
        {
            menuType_=std::make_shared<std::string>(pJson["menu_type"].asString());
        }
    }
    if(pJson.isMember("path"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["path"].isNull())
        {
            path_=std::make_shared<std::string>(pJson["path"].asString());
        }
    }
    if(pJson.isMember("icon"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["icon"].isNull())
        {
            icon_=std::make_shared<std::string>(pJson["icon"].asString());
        }
    }
    if(pJson.isMember("sort"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["sort"].isNull())
        {
            sort_=std::make_shared<uint32_t>((uint32_t)pJson["sort"].asUInt64());
        }
    }
    if(pJson.isMember("is_visible"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["is_visible"].isNull())
        {
            isVisible_=std::make_shared<uint8_t>((uint8_t)pJson["is_visible"].asUInt64());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Menu::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            menuId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            parentId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            permissionId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            menuName_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            menuType_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            path_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            icon_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            sort_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            isVisible_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Menu::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("menu_id"))
    {
        if(!pJson["menu_id"].isNull())
        {
            menuId_=std::make_shared<uint32_t>((uint32_t)pJson["menu_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("parent_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["parent_id"].isNull())
        {
            parentId_=std::make_shared<uint32_t>((uint32_t)pJson["parent_id"].asUInt64());
        }
    }
    if(pJson.isMember("permission_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["permission_id"].isNull())
        {
            permissionId_=std::make_shared<uint32_t>((uint32_t)pJson["permission_id"].asUInt64());
        }
    }
    if(pJson.isMember("menu_name"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["menu_name"].isNull())
        {
            menuName_=std::make_shared<std::string>(pJson["menu_name"].asString());
        }
    }
    if(pJson.isMember("menu_type"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["menu_type"].isNull())
        {
            menuType_=std::make_shared<std::string>(pJson["menu_type"].asString());
        }
    }
    if(pJson.isMember("path"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["path"].isNull())
        {
            path_=std::make_shared<std::string>(pJson["path"].asString());
        }
    }
    if(pJson.isMember("icon"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["icon"].isNull())
        {
            icon_=std::make_shared<std::string>(pJson["icon"].asString());
        }
    }
    if(pJson.isMember("sort"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["sort"].isNull())
        {
            sort_=std::make_shared<uint32_t>((uint32_t)pJson["sort"].asUInt64());
        }
    }
    if(pJson.isMember("is_visible"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["is_visible"].isNull())
        {
            isVisible_=std::make_shared<uint8_t>((uint8_t)pJson["is_visible"].asUInt64());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const uint32_t &Menu::getValueOfMenuId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(menuId_)
        return *menuId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Menu::getMenuId() const noexcept
{
    return menuId_;
}
void Menu::setMenuId(const uint32_t &pMenuId) noexcept
{
    menuId_ = std::make_shared<uint32_t>(pMenuId);
    dirtyFlag_[0] = true;
}
const typename Menu::PrimaryKeyType & Menu::getPrimaryKey() const
{
    assert(menuId_);
    return *menuId_;
}

const uint32_t &Menu::getValueOfTenantId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(tenantId_)
        return *tenantId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Menu::getTenantId() const noexcept
{
    return tenantId_;
}
void Menu::setTenantId(const uint32_t &pTenantId) noexcept
{
    tenantId_ = std::make_shared<uint32_t>(pTenantId);
    dirtyFlag_[1] = true;
}
void Menu::setTenantIdToNull() noexcept
{
    tenantId_.reset();
    dirtyFlag_[1] = true;
}

const uint32_t &Menu::getValueOfParentId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(parentId_)
        return *parentId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Menu::getParentId() const noexcept
{
    return parentId_;
}
void Menu::setParentId(const uint32_t &pParentId) noexcept
{
    parentId_ = std::make_shared<uint32_t>(pParentId);
    dirtyFlag_[2] = true;
}
void Menu::setParentIdToNull() noexcept
{
    parentId_.reset();
    dirtyFlag_[2] = true;
}

const uint32_t &Menu::getValueOfPermissionId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(permissionId_)
        return *permissionId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Menu::getPermissionId() const noexcept
{
    return permissionId_;
}
void Menu::setPermissionId(const uint32_t &pPermissionId) noexcept
{
    permissionId_ = std::make_shared<uint32_t>(pPermissionId);
    dirtyFlag_[3] = true;
}
void Menu::setPermissionIdToNull() noexcept
{
    permissionId_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Menu::getValueOfMenuName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(menuName_)
        return *menuName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getMenuName() const noexcept
{
    return menuName_;
}
void Menu::setMenuName(const std::string &pMenuName) noexcept
{
    menuName_ = std::make_shared<std::string>(pMenuName);
    dirtyFlag_[4] = true;
}
void Menu::setMenuName(std::string &&pMenuName) noexcept
{
    menuName_ = std::make_shared<std::string>(std::move(pMenuName));
    dirtyFlag_[4] = true;
}
void Menu::setMenuNameToNull() noexcept
{
    menuName_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Menu::getValueOfMenuType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(menuType_)
        return *menuType_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getMenuType() const noexcept
{
    return menuType_;
}
void Menu::setMenuType(const std::string &pMenuType) noexcept
{
    menuType_ = std::make_shared<std::string>(pMenuType);
    dirtyFlag_[5] = true;
}
void Menu::setMenuType(std::string &&pMenuType) noexcept
{
    menuType_ = std::make_shared<std::string>(std::move(pMenuType));
    dirtyFlag_[5] = true;
}
void Menu::setMenuTypeToNull() noexcept
{
    menuType_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Menu::getValueOfPath() const noexcept
{
    static const std::string defaultValue = std::string();
    if(path_)
        return *path_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getPath() const noexcept
{
    return path_;
}
void Menu::setPath(const std::string &pPath) noexcept
{
    path_ = std::make_shared<std::string>(pPath);
    dirtyFlag_[6] = true;
}
void Menu::setPath(std::string &&pPath) noexcept
{
    path_ = std::make_shared<std::string>(std::move(pPath));
    dirtyFlag_[6] = true;
}
void Menu::setPathToNull() noexcept
{
    path_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Menu::getValueOfIcon() const noexcept
{
    static const std::string defaultValue = std::string();
    if(icon_)
        return *icon_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getIcon() const noexcept
{
    return icon_;
}
void Menu::setIcon(const std::string &pIcon) noexcept
{
    icon_ = std::make_shared<std::string>(pIcon);
    dirtyFlag_[7] = true;
}
void Menu::setIcon(std::string &&pIcon) noexcept
{
    icon_ = std::make_shared<std::string>(std::move(pIcon));
    dirtyFlag_[7] = true;
}
void Menu::setIconToNull() noexcept
{
    icon_.reset();
    dirtyFlag_[7] = true;
}

const uint32_t &Menu::getValueOfSort() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(sort_)
        return *sort_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Menu::getSort() const noexcept
{
    return sort_;
}
void Menu::setSort(const uint32_t &pSort) noexcept
{
    sort_ = std::make_shared<uint32_t>(pSort);
    dirtyFlag_[8] = true;
}
void Menu::setSortToNull() noexcept
{
    sort_.reset();
    dirtyFlag_[8] = true;
}

const uint8_t &Menu::getValueOfIsVisible() const noexcept
{
    static const uint8_t defaultValue = uint8_t();
    if(isVisible_)
        return *isVisible_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Menu::getIsVisible() const noexcept
{
    return isVisible_;
}
void Menu::setIsVisible(const uint8_t &pIsVisible) noexcept
{
    isVisible_ = std::make_shared<uint8_t>(pIsVisible);
    dirtyFlag_[9] = true;
}
void Menu::setIsVisibleToNull() noexcept
{
    isVisible_.reset();
    dirtyFlag_[9] = true;
}

const ::trantor::Date &Menu::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Menu::getCreatedAt() const noexcept
{
    return createdAt_;
}
void Menu::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[10] = true;
}
void Menu::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[10] = true;
}

const ::trantor::Date &Menu::getValueOfUpdatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedAt_)
        return *updatedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Menu::getUpdatedAt() const noexcept
{
    return updatedAt_;
}
void Menu::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    updatedAt_ = std::make_shared<::trantor::Date>(pUpdatedAt);
    dirtyFlag_[11] = true;
}
void Menu::setUpdatedAtToNull() noexcept
{
    updatedAt_.reset();
    dirtyFlag_[11] = true;
}

void Menu::updateId(const uint64_t id)
{
    menuId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &Menu::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "tenant_id",
        "parent_id",
        "permission_id",
        "menu_name",
        "menu_type",
        "path",
        "icon",
        "sort",
        "is_visible",
        "created_at",
        "updated_at"
    };
    return inCols;
}

void Menu::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getParentId())
        {
            binder << getValueOfParentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPermissionId())
        {
            binder << getValueOfPermissionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getMenuName())
        {
            binder << getValueOfMenuName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getMenuType())
        {
            binder << getValueOfMenuType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPath())
        {
            binder << getValueOfPath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getIcon())
        {
            binder << getValueOfIcon();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSort())
        {
            binder << getValueOfSort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getIsVisible())
        {
            binder << getValueOfIsVisible();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Menu::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    return ret;
}

void Menu::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getParentId())
        {
            binder << getValueOfParentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPermissionId())
        {
            binder << getValueOfPermissionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getMenuName())
        {
            binder << getValueOfMenuName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getMenuType())
        {
            binder << getValueOfMenuType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPath())
        {
            binder << getValueOfPath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getIcon())
        {
            binder << getValueOfIcon();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSort())
        {
            binder << getValueOfSort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getIsVisible())
        {
            binder << getValueOfIsVisible();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Menu::toJson() const
{
    Json::Value ret;
    if(getMenuId())
    {
        ret["menu_id"]=getValueOfMenuId();
    }
    else
    {
        ret["menu_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getParentId())
    {
        ret["parent_id"]=getValueOfParentId();
    }
    else
    {
        ret["parent_id"]=Json::Value();
    }
    if(getPermissionId())
    {
        ret["permission_id"]=getValueOfPermissionId();
    }
    else
    {
        ret["permission_id"]=Json::Value();
    }
    if(getMenuName())
    {
        ret["menu_name"]=getValueOfMenuName();
    }
    else
    {
        ret["menu_name"]=Json::Value();
    }
    if(getMenuType())
    {
        ret["menu_type"]=getValueOfMenuType();
    }
    else
    {
        ret["menu_type"]=Json::Value();
    }
    if(getPath())
    {
        ret["path"]=getValueOfPath();
    }
    else
    {
        ret["path"]=Json::Value();
    }
    if(getIcon())
    {
        ret["icon"]=getValueOfIcon();
    }
    else
    {
        ret["icon"]=Json::Value();
    }
    if(getSort())
    {
        ret["sort"]=getValueOfSort();
    }
    else
    {
        ret["sort"]=Json::Value();
    }
    if(getIsVisible())
    {
        ret["is_visible"]=getValueOfIsVisible();
    }
    else
    {
        ret["is_visible"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}

Json::Value Menu::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 12)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getMenuId())
            {
                ret[pMasqueradingVector[0]]=getValueOfMenuId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTenantId())
            {
                ret[pMasqueradingVector[1]]=getValueOfTenantId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getParentId())
            {
                ret[pMasqueradingVector[2]]=getValueOfParentId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getPermissionId())
            {
                ret[pMasqueradingVector[3]]=getValueOfPermissionId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getMenuName())
            {
                ret[pMasqueradingVector[4]]=getValueOfMenuName();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getMenuType())
            {
                ret[pMasqueradingVector[5]]=getValueOfMenuType();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getPath())
            {
                ret[pMasqueradingVector[6]]=getValueOfPath();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getIcon())
            {
                ret[pMasqueradingVector[7]]=getValueOfIcon();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getSort())
            {
                ret[pMasqueradingVector[8]]=getValueOfSort();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getIsVisible())
            {
                ret[pMasqueradingVector[9]]=getValueOfIsVisible();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[10]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getUpdatedAt())
            {
                ret[pMasqueradingVector[11]]=getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getMenuId())
    {
        ret["menu_id"]=getValueOfMenuId();
    }
    else
    {
        ret["menu_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getParentId())
    {
        ret["parent_id"]=getValueOfParentId();
    }
    else
    {
        ret["parent_id"]=Json::Value();
    }
    if(getPermissionId())
    {
        ret["permission_id"]=getValueOfPermissionId();
    }
    else
    {
        ret["permission_id"]=Json::Value();
    }
    if(getMenuName())
    {
        ret["menu_name"]=getValueOfMenuName();
    }
    else
    {
        ret["menu_name"]=Json::Value();
    }
    if(getMenuType())
    {
        ret["menu_type"]=getValueOfMenuType();
    }
    else
    {
        ret["menu_type"]=Json::Value();
    }
    if(getPath())
    {
        ret["path"]=getValueOfPath();
    }
    else
    {
        ret["path"]=Json::Value();
    }
    if(getIcon())
    {
        ret["icon"]=getValueOfIcon();
    }
    else
    {
        ret["icon"]=Json::Value();
    }
    if(getSort())
    {
        ret["sort"]=getValueOfSort();
    }
    else
    {
        ret["sort"]=Json::Value();
    }
    if(getIsVisible())
    {
        ret["is_visible"]=getValueOfIsVisible();
    }
    else
    {
        ret["is_visible"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}

bool Menu::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("menu_id"))
    {
        if(!validJsonOfField(0, "menu_id", pJson["menu_id"], err, true))
            return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(1, "tenant_id", pJson["tenant_id"], err, true))
            return false;
    }
    if(pJson.isMember("parent_id"))
    {
        if(!validJsonOfField(2, "parent_id", pJson["parent_id"], err, true))
            return false;
    }
    if(pJson.isMember("permission_id"))
    {
        if(!validJsonOfField(3, "permission_id", pJson["permission_id"], err, true))
            return false;
    }
    if(pJson.isMember("menu_name"))
    {
        if(!validJsonOfField(4, "menu_name", pJson["menu_name"], err, true))
            return false;
    }
    if(pJson.isMember("menu_type"))
    {
        if(!validJsonOfField(5, "menu_type", pJson["menu_type"], err, true))
            return false;
    }
    if(pJson.isMember("path"))
    {
        if(!validJsonOfField(6, "path", pJson["path"], err, true))
            return false;
    }
    if(pJson.isMember("icon"))
    {
        if(!validJsonOfField(7, "icon", pJson["icon"], err, true))
            return false;
    }
    if(pJson.isMember("sort"))
    {
        if(!validJsonOfField(8, "sort", pJson["sort"], err, true))
            return false;
    }
    if(pJson.isMember("is_visible"))
    {
        if(!validJsonOfField(9, "is_visible", pJson["is_visible"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(10, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(11, "updated_at", pJson["updated_at"], err, true))
            return false;
    }
    return true;
}
bool Menu::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Menu::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("menu_id"))
    {
        if(!validJsonOfField(0, "menu_id", pJson["menu_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(1, "tenant_id", pJson["tenant_id"], err, false))
            return false;
    }
    if(pJson.isMember("parent_id"))
    {
        if(!validJsonOfField(2, "parent_id", pJson["parent_id"], err, false))
            return false;
    }
    if(pJson.isMember("permission_id"))
    {
        if(!validJsonOfField(3, "permission_id", pJson["permission_id"], err, false))
            return false;
    }
    if(pJson.isMember("menu_name"))
    {
        if(!validJsonOfField(4, "menu_name", pJson["menu_name"], err, false))
            return false;
    }
    if(pJson.isMember("menu_type"))
    {
        if(!validJsonOfField(5, "menu_type", pJson["menu_type"], err, false))
            return false;
    }
    if(pJson.isMember("path"))
    {
        if(!validJsonOfField(6, "path", pJson["path"], err, false))
            return false;
    }
    if(pJson.isMember("icon"))
    {
        if(!validJsonOfField(7, "icon", pJson["icon"], err, false))
            return false;
    }
    if(pJson.isMember("sort"))
    {
        if(!validJsonOfField(8, "sort", pJson["sort"], err, false))
            return false;
    }
    if(pJson.isMember("is_visible"))
    {
        if(!validJsonOfField(9, "is_visible", pJson["is_visible"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(10, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(11, "updated_at", pJson["updated_at"], err, false))
            return false;
    }
    return true;
}
bool Menu::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Menu::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Tenant Menu::getTenant(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from tenant where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Tenant(r[0]);
}

void Menu::getTenant(const DbClientPtr &clientPtr,
                     const std::function<void(Tenant)> &rcb,
                     const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from tenant where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Tenant(r[0]));
                    }
               }
               >> ecb;
}
std::vector<Menu> Menu::getMenus(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from menu where parent_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *menuId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Menu> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Menu(row));
    }
    return ret;
}

void Menu::getMenus(const DbClientPtr &clientPtr,
                    const std::function<void(std::vector<Menu>)> &rcb,
                    const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from menu where parent_id = ?";
    *clientPtr << sql
               << *menuId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Menu> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Menu(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
Menu Menu::getParent(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from menu where menu_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *parentId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Menu(r[0]);
}

void Menu::getParent(const DbClientPtr &clientPtr,
                     const std::function<void(Menu)> &rcb,
                     const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from menu where menu_id = ?";
    *clientPtr << sql
               << *parentId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Menu(r[0]));
                    }
               }
               >> ecb;
}
std::vector<Permission> Menu::getPermissions(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from permission where menu_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *menuId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Permission> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Permission(row));
    }
    return ret;
}

void Menu::getPermissions(const DbClientPtr &clientPtr,
                          const std::function<void(std::vector<Permission>)> &rcb,
                          const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from permission where menu_id = ?";
    *clientPtr << sql
               << *menuId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Permission> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Permission(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
