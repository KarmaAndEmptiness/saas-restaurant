/**
 *
 *  Member.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Member.h"
#include "ConsumptionRecord.h"
#include "MemberLevel.h"
#include "Tenant.h"
#include "User.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::saas_restaurant;

const std::string Member::Cols::_member_id = "member_id";
const std::string Member::Cols::_user_id = "user_id";
const std::string Member::Cols::_tenant_id = "tenant_id";
const std::string Member::Cols::_level_id = "level_id";
const std::string Member::Cols::_member_no = "member_no";
const std::string Member::Cols::_points = "points";
const std::string Member::Cols::_total_points = "total_points";
const std::string Member::Cols::_total_spent = "total_spent";
const std::string Member::Cols::_expire_date = "expire_date";
const std::string Member::Cols::_status = "status";
const std::string Member::Cols::_created_at = "created_at";
const std::string Member::Cols::_updated_at = "updated_at";
const std::string Member::Cols::_is_deleted = "is_deleted";
const std::string Member::primaryKeyName = "member_id";
const bool Member::hasPrimaryKey = true;
const std::string Member::tableName = "member";

const std::vector<typename Member::MetaData> Member::metaData_={
{"member_id","uint32_t","int(10) unsigned",4,1,1,1},
{"user_id","uint32_t","int(10) unsigned",4,0,0,0},
{"tenant_id","uint32_t","int(10) unsigned",4,0,0,0},
{"level_id","uint32_t","int(10) unsigned",4,0,0,0},
{"member_no","std::string","varchar(255)",255,0,0,0},
{"points","uint32_t","int(10) unsigned",4,0,0,0},
{"total_points","uint32_t","int(10) unsigned",4,0,0,0},
{"total_spent","std::string","varchar(255)",255,0,0,0},
{"expire_date","::trantor::Date","timestamp",0,0,0,0},
{"status","std::string","varchar(50)",50,0,0,0},
{"created_at","::trantor::Date","timestamp",0,0,0,0},
{"updated_at","::trantor::Date","timestamp",0,0,0,0},
{"is_deleted","int8_t","tinyint(1)",1,0,0,0}
};
const std::string &Member::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Member::Member(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["member_id"].isNull())
        {
            memberId_=std::make_shared<uint32_t>(r["member_id"].as<uint32_t>());
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<uint32_t>(r["user_id"].as<uint32_t>());
        }
        if(!r["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r["tenant_id"].as<uint32_t>());
        }
        if(!r["level_id"].isNull())
        {
            levelId_=std::make_shared<uint32_t>(r["level_id"].as<uint32_t>());
        }
        if(!r["member_no"].isNull())
        {
            memberNo_=std::make_shared<std::string>(r["member_no"].as<std::string>());
        }
        if(!r["points"].isNull())
        {
            points_=std::make_shared<uint32_t>(r["points"].as<uint32_t>());
        }
        if(!r["total_points"].isNull())
        {
            totalPoints_=std::make_shared<uint32_t>(r["total_points"].as<uint32_t>());
        }
        if(!r["total_spent"].isNull())
        {
            totalSpent_=std::make_shared<std::string>(r["total_spent"].as<std::string>());
        }
        if(!r["expire_date"].isNull())
        {
            auto timeStr = r["expire_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expireDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<std::string>(r["status"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>(r["is_deleted"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 13 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            memberId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            levelId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            memberNo_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            points_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            totalPoints_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            totalSpent_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expireDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            status_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            isDeleted_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

Member::Member(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            memberId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            levelId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            memberNo_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            points_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            totalPoints_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            totalSpent_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expireDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[12]].asInt64());
        }
    }
}

Member::Member(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("member_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["member_id"].isNull())
        {
            memberId_=std::make_shared<uint32_t>((uint32_t)pJson["member_id"].asUInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson["user_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("level_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["level_id"].isNull())
        {
            levelId_=std::make_shared<uint32_t>((uint32_t)pJson["level_id"].asUInt64());
        }
    }
    if(pJson.isMember("member_no"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["member_no"].isNull())
        {
            memberNo_=std::make_shared<std::string>(pJson["member_no"].asString());
        }
    }
    if(pJson.isMember("points"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["points"].isNull())
        {
            points_=std::make_shared<uint32_t>((uint32_t)pJson["points"].asUInt64());
        }
    }
    if(pJson.isMember("total_points"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["total_points"].isNull())
        {
            totalPoints_=std::make_shared<uint32_t>((uint32_t)pJson["total_points"].asUInt64());
        }
    }
    if(pJson.isMember("total_spent"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["total_spent"].isNull())
        {
            totalSpent_=std::make_shared<std::string>(pJson["total_spent"].asString());
        }
    }
    if(pJson.isMember("expire_date"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["expire_date"].isNull())
        {
            auto timeStr = pJson["expire_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expireDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("is_deleted"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson["is_deleted"].asInt64());
        }
    }
}

void Member::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            memberId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            levelId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            memberNo_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            points_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            totalPoints_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            totalSpent_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expireDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[12]].asInt64());
        }
    }
}

void Member::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("member_id"))
    {
        if(!pJson["member_id"].isNull())
        {
            memberId_=std::make_shared<uint32_t>((uint32_t)pJson["member_id"].asUInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson["user_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("level_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["level_id"].isNull())
        {
            levelId_=std::make_shared<uint32_t>((uint32_t)pJson["level_id"].asUInt64());
        }
    }
    if(pJson.isMember("member_no"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["member_no"].isNull())
        {
            memberNo_=std::make_shared<std::string>(pJson["member_no"].asString());
        }
    }
    if(pJson.isMember("points"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["points"].isNull())
        {
            points_=std::make_shared<uint32_t>((uint32_t)pJson["points"].asUInt64());
        }
    }
    if(pJson.isMember("total_points"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["total_points"].isNull())
        {
            totalPoints_=std::make_shared<uint32_t>((uint32_t)pJson["total_points"].asUInt64());
        }
    }
    if(pJson.isMember("total_spent"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["total_spent"].isNull())
        {
            totalSpent_=std::make_shared<std::string>(pJson["total_spent"].asString());
        }
    }
    if(pJson.isMember("expire_date"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["expire_date"].isNull())
        {
            auto timeStr = pJson["expire_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expireDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("is_deleted"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson["is_deleted"].asInt64());
        }
    }
}

const uint32_t &Member::getValueOfMemberId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(memberId_)
        return *memberId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Member::getMemberId() const noexcept
{
    return memberId_;
}
void Member::setMemberId(const uint32_t &pMemberId) noexcept
{
    memberId_ = std::make_shared<uint32_t>(pMemberId);
    dirtyFlag_[0] = true;
}
const typename Member::PrimaryKeyType & Member::getPrimaryKey() const
{
    assert(memberId_);
    return *memberId_;
}

const uint32_t &Member::getValueOfUserId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Member::getUserId() const noexcept
{
    return userId_;
}
void Member::setUserId(const uint32_t &pUserId) noexcept
{
    userId_ = std::make_shared<uint32_t>(pUserId);
    dirtyFlag_[1] = true;
}
void Member::setUserIdToNull() noexcept
{
    userId_.reset();
    dirtyFlag_[1] = true;
}

const uint32_t &Member::getValueOfTenantId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(tenantId_)
        return *tenantId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Member::getTenantId() const noexcept
{
    return tenantId_;
}
void Member::setTenantId(const uint32_t &pTenantId) noexcept
{
    tenantId_ = std::make_shared<uint32_t>(pTenantId);
    dirtyFlag_[2] = true;
}
void Member::setTenantIdToNull() noexcept
{
    tenantId_.reset();
    dirtyFlag_[2] = true;
}

const uint32_t &Member::getValueOfLevelId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(levelId_)
        return *levelId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Member::getLevelId() const noexcept
{
    return levelId_;
}
void Member::setLevelId(const uint32_t &pLevelId) noexcept
{
    levelId_ = std::make_shared<uint32_t>(pLevelId);
    dirtyFlag_[3] = true;
}
void Member::setLevelIdToNull() noexcept
{
    levelId_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Member::getValueOfMemberNo() const noexcept
{
    static const std::string defaultValue = std::string();
    if(memberNo_)
        return *memberNo_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Member::getMemberNo() const noexcept
{
    return memberNo_;
}
void Member::setMemberNo(const std::string &pMemberNo) noexcept
{
    memberNo_ = std::make_shared<std::string>(pMemberNo);
    dirtyFlag_[4] = true;
}
void Member::setMemberNo(std::string &&pMemberNo) noexcept
{
    memberNo_ = std::make_shared<std::string>(std::move(pMemberNo));
    dirtyFlag_[4] = true;
}
void Member::setMemberNoToNull() noexcept
{
    memberNo_.reset();
    dirtyFlag_[4] = true;
}

const uint32_t &Member::getValueOfPoints() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(points_)
        return *points_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Member::getPoints() const noexcept
{
    return points_;
}
void Member::setPoints(const uint32_t &pPoints) noexcept
{
    points_ = std::make_shared<uint32_t>(pPoints);
    dirtyFlag_[5] = true;
}
void Member::setPointsToNull() noexcept
{
    points_.reset();
    dirtyFlag_[5] = true;
}

const uint32_t &Member::getValueOfTotalPoints() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(totalPoints_)
        return *totalPoints_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Member::getTotalPoints() const noexcept
{
    return totalPoints_;
}
void Member::setTotalPoints(const uint32_t &pTotalPoints) noexcept
{
    totalPoints_ = std::make_shared<uint32_t>(pTotalPoints);
    dirtyFlag_[6] = true;
}
void Member::setTotalPointsToNull() noexcept
{
    totalPoints_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Member::getValueOfTotalSpent() const noexcept
{
    static const std::string defaultValue = std::string();
    if(totalSpent_)
        return *totalSpent_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Member::getTotalSpent() const noexcept
{
    return totalSpent_;
}
void Member::setTotalSpent(const std::string &pTotalSpent) noexcept
{
    totalSpent_ = std::make_shared<std::string>(pTotalSpent);
    dirtyFlag_[7] = true;
}
void Member::setTotalSpent(std::string &&pTotalSpent) noexcept
{
    totalSpent_ = std::make_shared<std::string>(std::move(pTotalSpent));
    dirtyFlag_[7] = true;
}
void Member::setTotalSpentToNull() noexcept
{
    totalSpent_.reset();
    dirtyFlag_[7] = true;
}

const ::trantor::Date &Member::getValueOfExpireDate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(expireDate_)
        return *expireDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Member::getExpireDate() const noexcept
{
    return expireDate_;
}
void Member::setExpireDate(const ::trantor::Date &pExpireDate) noexcept
{
    expireDate_ = std::make_shared<::trantor::Date>(pExpireDate);
    dirtyFlag_[8] = true;
}
void Member::setExpireDateToNull() noexcept
{
    expireDate_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Member::getValueOfStatus() const noexcept
{
    static const std::string defaultValue = std::string();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Member::getStatus() const noexcept
{
    return status_;
}
void Member::setStatus(const std::string &pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[9] = true;
}
void Member::setStatus(std::string &&pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus));
    dirtyFlag_[9] = true;
}
void Member::setStatusToNull() noexcept
{
    status_.reset();
    dirtyFlag_[9] = true;
}

const ::trantor::Date &Member::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Member::getCreatedAt() const noexcept
{
    return createdAt_;
}
void Member::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[10] = true;
}
void Member::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[10] = true;
}

const ::trantor::Date &Member::getValueOfUpdatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedAt_)
        return *updatedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Member::getUpdatedAt() const noexcept
{
    return updatedAt_;
}
void Member::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    updatedAt_ = std::make_shared<::trantor::Date>(pUpdatedAt);
    dirtyFlag_[11] = true;
}
void Member::setUpdatedAtToNull() noexcept
{
    updatedAt_.reset();
    dirtyFlag_[11] = true;
}

const int8_t &Member::getValueOfIsDeleted() const noexcept
{
    static const int8_t defaultValue = int8_t();
    if(isDeleted_)
        return *isDeleted_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Member::getIsDeleted() const noexcept
{
    return isDeleted_;
}
void Member::setIsDeleted(const int8_t &pIsDeleted) noexcept
{
    isDeleted_ = std::make_shared<int8_t>(pIsDeleted);
    dirtyFlag_[12] = true;
}
void Member::setIsDeletedToNull() noexcept
{
    isDeleted_.reset();
    dirtyFlag_[12] = true;
}

void Member::updateId(const uint64_t id)
{
    memberId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &Member::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "user_id",
        "tenant_id",
        "level_id",
        "member_no",
        "points",
        "total_points",
        "total_spent",
        "expire_date",
        "status",
        "created_at",
        "updated_at",
        "is_deleted"
    };
    return inCols;
}

void Member::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getLevelId())
        {
            binder << getValueOfLevelId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getMemberNo())
        {
            binder << getValueOfMemberNo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getPoints())
        {
            binder << getValueOfPoints();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getTotalPoints())
        {
            binder << getValueOfTotalPoints();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTotalSpent())
        {
            binder << getValueOfTotalSpent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getExpireDate())
        {
            binder << getValueOfExpireDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getIsDeleted())
        {
            binder << getValueOfIsDeleted();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Member::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    return ret;
}

void Member::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getLevelId())
        {
            binder << getValueOfLevelId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getMemberNo())
        {
            binder << getValueOfMemberNo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getPoints())
        {
            binder << getValueOfPoints();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getTotalPoints())
        {
            binder << getValueOfTotalPoints();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTotalSpent())
        {
            binder << getValueOfTotalSpent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getExpireDate())
        {
            binder << getValueOfExpireDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getIsDeleted())
        {
            binder << getValueOfIsDeleted();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Member::toJson() const
{
    Json::Value ret;
    if(getMemberId())
    {
        ret["member_id"]=getValueOfMemberId();
    }
    else
    {
        ret["member_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getLevelId())
    {
        ret["level_id"]=getValueOfLevelId();
    }
    else
    {
        ret["level_id"]=Json::Value();
    }
    if(getMemberNo())
    {
        ret["member_no"]=getValueOfMemberNo();
    }
    else
    {
        ret["member_no"]=Json::Value();
    }
    if(getPoints())
    {
        ret["points"]=getValueOfPoints();
    }
    else
    {
        ret["points"]=Json::Value();
    }
    if(getTotalPoints())
    {
        ret["total_points"]=getValueOfTotalPoints();
    }
    else
    {
        ret["total_points"]=Json::Value();
    }
    if(getTotalSpent())
    {
        ret["total_spent"]=getValueOfTotalSpent();
    }
    else
    {
        ret["total_spent"]=Json::Value();
    }
    if(getExpireDate())
    {
        ret["expire_date"]=getExpireDate()->toDbStringLocal();
    }
    else
    {
        ret["expire_date"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getIsDeleted())
    {
        ret["is_deleted"]=getValueOfIsDeleted();
    }
    else
    {
        ret["is_deleted"]=Json::Value();
    }
    return ret;
}

Json::Value Member::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 13)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getMemberId())
            {
                ret[pMasqueradingVector[0]]=getValueOfMemberId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[1]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTenantId())
            {
                ret[pMasqueradingVector[2]]=getValueOfTenantId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getLevelId())
            {
                ret[pMasqueradingVector[3]]=getValueOfLevelId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getMemberNo())
            {
                ret[pMasqueradingVector[4]]=getValueOfMemberNo();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getPoints())
            {
                ret[pMasqueradingVector[5]]=getValueOfPoints();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getTotalPoints())
            {
                ret[pMasqueradingVector[6]]=getValueOfTotalPoints();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getTotalSpent())
            {
                ret[pMasqueradingVector[7]]=getValueOfTotalSpent();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getExpireDate())
            {
                ret[pMasqueradingVector[8]]=getExpireDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[9]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[10]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getUpdatedAt())
            {
                ret[pMasqueradingVector[11]]=getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getIsDeleted())
            {
                ret[pMasqueradingVector[12]]=getValueOfIsDeleted();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getMemberId())
    {
        ret["member_id"]=getValueOfMemberId();
    }
    else
    {
        ret["member_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getLevelId())
    {
        ret["level_id"]=getValueOfLevelId();
    }
    else
    {
        ret["level_id"]=Json::Value();
    }
    if(getMemberNo())
    {
        ret["member_no"]=getValueOfMemberNo();
    }
    else
    {
        ret["member_no"]=Json::Value();
    }
    if(getPoints())
    {
        ret["points"]=getValueOfPoints();
    }
    else
    {
        ret["points"]=Json::Value();
    }
    if(getTotalPoints())
    {
        ret["total_points"]=getValueOfTotalPoints();
    }
    else
    {
        ret["total_points"]=Json::Value();
    }
    if(getTotalSpent())
    {
        ret["total_spent"]=getValueOfTotalSpent();
    }
    else
    {
        ret["total_spent"]=Json::Value();
    }
    if(getExpireDate())
    {
        ret["expire_date"]=getExpireDate()->toDbStringLocal();
    }
    else
    {
        ret["expire_date"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getIsDeleted())
    {
        ret["is_deleted"]=getValueOfIsDeleted();
    }
    else
    {
        ret["is_deleted"]=Json::Value();
    }
    return ret;
}

bool Member::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("member_id"))
    {
        if(!validJsonOfField(0, "member_id", pJson["member_id"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(1, "user_id", pJson["user_id"], err, true))
            return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(2, "tenant_id", pJson["tenant_id"], err, true))
            return false;
    }
    if(pJson.isMember("level_id"))
    {
        if(!validJsonOfField(3, "level_id", pJson["level_id"], err, true))
            return false;
    }
    if(pJson.isMember("member_no"))
    {
        if(!validJsonOfField(4, "member_no", pJson["member_no"], err, true))
            return false;
    }
    if(pJson.isMember("points"))
    {
        if(!validJsonOfField(5, "points", pJson["points"], err, true))
            return false;
    }
    if(pJson.isMember("total_points"))
    {
        if(!validJsonOfField(6, "total_points", pJson["total_points"], err, true))
            return false;
    }
    if(pJson.isMember("total_spent"))
    {
        if(!validJsonOfField(7, "total_spent", pJson["total_spent"], err, true))
            return false;
    }
    if(pJson.isMember("expire_date"))
    {
        if(!validJsonOfField(8, "expire_date", pJson["expire_date"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(9, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(10, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(11, "updated_at", pJson["updated_at"], err, true))
            return false;
    }
    if(pJson.isMember("is_deleted"))
    {
        if(!validJsonOfField(12, "is_deleted", pJson["is_deleted"], err, true))
            return false;
    }
    return true;
}
bool Member::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 13)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Member::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("member_id"))
    {
        if(!validJsonOfField(0, "member_id", pJson["member_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(1, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(2, "tenant_id", pJson["tenant_id"], err, false))
            return false;
    }
    if(pJson.isMember("level_id"))
    {
        if(!validJsonOfField(3, "level_id", pJson["level_id"], err, false))
            return false;
    }
    if(pJson.isMember("member_no"))
    {
        if(!validJsonOfField(4, "member_no", pJson["member_no"], err, false))
            return false;
    }
    if(pJson.isMember("points"))
    {
        if(!validJsonOfField(5, "points", pJson["points"], err, false))
            return false;
    }
    if(pJson.isMember("total_points"))
    {
        if(!validJsonOfField(6, "total_points", pJson["total_points"], err, false))
            return false;
    }
    if(pJson.isMember("total_spent"))
    {
        if(!validJsonOfField(7, "total_spent", pJson["total_spent"], err, false))
            return false;
    }
    if(pJson.isMember("expire_date"))
    {
        if(!validJsonOfField(8, "expire_date", pJson["expire_date"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(9, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(10, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(11, "updated_at", pJson["updated_at"], err, false))
            return false;
    }
    if(pJson.isMember("is_deleted"))
    {
        if(!validJsonOfField(12, "is_deleted", pJson["is_deleted"], err, false))
            return false;
    }
    return true;
}
bool Member::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 13)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Member::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson,
                              std::string &err,
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
User Member::getUser(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from user where user_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *userId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return User(r[0]);
}

void Member::getUser(const DbClientPtr &clientPtr,
                     const std::function<void(User)> &rcb,
                     const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from user where user_id = ?";
    *clientPtr << sql
               << *userId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(User(r[0]));
                    }
               }
               >> ecb;
}
Tenant Member::getTenant(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from tenant where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Tenant(r[0]);
}

void Member::getTenant(const DbClientPtr &clientPtr,
                       const std::function<void(Tenant)> &rcb,
                       const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from tenant where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Tenant(r[0]));
                    }
               }
               >> ecb;
}
MemberLevel Member::getMemberLevel(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from member_level where level_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *levelId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return MemberLevel(r[0]);
}

void Member::getMemberLevel(const DbClientPtr &clientPtr,
                            const std::function<void(MemberLevel)> &rcb,
                            const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from member_level where level_id = ?";
    *clientPtr << sql
               << *levelId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(MemberLevel(r[0]));
                    }
               }
               >> ecb;
}
std::vector<ConsumptionRecord> Member::getConsumption_records(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from consumption_record where member_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *memberId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<ConsumptionRecord> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(ConsumptionRecord(row));
    }
    return ret;
}

void Member::getConsumption_records(const DbClientPtr &clientPtr,
                                    const std::function<void(std::vector<ConsumptionRecord>)> &rcb,
                                    const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from consumption_record where member_id = ?";
    *clientPtr << sql
               << *memberId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<ConsumptionRecord> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(ConsumptionRecord(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
