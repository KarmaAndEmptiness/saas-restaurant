/**
 *
 *  OrderTable.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "OrderTable.h"
#include "Tenant.h"
#include "User.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::saas_restaurant;

const std::string OrderTable::Cols::_order_id = "order_id";
const std::string OrderTable::Cols::_tenant_id = "tenant_id";
const std::string OrderTable::Cols::_user_id = "user_id";
const std::string OrderTable::Cols::_total_amount = "total_amount";
const std::string OrderTable::Cols::_discount_ammout = "discount_ammout";
const std::string OrderTable::Cols::_payment_method = "payment_method";
const std::string OrderTable::Cols::_payment_status = "payment_status";
const std::string OrderTable::Cols::_order_status = "order_status";
const std::string OrderTable::Cols::_delivery_address = "delivery_address";
const std::string OrderTable::Cols::_order_detail = "order_detail";
const std::string OrderTable::Cols::_remark = "remark";
const std::string OrderTable::Cols::_created_at = "created_at";
const std::string OrderTable::Cols::_updated_at = "updated_at";
const std::string OrderTable::Cols::_is_deleted = "is_deleted";
const std::string OrderTable::primaryKeyName = "order_id";
const bool OrderTable::hasPrimaryKey = true;
const std::string OrderTable::tableName = "order_table";

const std::vector<typename OrderTable::MetaData> OrderTable::metaData_={
{"order_id","uint32_t","int(10) unsigned",4,1,1,1},
{"tenant_id","uint32_t","int(10) unsigned",4,0,0,0},
{"user_id","uint32_t","int(10) unsigned",4,0,0,0},
{"total_amount","std::string","varchar(255)",255,0,0,0},
{"discount_ammout","std::string","varchar(255)",255,0,0,0},
{"payment_method","std::string","varchar(255)",255,0,0,0},
{"payment_status","std::string","varchar(50)",50,0,0,0},
{"order_status","std::string","varchar(50)",50,0,0,0},
{"delivery_address","std::string","varchar(255)",255,0,0,0},
{"order_detail","std::string","longtext",0,0,0,0},
{"remark","std::string","text",0,0,0,0},
{"created_at","::trantor::Date","timestamp",0,0,0,0},
{"updated_at","::trantor::Date","timestamp",0,0,0,0},
{"is_deleted","int8_t","tinyint(1)",1,0,0,0}
};
const std::string &OrderTable::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
OrderTable::OrderTable(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["order_id"].isNull())
        {
            orderId_=std::make_shared<uint32_t>(r["order_id"].as<uint32_t>());
        }
        if(!r["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r["tenant_id"].as<uint32_t>());
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<uint32_t>(r["user_id"].as<uint32_t>());
        }
        if(!r["total_amount"].isNull())
        {
            totalAmount_=std::make_shared<std::string>(r["total_amount"].as<std::string>());
        }
        if(!r["discount_ammout"].isNull())
        {
            discountAmmout_=std::make_shared<std::string>(r["discount_ammout"].as<std::string>());
        }
        if(!r["payment_method"].isNull())
        {
            paymentMethod_=std::make_shared<std::string>(r["payment_method"].as<std::string>());
        }
        if(!r["payment_status"].isNull())
        {
            paymentStatus_=std::make_shared<std::string>(r["payment_status"].as<std::string>());
        }
        if(!r["order_status"].isNull())
        {
            orderStatus_=std::make_shared<std::string>(r["order_status"].as<std::string>());
        }
        if(!r["delivery_address"].isNull())
        {
            deliveryAddress_=std::make_shared<std::string>(r["delivery_address"].as<std::string>());
        }
        if(!r["order_detail"].isNull())
        {
            orderDetail_=std::make_shared<std::string>(r["order_detail"].as<std::string>());
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>(r["is_deleted"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 14 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            orderId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            totalAmount_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            discountAmmout_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            paymentMethod_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            paymentStatus_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            orderStatus_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            deliveryAddress_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            orderDetail_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            isDeleted_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

OrderTable::OrderTable(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 14)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            orderId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            totalAmount_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            discountAmmout_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            paymentMethod_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            paymentStatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            orderStatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            deliveryAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            orderDetail_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[12]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[13]].asInt64());
        }
    }
}

OrderTable::OrderTable(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("order_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["order_id"].isNull())
        {
            orderId_=std::make_shared<uint32_t>((uint32_t)pJson["order_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson["user_id"].asUInt64());
        }
    }
    if(pJson.isMember("total_amount"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["total_amount"].isNull())
        {
            totalAmount_=std::make_shared<std::string>(pJson["total_amount"].asString());
        }
    }
    if(pJson.isMember("discount_ammout"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["discount_ammout"].isNull())
        {
            discountAmmout_=std::make_shared<std::string>(pJson["discount_ammout"].asString());
        }
    }
    if(pJson.isMember("payment_method"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["payment_method"].isNull())
        {
            paymentMethod_=std::make_shared<std::string>(pJson["payment_method"].asString());
        }
    }
    if(pJson.isMember("payment_status"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["payment_status"].isNull())
        {
            paymentStatus_=std::make_shared<std::string>(pJson["payment_status"].asString());
        }
    }
    if(pJson.isMember("order_status"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["order_status"].isNull())
        {
            orderStatus_=std::make_shared<std::string>(pJson["order_status"].asString());
        }
    }
    if(pJson.isMember("delivery_address"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["delivery_address"].isNull())
        {
            deliveryAddress_=std::make_shared<std::string>(pJson["delivery_address"].asString());
        }
    }
    if(pJson.isMember("order_detail"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["order_detail"].isNull())
        {
            orderDetail_=std::make_shared<std::string>(pJson["order_detail"].asString());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("is_deleted"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson["is_deleted"].asInt64());
        }
    }
}

void OrderTable::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 14)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            orderId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            totalAmount_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            discountAmmout_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            paymentMethod_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            paymentStatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            orderStatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            deliveryAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            orderDetail_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[12]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[13]].asInt64());
        }
    }
}

void OrderTable::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("order_id"))
    {
        if(!pJson["order_id"].isNull())
        {
            orderId_=std::make_shared<uint32_t>((uint32_t)pJson["order_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson["user_id"].asUInt64());
        }
    }
    if(pJson.isMember("total_amount"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["total_amount"].isNull())
        {
            totalAmount_=std::make_shared<std::string>(pJson["total_amount"].asString());
        }
    }
    if(pJson.isMember("discount_ammout"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["discount_ammout"].isNull())
        {
            discountAmmout_=std::make_shared<std::string>(pJson["discount_ammout"].asString());
        }
    }
    if(pJson.isMember("payment_method"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["payment_method"].isNull())
        {
            paymentMethod_=std::make_shared<std::string>(pJson["payment_method"].asString());
        }
    }
    if(pJson.isMember("payment_status"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["payment_status"].isNull())
        {
            paymentStatus_=std::make_shared<std::string>(pJson["payment_status"].asString());
        }
    }
    if(pJson.isMember("order_status"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["order_status"].isNull())
        {
            orderStatus_=std::make_shared<std::string>(pJson["order_status"].asString());
        }
    }
    if(pJson.isMember("delivery_address"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["delivery_address"].isNull())
        {
            deliveryAddress_=std::make_shared<std::string>(pJson["delivery_address"].asString());
        }
    }
    if(pJson.isMember("order_detail"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["order_detail"].isNull())
        {
            orderDetail_=std::make_shared<std::string>(pJson["order_detail"].asString());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("is_deleted"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson["is_deleted"].asInt64());
        }
    }
}

const uint32_t &OrderTable::getValueOfOrderId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(orderId_)
        return *orderId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &OrderTable::getOrderId() const noexcept
{
    return orderId_;
}
void OrderTable::setOrderId(const uint32_t &pOrderId) noexcept
{
    orderId_ = std::make_shared<uint32_t>(pOrderId);
    dirtyFlag_[0] = true;
}
const typename OrderTable::PrimaryKeyType & OrderTable::getPrimaryKey() const
{
    assert(orderId_);
    return *orderId_;
}

const uint32_t &OrderTable::getValueOfTenantId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(tenantId_)
        return *tenantId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &OrderTable::getTenantId() const noexcept
{
    return tenantId_;
}
void OrderTable::setTenantId(const uint32_t &pTenantId) noexcept
{
    tenantId_ = std::make_shared<uint32_t>(pTenantId);
    dirtyFlag_[1] = true;
}
void OrderTable::setTenantIdToNull() noexcept
{
    tenantId_.reset();
    dirtyFlag_[1] = true;
}

const uint32_t &OrderTable::getValueOfUserId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &OrderTable::getUserId() const noexcept
{
    return userId_;
}
void OrderTable::setUserId(const uint32_t &pUserId) noexcept
{
    userId_ = std::make_shared<uint32_t>(pUserId);
    dirtyFlag_[2] = true;
}
void OrderTable::setUserIdToNull() noexcept
{
    userId_.reset();
    dirtyFlag_[2] = true;
}

const std::string &OrderTable::getValueOfTotalAmount() const noexcept
{
    static const std::string defaultValue = std::string();
    if(totalAmount_)
        return *totalAmount_;
    return defaultValue;
}
const std::shared_ptr<std::string> &OrderTable::getTotalAmount() const noexcept
{
    return totalAmount_;
}
void OrderTable::setTotalAmount(const std::string &pTotalAmount) noexcept
{
    totalAmount_ = std::make_shared<std::string>(pTotalAmount);
    dirtyFlag_[3] = true;
}
void OrderTable::setTotalAmount(std::string &&pTotalAmount) noexcept
{
    totalAmount_ = std::make_shared<std::string>(std::move(pTotalAmount));
    dirtyFlag_[3] = true;
}
void OrderTable::setTotalAmountToNull() noexcept
{
    totalAmount_.reset();
    dirtyFlag_[3] = true;
}

const std::string &OrderTable::getValueOfDiscountAmmout() const noexcept
{
    static const std::string defaultValue = std::string();
    if(discountAmmout_)
        return *discountAmmout_;
    return defaultValue;
}
const std::shared_ptr<std::string> &OrderTable::getDiscountAmmout() const noexcept
{
    return discountAmmout_;
}
void OrderTable::setDiscountAmmout(const std::string &pDiscountAmmout) noexcept
{
    discountAmmout_ = std::make_shared<std::string>(pDiscountAmmout);
    dirtyFlag_[4] = true;
}
void OrderTable::setDiscountAmmout(std::string &&pDiscountAmmout) noexcept
{
    discountAmmout_ = std::make_shared<std::string>(std::move(pDiscountAmmout));
    dirtyFlag_[4] = true;
}
void OrderTable::setDiscountAmmoutToNull() noexcept
{
    discountAmmout_.reset();
    dirtyFlag_[4] = true;
}

const std::string &OrderTable::getValueOfPaymentMethod() const noexcept
{
    static const std::string defaultValue = std::string();
    if(paymentMethod_)
        return *paymentMethod_;
    return defaultValue;
}
const std::shared_ptr<std::string> &OrderTable::getPaymentMethod() const noexcept
{
    return paymentMethod_;
}
void OrderTable::setPaymentMethod(const std::string &pPaymentMethod) noexcept
{
    paymentMethod_ = std::make_shared<std::string>(pPaymentMethod);
    dirtyFlag_[5] = true;
}
void OrderTable::setPaymentMethod(std::string &&pPaymentMethod) noexcept
{
    paymentMethod_ = std::make_shared<std::string>(std::move(pPaymentMethod));
    dirtyFlag_[5] = true;
}
void OrderTable::setPaymentMethodToNull() noexcept
{
    paymentMethod_.reset();
    dirtyFlag_[5] = true;
}

const std::string &OrderTable::getValueOfPaymentStatus() const noexcept
{
    static const std::string defaultValue = std::string();
    if(paymentStatus_)
        return *paymentStatus_;
    return defaultValue;
}
const std::shared_ptr<std::string> &OrderTable::getPaymentStatus() const noexcept
{
    return paymentStatus_;
}
void OrderTable::setPaymentStatus(const std::string &pPaymentStatus) noexcept
{
    paymentStatus_ = std::make_shared<std::string>(pPaymentStatus);
    dirtyFlag_[6] = true;
}
void OrderTable::setPaymentStatus(std::string &&pPaymentStatus) noexcept
{
    paymentStatus_ = std::make_shared<std::string>(std::move(pPaymentStatus));
    dirtyFlag_[6] = true;
}
void OrderTable::setPaymentStatusToNull() noexcept
{
    paymentStatus_.reset();
    dirtyFlag_[6] = true;
}

const std::string &OrderTable::getValueOfOrderStatus() const noexcept
{
    static const std::string defaultValue = std::string();
    if(orderStatus_)
        return *orderStatus_;
    return defaultValue;
}
const std::shared_ptr<std::string> &OrderTable::getOrderStatus() const noexcept
{
    return orderStatus_;
}
void OrderTable::setOrderStatus(const std::string &pOrderStatus) noexcept
{
    orderStatus_ = std::make_shared<std::string>(pOrderStatus);
    dirtyFlag_[7] = true;
}
void OrderTable::setOrderStatus(std::string &&pOrderStatus) noexcept
{
    orderStatus_ = std::make_shared<std::string>(std::move(pOrderStatus));
    dirtyFlag_[7] = true;
}
void OrderTable::setOrderStatusToNull() noexcept
{
    orderStatus_.reset();
    dirtyFlag_[7] = true;
}

const std::string &OrderTable::getValueOfDeliveryAddress() const noexcept
{
    static const std::string defaultValue = std::string();
    if(deliveryAddress_)
        return *deliveryAddress_;
    return defaultValue;
}
const std::shared_ptr<std::string> &OrderTable::getDeliveryAddress() const noexcept
{
    return deliveryAddress_;
}
void OrderTable::setDeliveryAddress(const std::string &pDeliveryAddress) noexcept
{
    deliveryAddress_ = std::make_shared<std::string>(pDeliveryAddress);
    dirtyFlag_[8] = true;
}
void OrderTable::setDeliveryAddress(std::string &&pDeliveryAddress) noexcept
{
    deliveryAddress_ = std::make_shared<std::string>(std::move(pDeliveryAddress));
    dirtyFlag_[8] = true;
}
void OrderTable::setDeliveryAddressToNull() noexcept
{
    deliveryAddress_.reset();
    dirtyFlag_[8] = true;
}

const std::string &OrderTable::getValueOfOrderDetail() const noexcept
{
    static const std::string defaultValue = std::string();
    if(orderDetail_)
        return *orderDetail_;
    return defaultValue;
}
const std::shared_ptr<std::string> &OrderTable::getOrderDetail() const noexcept
{
    return orderDetail_;
}
void OrderTable::setOrderDetail(const std::string &pOrderDetail) noexcept
{
    orderDetail_ = std::make_shared<std::string>(pOrderDetail);
    dirtyFlag_[9] = true;
}
void OrderTable::setOrderDetail(std::string &&pOrderDetail) noexcept
{
    orderDetail_ = std::make_shared<std::string>(std::move(pOrderDetail));
    dirtyFlag_[9] = true;
}
void OrderTable::setOrderDetailToNull() noexcept
{
    orderDetail_.reset();
    dirtyFlag_[9] = true;
}

const std::string &OrderTable::getValueOfRemark() const noexcept
{
    static const std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &OrderTable::getRemark() const noexcept
{
    return remark_;
}
void OrderTable::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[10] = true;
}
void OrderTable::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[10] = true;
}
void OrderTable::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[10] = true;
}

const ::trantor::Date &OrderTable::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &OrderTable::getCreatedAt() const noexcept
{
    return createdAt_;
}
void OrderTable::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[11] = true;
}
void OrderTable::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[11] = true;
}

const ::trantor::Date &OrderTable::getValueOfUpdatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedAt_)
        return *updatedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &OrderTable::getUpdatedAt() const noexcept
{
    return updatedAt_;
}
void OrderTable::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    updatedAt_ = std::make_shared<::trantor::Date>(pUpdatedAt);
    dirtyFlag_[12] = true;
}
void OrderTable::setUpdatedAtToNull() noexcept
{
    updatedAt_.reset();
    dirtyFlag_[12] = true;
}

const int8_t &OrderTable::getValueOfIsDeleted() const noexcept
{
    static const int8_t defaultValue = int8_t();
    if(isDeleted_)
        return *isDeleted_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &OrderTable::getIsDeleted() const noexcept
{
    return isDeleted_;
}
void OrderTable::setIsDeleted(const int8_t &pIsDeleted) noexcept
{
    isDeleted_ = std::make_shared<int8_t>(pIsDeleted);
    dirtyFlag_[13] = true;
}
void OrderTable::setIsDeletedToNull() noexcept
{
    isDeleted_.reset();
    dirtyFlag_[13] = true;
}

void OrderTable::updateId(const uint64_t id)
{
    orderId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &OrderTable::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "tenant_id",
        "user_id",
        "total_amount",
        "discount_ammout",
        "payment_method",
        "payment_status",
        "order_status",
        "delivery_address",
        "order_detail",
        "remark",
        "created_at",
        "updated_at",
        "is_deleted"
    };
    return inCols;
}

void OrderTable::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTotalAmount())
        {
            binder << getValueOfTotalAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDiscountAmmout())
        {
            binder << getValueOfDiscountAmmout();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getPaymentMethod())
        {
            binder << getValueOfPaymentMethod();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPaymentStatus())
        {
            binder << getValueOfPaymentStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getOrderStatus())
        {
            binder << getValueOfOrderStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getDeliveryAddress())
        {
            binder << getValueOfDeliveryAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getOrderDetail())
        {
            binder << getValueOfOrderDetail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getIsDeleted())
        {
            binder << getValueOfIsDeleted();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> OrderTable::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    return ret;
}

void OrderTable::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTotalAmount())
        {
            binder << getValueOfTotalAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDiscountAmmout())
        {
            binder << getValueOfDiscountAmmout();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getPaymentMethod())
        {
            binder << getValueOfPaymentMethod();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPaymentStatus())
        {
            binder << getValueOfPaymentStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getOrderStatus())
        {
            binder << getValueOfOrderStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getDeliveryAddress())
        {
            binder << getValueOfDeliveryAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getOrderDetail())
        {
            binder << getValueOfOrderDetail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getIsDeleted())
        {
            binder << getValueOfIsDeleted();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value OrderTable::toJson() const
{
    Json::Value ret;
    if(getOrderId())
    {
        ret["order_id"]=getValueOfOrderId();
    }
    else
    {
        ret["order_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getTotalAmount())
    {
        ret["total_amount"]=getValueOfTotalAmount();
    }
    else
    {
        ret["total_amount"]=Json::Value();
    }
    if(getDiscountAmmout())
    {
        ret["discount_ammout"]=getValueOfDiscountAmmout();
    }
    else
    {
        ret["discount_ammout"]=Json::Value();
    }
    if(getPaymentMethod())
    {
        ret["payment_method"]=getValueOfPaymentMethod();
    }
    else
    {
        ret["payment_method"]=Json::Value();
    }
    if(getPaymentStatus())
    {
        ret["payment_status"]=getValueOfPaymentStatus();
    }
    else
    {
        ret["payment_status"]=Json::Value();
    }
    if(getOrderStatus())
    {
        ret["order_status"]=getValueOfOrderStatus();
    }
    else
    {
        ret["order_status"]=Json::Value();
    }
    if(getDeliveryAddress())
    {
        ret["delivery_address"]=getValueOfDeliveryAddress();
    }
    else
    {
        ret["delivery_address"]=Json::Value();
    }
    if(getOrderDetail())
    {
        ret["order_detail"]=getValueOfOrderDetail();
    }
    else
    {
        ret["order_detail"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getIsDeleted())
    {
        ret["is_deleted"]=getValueOfIsDeleted();
    }
    else
    {
        ret["is_deleted"]=Json::Value();
    }
    return ret;
}

Json::Value OrderTable::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 14)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getOrderId())
            {
                ret[pMasqueradingVector[0]]=getValueOfOrderId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTenantId())
            {
                ret[pMasqueradingVector[1]]=getValueOfTenantId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[2]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTotalAmount())
            {
                ret[pMasqueradingVector[3]]=getValueOfTotalAmount();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getDiscountAmmout())
            {
                ret[pMasqueradingVector[4]]=getValueOfDiscountAmmout();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getPaymentMethod())
            {
                ret[pMasqueradingVector[5]]=getValueOfPaymentMethod();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getPaymentStatus())
            {
                ret[pMasqueradingVector[6]]=getValueOfPaymentStatus();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getOrderStatus())
            {
                ret[pMasqueradingVector[7]]=getValueOfOrderStatus();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getDeliveryAddress())
            {
                ret[pMasqueradingVector[8]]=getValueOfDeliveryAddress();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getOrderDetail())
            {
                ret[pMasqueradingVector[9]]=getValueOfOrderDetail();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[10]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[11]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getUpdatedAt())
            {
                ret[pMasqueradingVector[12]]=getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getIsDeleted())
            {
                ret[pMasqueradingVector[13]]=getValueOfIsDeleted();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getOrderId())
    {
        ret["order_id"]=getValueOfOrderId();
    }
    else
    {
        ret["order_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getTotalAmount())
    {
        ret["total_amount"]=getValueOfTotalAmount();
    }
    else
    {
        ret["total_amount"]=Json::Value();
    }
    if(getDiscountAmmout())
    {
        ret["discount_ammout"]=getValueOfDiscountAmmout();
    }
    else
    {
        ret["discount_ammout"]=Json::Value();
    }
    if(getPaymentMethod())
    {
        ret["payment_method"]=getValueOfPaymentMethod();
    }
    else
    {
        ret["payment_method"]=Json::Value();
    }
    if(getPaymentStatus())
    {
        ret["payment_status"]=getValueOfPaymentStatus();
    }
    else
    {
        ret["payment_status"]=Json::Value();
    }
    if(getOrderStatus())
    {
        ret["order_status"]=getValueOfOrderStatus();
    }
    else
    {
        ret["order_status"]=Json::Value();
    }
    if(getDeliveryAddress())
    {
        ret["delivery_address"]=getValueOfDeliveryAddress();
    }
    else
    {
        ret["delivery_address"]=Json::Value();
    }
    if(getOrderDetail())
    {
        ret["order_detail"]=getValueOfOrderDetail();
    }
    else
    {
        ret["order_detail"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getIsDeleted())
    {
        ret["is_deleted"]=getValueOfIsDeleted();
    }
    else
    {
        ret["is_deleted"]=Json::Value();
    }
    return ret;
}

bool OrderTable::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("order_id"))
    {
        if(!validJsonOfField(0, "order_id", pJson["order_id"], err, true))
            return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(1, "tenant_id", pJson["tenant_id"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(2, "user_id", pJson["user_id"], err, true))
            return false;
    }
    if(pJson.isMember("total_amount"))
    {
        if(!validJsonOfField(3, "total_amount", pJson["total_amount"], err, true))
            return false;
    }
    if(pJson.isMember("discount_ammout"))
    {
        if(!validJsonOfField(4, "discount_ammout", pJson["discount_ammout"], err, true))
            return false;
    }
    if(pJson.isMember("payment_method"))
    {
        if(!validJsonOfField(5, "payment_method", pJson["payment_method"], err, true))
            return false;
    }
    if(pJson.isMember("payment_status"))
    {
        if(!validJsonOfField(6, "payment_status", pJson["payment_status"], err, true))
            return false;
    }
    if(pJson.isMember("order_status"))
    {
        if(!validJsonOfField(7, "order_status", pJson["order_status"], err, true))
            return false;
    }
    if(pJson.isMember("delivery_address"))
    {
        if(!validJsonOfField(8, "delivery_address", pJson["delivery_address"], err, true))
            return false;
    }
    if(pJson.isMember("order_detail"))
    {
        if(!validJsonOfField(9, "order_detail", pJson["order_detail"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(10, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(11, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(12, "updated_at", pJson["updated_at"], err, true))
            return false;
    }
    if(pJson.isMember("is_deleted"))
    {
        if(!validJsonOfField(13, "is_deleted", pJson["is_deleted"], err, true))
            return false;
    }
    return true;
}
bool OrderTable::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 14)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool OrderTable::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("order_id"))
    {
        if(!validJsonOfField(0, "order_id", pJson["order_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(1, "tenant_id", pJson["tenant_id"], err, false))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(2, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("total_amount"))
    {
        if(!validJsonOfField(3, "total_amount", pJson["total_amount"], err, false))
            return false;
    }
    if(pJson.isMember("discount_ammout"))
    {
        if(!validJsonOfField(4, "discount_ammout", pJson["discount_ammout"], err, false))
            return false;
    }
    if(pJson.isMember("payment_method"))
    {
        if(!validJsonOfField(5, "payment_method", pJson["payment_method"], err, false))
            return false;
    }
    if(pJson.isMember("payment_status"))
    {
        if(!validJsonOfField(6, "payment_status", pJson["payment_status"], err, false))
            return false;
    }
    if(pJson.isMember("order_status"))
    {
        if(!validJsonOfField(7, "order_status", pJson["order_status"], err, false))
            return false;
    }
    if(pJson.isMember("delivery_address"))
    {
        if(!validJsonOfField(8, "delivery_address", pJson["delivery_address"], err, false))
            return false;
    }
    if(pJson.isMember("order_detail"))
    {
        if(!validJsonOfField(9, "order_detail", pJson["order_detail"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(10, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(11, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(12, "updated_at", pJson["updated_at"], err, false))
            return false;
    }
    if(pJson.isMember("is_deleted"))
    {
        if(!validJsonOfField(13, "is_deleted", pJson["is_deleted"], err, false))
            return false;
    }
    return true;
}
bool OrderTable::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 14)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool OrderTable::validJsonOfField(size_t index,
                                  const std::string &fieldName,
                                  const Json::Value &pJson,
                                  std::string &err,
                                  bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Tenant OrderTable::getTenant(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from tenant where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Tenant(r[0]);
}

void OrderTable::getTenant(const DbClientPtr &clientPtr,
                           const std::function<void(Tenant)> &rcb,
                           const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from tenant where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Tenant(r[0]));
                    }
               }
               >> ecb;
}
User OrderTable::getUser(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from user where user_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *userId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return User(r[0]);
}

void OrderTable::getUser(const DbClientPtr &clientPtr,
                         const std::function<void(User)> &rcb,
                         const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from user where user_id = ?";
    *clientPtr << sql
               << *userId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(User(r[0]));
                    }
               }
               >> ecb;
}
