/**
 *
 *  Order.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace saas_restaurant
{
class Tenant;
class User;

class Order
{
  public:
    struct Cols
    {
        static const std::string _order_id;
        static const std::string _order_no;
        static const std::string _tenant_id;
        static const std::string _user_id;
        static const std::string _total_amount;
        static const std::string _discount_ammout;
        static const std::string _payment_method_id;
        static const std::string _payment_status;
        static const std::string _order_status;
        static const std::string _delivery_address;
        static const std::string _order_detail;
        static const std::string _remark;
        static const std::string _created_at;
        static const std::string _updated_at;
        static const std::string _is_deleted;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = uint32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Order(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Order(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Order(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Order() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column order_id  */
    ///Get the value of the column order_id, returns the default value if the column is null
    const uint32_t &getValueOfOrderId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getOrderId() const noexcept;
    ///Set the value of the column order_id
    void setOrderId(const uint32_t &pOrderId) noexcept;

    /**  For column order_no  */
    ///Get the value of the column order_no, returns the default value if the column is null
    const std::string &getValueOfOrderNo() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getOrderNo() const noexcept;
    ///Set the value of the column order_no
    void setOrderNo(const std::string &pOrderNo) noexcept;
    void setOrderNo(std::string &&pOrderNo) noexcept;
    void setOrderNoToNull() noexcept;

    /**  For column tenant_id  */
    ///Get the value of the column tenant_id, returns the default value if the column is null
    const uint32_t &getValueOfTenantId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getTenantId() const noexcept;
    ///Set the value of the column tenant_id
    void setTenantId(const uint32_t &pTenantId) noexcept;
    void setTenantIdToNull() noexcept;

    /**  For column user_id  */
    ///Get the value of the column user_id, returns the default value if the column is null
    const uint32_t &getValueOfUserId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getUserId() const noexcept;
    ///Set the value of the column user_id
    void setUserId(const uint32_t &pUserId) noexcept;
    void setUserIdToNull() noexcept;

    /**  For column total_amount  */
    ///Get the value of the column total_amount, returns the default value if the column is null
    const std::string &getValueOfTotalAmount() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTotalAmount() const noexcept;
    ///Set the value of the column total_amount
    void setTotalAmount(const std::string &pTotalAmount) noexcept;
    void setTotalAmount(std::string &&pTotalAmount) noexcept;
    void setTotalAmountToNull() noexcept;

    /**  For column discount_ammout  */
    ///Get the value of the column discount_ammout, returns the default value if the column is null
    const std::string &getValueOfDiscountAmmout() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDiscountAmmout() const noexcept;
    ///Set the value of the column discount_ammout
    void setDiscountAmmout(const std::string &pDiscountAmmout) noexcept;
    void setDiscountAmmout(std::string &&pDiscountAmmout) noexcept;
    void setDiscountAmmoutToNull() noexcept;

    /**  For column payment_method_id  */
    ///Get the value of the column payment_method_id, returns the default value if the column is null
    const std::string &getValueOfPaymentMethodId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPaymentMethodId() const noexcept;
    ///Set the value of the column payment_method_id
    void setPaymentMethodId(const std::string &pPaymentMethodId) noexcept;
    void setPaymentMethodId(std::string &&pPaymentMethodId) noexcept;
    void setPaymentMethodIdToNull() noexcept;

    /**  For column payment_status  */
    ///Get the value of the column payment_status, returns the default value if the column is null
    const std::string &getValueOfPaymentStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPaymentStatus() const noexcept;
    ///Set the value of the column payment_status
    void setPaymentStatus(const std::string &pPaymentStatus) noexcept;
    void setPaymentStatus(std::string &&pPaymentStatus) noexcept;
    void setPaymentStatusToNull() noexcept;

    /**  For column order_status  */
    ///Get the value of the column order_status, returns the default value if the column is null
    const std::string &getValueOfOrderStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getOrderStatus() const noexcept;
    ///Set the value of the column order_status
    void setOrderStatus(const std::string &pOrderStatus) noexcept;
    void setOrderStatus(std::string &&pOrderStatus) noexcept;
    void setOrderStatusToNull() noexcept;

    /**  For column delivery_address  */
    ///Get the value of the column delivery_address, returns the default value if the column is null
    const std::string &getValueOfDeliveryAddress() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDeliveryAddress() const noexcept;
    ///Set the value of the column delivery_address
    void setDeliveryAddress(const std::string &pDeliveryAddress) noexcept;
    void setDeliveryAddress(std::string &&pDeliveryAddress) noexcept;
    void setDeliveryAddressToNull() noexcept;

    /**  For column order_detail  */
    ///Get the value of the column order_detail, returns the default value if the column is null
    const std::string &getValueOfOrderDetail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getOrderDetail() const noexcept;
    ///Set the value of the column order_detail
    void setOrderDetail(const std::string &pOrderDetail) noexcept;
    void setOrderDetail(std::string &&pOrderDetail) noexcept;
    void setOrderDetailToNull() noexcept;

    /**  For column remark  */
    ///Get the value of the column remark, returns the default value if the column is null
    const std::string &getValueOfRemark() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRemark() const noexcept;
    ///Set the value of the column remark
    void setRemark(const std::string &pRemark) noexcept;
    void setRemark(std::string &&pRemark) noexcept;
    void setRemarkToNull() noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;
    void setCreatedAtToNull() noexcept;

    /**  For column updated_at  */
    ///Get the value of the column updated_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedAt() const noexcept;
    ///Set the value of the column updated_at
    void setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept;
    void setUpdatedAtToNull() noexcept;

    /**  For column is_deleted  */
    ///Get the value of the column is_deleted, returns the default value if the column is null
    const int8_t &getValueOfIsDeleted() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsDeleted() const noexcept;
    ///Set the value of the column is_deleted
    void setIsDeleted(const int8_t &pIsDeleted) noexcept;
    void setIsDeletedToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 15;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
    Tenant getTenant(const drogon::orm::DbClientPtr &clientPtr) const;
    void getTenant(const drogon::orm::DbClientPtr &clientPtr,
                   const std::function<void(Tenant)> &rcb,
                   const drogon::orm::ExceptionCallback &ecb) const;
    User getUser(const drogon::orm::DbClientPtr &clientPtr) const;
    void getUser(const drogon::orm::DbClientPtr &clientPtr,
                 const std::function<void(User)> &rcb,
                 const drogon::orm::ExceptionCallback &ecb) const;
  private:
    friend drogon::orm::Mapper<Order>;
    friend drogon::orm::BaseBuilder<Order, true, true>;
    friend drogon::orm::BaseBuilder<Order, true, false>;
    friend drogon::orm::BaseBuilder<Order, false, true>;
    friend drogon::orm::BaseBuilder<Order, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Order>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint32_t> orderId_;
    std::shared_ptr<std::string> orderNo_;
    std::shared_ptr<uint32_t> tenantId_;
    std::shared_ptr<uint32_t> userId_;
    std::shared_ptr<std::string> totalAmount_;
    std::shared_ptr<std::string> discountAmmout_;
    std::shared_ptr<std::string> paymentMethodId_;
    std::shared_ptr<std::string> paymentStatus_;
    std::shared_ptr<std::string> orderStatus_;
    std::shared_ptr<std::string> deliveryAddress_;
    std::shared_ptr<std::string> orderDetail_;
    std::shared_ptr<std::string> remark_;
    std::shared_ptr<::trantor::Date> createdAt_;
    std::shared_ptr<::trantor::Date> updatedAt_;
    std::shared_ptr<int8_t> isDeleted_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[15]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where order_id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where order_id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "order_id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "order_no,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "tenant_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "user_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "total_amount,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "discount_ammout,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "payment_method_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "payment_status,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "order_status,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "delivery_address,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "order_detail,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "remark,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "created_at,";
            ++parametersCount;
        }
        if(dirtyFlag_[13])
        {
            sql += "updated_at,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "is_deleted,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace saas_restaurant
} // namespace drogon_model
