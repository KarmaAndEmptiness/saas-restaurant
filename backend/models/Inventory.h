/**
 *
 *  Inventory.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace saas_restaurant
{
class InventoryRecord;
class Tenant;

class Inventory
{
  public:
    struct Cols
    {
        static const std::string _inventory_id;
        static const std::string _tenant_id;
        static const std::string _quantity;
        static const std::string _item_name;
        static const std::string _item_category;
        static const std::string _item_cost;
        static const std::string _min_stock;
        static const std::string _max_stock;
        static const std::string _supplier;
        static const std::string _status;
        static const std::string _location;
        static const std::string _created_at;
        static const std::string _updated_at;
        static const std::string _is_deleted;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = uint32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Inventory(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Inventory(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Inventory(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Inventory() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column inventory_id  */
    ///Get the value of the column inventory_id, returns the default value if the column is null
    const uint32_t &getValueOfInventoryId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getInventoryId() const noexcept;
    ///Set the value of the column inventory_id
    void setInventoryId(const uint32_t &pInventoryId) noexcept;

    /**  For column tenant_id  */
    ///Get the value of the column tenant_id, returns the default value if the column is null
    const uint32_t &getValueOfTenantId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getTenantId() const noexcept;
    ///Set the value of the column tenant_id
    void setTenantId(const uint32_t &pTenantId) noexcept;
    void setTenantIdToNull() noexcept;

    /**  For column quantity  */
    ///Get the value of the column quantity, returns the default value if the column is null
    const int32_t &getValueOfQuantity() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getQuantity() const noexcept;
    ///Set the value of the column quantity
    void setQuantity(const int32_t &pQuantity) noexcept;
    void setQuantityToNull() noexcept;

    /**  For column item_name  */
    ///Get the value of the column item_name, returns the default value if the column is null
    const std::string &getValueOfItemName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getItemName() const noexcept;
    ///Set the value of the column item_name
    void setItemName(const std::string &pItemName) noexcept;
    void setItemName(std::string &&pItemName) noexcept;
    void setItemNameToNull() noexcept;

    /**  For column item_category  */
    ///Get the value of the column item_category, returns the default value if the column is null
    const std::string &getValueOfItemCategory() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getItemCategory() const noexcept;
    ///Set the value of the column item_category
    void setItemCategory(const std::string &pItemCategory) noexcept;
    void setItemCategory(std::string &&pItemCategory) noexcept;
    void setItemCategoryToNull() noexcept;

    /**  For column item_cost  */
    ///Get the value of the column item_cost, returns the default value if the column is null
    const std::string &getValueOfItemCost() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getItemCost() const noexcept;
    ///Set the value of the column item_cost
    void setItemCost(const std::string &pItemCost) noexcept;
    void setItemCost(std::string &&pItemCost) noexcept;
    void setItemCostToNull() noexcept;

    /**  For column min_stock  */
    ///Get the value of the column min_stock, returns the default value if the column is null
    const int32_t &getValueOfMinStock() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getMinStock() const noexcept;
    ///Set the value of the column min_stock
    void setMinStock(const int32_t &pMinStock) noexcept;
    void setMinStockToNull() noexcept;

    /**  For column max_stock  */
    ///Get the value of the column max_stock, returns the default value if the column is null
    const int32_t &getValueOfMaxStock() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getMaxStock() const noexcept;
    ///Set the value of the column max_stock
    void setMaxStock(const int32_t &pMaxStock) noexcept;
    void setMaxStockToNull() noexcept;

    /**  For column supplier  */
    ///Get the value of the column supplier, returns the default value if the column is null
    const std::string &getValueOfSupplier() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSupplier() const noexcept;
    ///Set the value of the column supplier
    void setSupplier(const std::string &pSupplier) noexcept;
    void setSupplier(std::string &&pSupplier) noexcept;
    void setSupplierToNull() noexcept;

    /**  For column status  */
    ///Get the value of the column status, returns the default value if the column is null
    const std::string &getValueOfStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStatus() const noexcept;
    ///Set the value of the column status
    void setStatus(const std::string &pStatus) noexcept;
    void setStatus(std::string &&pStatus) noexcept;
    void setStatusToNull() noexcept;

    /**  For column location  */
    ///Get the value of the column location, returns the default value if the column is null
    const std::string &getValueOfLocation() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLocation() const noexcept;
    ///Set the value of the column location
    void setLocation(const std::string &pLocation) noexcept;
    void setLocation(std::string &&pLocation) noexcept;
    void setLocationToNull() noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;
    void setCreatedAtToNull() noexcept;

    /**  For column updated_at  */
    ///Get the value of the column updated_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedAt() const noexcept;
    ///Set the value of the column updated_at
    void setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept;
    void setUpdatedAtToNull() noexcept;

    /**  For column is_deleted  */
    ///Get the value of the column is_deleted, returns the default value if the column is null
    const int8_t &getValueOfIsDeleted() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsDeleted() const noexcept;
    ///Set the value of the column is_deleted
    void setIsDeleted(const int8_t &pIsDeleted) noexcept;
    void setIsDeletedToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 14;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
    Tenant getTenant(const drogon::orm::DbClientPtr &clientPtr) const;
    void getTenant(const drogon::orm::DbClientPtr &clientPtr,
                   const std::function<void(Tenant)> &rcb,
                   const drogon::orm::ExceptionCallback &ecb) const;
    std::vector<InventoryRecord> getInventory_records(const drogon::orm::DbClientPtr &clientPtr) const;
    void getInventory_records(const drogon::orm::DbClientPtr &clientPtr,
                              const std::function<void(std::vector<InventoryRecord>)> &rcb,
                              const drogon::orm::ExceptionCallback &ecb) const;
  private:
    friend drogon::orm::Mapper<Inventory>;
    friend drogon::orm::BaseBuilder<Inventory, true, true>;
    friend drogon::orm::BaseBuilder<Inventory, true, false>;
    friend drogon::orm::BaseBuilder<Inventory, false, true>;
    friend drogon::orm::BaseBuilder<Inventory, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Inventory>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint32_t> inventoryId_;
    std::shared_ptr<uint32_t> tenantId_;
    std::shared_ptr<int32_t> quantity_;
    std::shared_ptr<std::string> itemName_;
    std::shared_ptr<std::string> itemCategory_;
    std::shared_ptr<std::string> itemCost_;
    std::shared_ptr<int32_t> minStock_;
    std::shared_ptr<int32_t> maxStock_;
    std::shared_ptr<std::string> supplier_;
    std::shared_ptr<std::string> status_;
    std::shared_ptr<std::string> location_;
    std::shared_ptr<::trantor::Date> createdAt_;
    std::shared_ptr<::trantor::Date> updatedAt_;
    std::shared_ptr<int8_t> isDeleted_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[14]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where inventory_id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where inventory_id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "inventory_id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "tenant_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "quantity,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "item_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "item_category,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "item_cost,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "min_stock,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "max_stock,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "supplier,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "status,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "location,";
            ++parametersCount;
        }
        sql += "created_at,";
        ++parametersCount;
        if(!dirtyFlag_[11])
        {
            needSelection=true;
        }
        sql += "updated_at,";
        ++parametersCount;
        if(!dirtyFlag_[12])
        {
            needSelection=true;
        }
        if(dirtyFlag_[13])
        {
            sql += "is_deleted,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace saas_restaurant
} // namespace drogon_model
