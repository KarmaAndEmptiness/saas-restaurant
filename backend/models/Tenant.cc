/**
 *
 *  Tenant.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Tenant.h"
#include "Branch.h"
#include "Dish.h"
#include "DishCategory.h"
#include "Inventory.h"
#include "MarketingCampaign.h"
#include "Member.h"
#include "MemberLevel.h"
#include "Menu.h"
#include "OrderTable.h"
#include "Permission.h"
#include "PermissionCategory.h"
#include "Role.h"
#include "RolePermission.h"
#include "User.h"
#include "UserRole.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::saas_restaurant;

const std::string Tenant::Cols::_tenant_id = "tenant_id";
const std::string Tenant::Cols::_tenant_name = "tenant_name";
const std::string Tenant::Cols::_email = "email";
const std::string Tenant::Cols::_phone = "phone";
const std::string Tenant::Cols::_status = "status";
const std::string Tenant::Cols::_tenant_token = "tenant_token";
const std::string Tenant::Cols::_created_at = "created_at";
const std::string Tenant::Cols::_updated_at = "updated_at";
const std::string Tenant::Cols::_is_deleted = "is_deleted";
const std::string Tenant::primaryKeyName = "tenant_id";
const bool Tenant::hasPrimaryKey = true;
const std::string Tenant::tableName = "tenant";

const std::vector<typename Tenant::MetaData> Tenant::metaData_={
{"tenant_id","uint32_t","int(10) unsigned",4,1,1,1},
{"tenant_name","std::string","varchar(255)",255,0,0,0},
{"email","std::string","varchar(255)",255,0,0,0},
{"phone","std::string","varchar(255)",255,0,0,0},
{"status","std::string","varchar(50)",50,0,0,0},
{"tenant_token","std::string","varchar(255)",255,0,0,0},
{"created_at","::trantor::Date","timestamp",0,0,0,0},
{"updated_at","::trantor::Date","timestamp",0,0,0,0},
{"is_deleted","int8_t","tinyint(1)",1,0,0,0}
};
const std::string &Tenant::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Tenant::Tenant(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r["tenant_id"].as<uint32_t>());
        }
        if(!r["tenant_name"].isNull())
        {
            tenantName_=std::make_shared<std::string>(r["tenant_name"].as<std::string>());
        }
        if(!r["email"].isNull())
        {
            email_=std::make_shared<std::string>(r["email"].as<std::string>());
        }
        if(!r["phone"].isNull())
        {
            phone_=std::make_shared<std::string>(r["phone"].as<std::string>());
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<std::string>(r["status"].as<std::string>());
        }
        if(!r["tenant_token"].isNull())
        {
            tenantToken_=std::make_shared<std::string>(r["tenant_token"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>(r["is_deleted"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            tenantName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            phone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            status_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            tenantToken_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            isDeleted_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

Tenant::Tenant(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            tenantToken_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
}

Tenant::Tenant(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["tenant_name"].isNull())
        {
            tenantName_=std::make_shared<std::string>(pJson["tenant_name"].asString());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("phone"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["phone"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("tenant_token"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["tenant_token"].isNull())
        {
            tenantToken_=std::make_shared<std::string>(pJson["tenant_token"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("is_deleted"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson["is_deleted"].asInt64());
        }
    }
}

void Tenant::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            tenantToken_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
}

void Tenant::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("tenant_id"))
    {
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["tenant_name"].isNull())
        {
            tenantName_=std::make_shared<std::string>(pJson["tenant_name"].asString());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("phone"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["phone"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("tenant_token"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["tenant_token"].isNull())
        {
            tenantToken_=std::make_shared<std::string>(pJson["tenant_token"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("is_deleted"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson["is_deleted"].asInt64());
        }
    }
}

const uint32_t &Tenant::getValueOfTenantId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(tenantId_)
        return *tenantId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Tenant::getTenantId() const noexcept
{
    return tenantId_;
}
void Tenant::setTenantId(const uint32_t &pTenantId) noexcept
{
    tenantId_ = std::make_shared<uint32_t>(pTenantId);
    dirtyFlag_[0] = true;
}
const typename Tenant::PrimaryKeyType & Tenant::getPrimaryKey() const
{
    assert(tenantId_);
    return *tenantId_;
}

const std::string &Tenant::getValueOfTenantName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(tenantName_)
        return *tenantName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Tenant::getTenantName() const noexcept
{
    return tenantName_;
}
void Tenant::setTenantName(const std::string &pTenantName) noexcept
{
    tenantName_ = std::make_shared<std::string>(pTenantName);
    dirtyFlag_[1] = true;
}
void Tenant::setTenantName(std::string &&pTenantName) noexcept
{
    tenantName_ = std::make_shared<std::string>(std::move(pTenantName));
    dirtyFlag_[1] = true;
}
void Tenant::setTenantNameToNull() noexcept
{
    tenantName_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Tenant::getValueOfEmail() const noexcept
{
    static const std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Tenant::getEmail() const noexcept
{
    return email_;
}
void Tenant::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[2] = true;
}
void Tenant::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[2] = true;
}
void Tenant::setEmailToNull() noexcept
{
    email_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Tenant::getValueOfPhone() const noexcept
{
    static const std::string defaultValue = std::string();
    if(phone_)
        return *phone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Tenant::getPhone() const noexcept
{
    return phone_;
}
void Tenant::setPhone(const std::string &pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(pPhone);
    dirtyFlag_[3] = true;
}
void Tenant::setPhone(std::string &&pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(std::move(pPhone));
    dirtyFlag_[3] = true;
}
void Tenant::setPhoneToNull() noexcept
{
    phone_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Tenant::getValueOfStatus() const noexcept
{
    static const std::string defaultValue = std::string();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Tenant::getStatus() const noexcept
{
    return status_;
}
void Tenant::setStatus(const std::string &pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[4] = true;
}
void Tenant::setStatus(std::string &&pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus));
    dirtyFlag_[4] = true;
}
void Tenant::setStatusToNull() noexcept
{
    status_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Tenant::getValueOfTenantToken() const noexcept
{
    static const std::string defaultValue = std::string();
    if(tenantToken_)
        return *tenantToken_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Tenant::getTenantToken() const noexcept
{
    return tenantToken_;
}
void Tenant::setTenantToken(const std::string &pTenantToken) noexcept
{
    tenantToken_ = std::make_shared<std::string>(pTenantToken);
    dirtyFlag_[5] = true;
}
void Tenant::setTenantToken(std::string &&pTenantToken) noexcept
{
    tenantToken_ = std::make_shared<std::string>(std::move(pTenantToken));
    dirtyFlag_[5] = true;
}
void Tenant::setTenantTokenToNull() noexcept
{
    tenantToken_.reset();
    dirtyFlag_[5] = true;
}

const ::trantor::Date &Tenant::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Tenant::getCreatedAt() const noexcept
{
    return createdAt_;
}
void Tenant::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[6] = true;
}
void Tenant::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[6] = true;
}

const ::trantor::Date &Tenant::getValueOfUpdatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedAt_)
        return *updatedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Tenant::getUpdatedAt() const noexcept
{
    return updatedAt_;
}
void Tenant::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    updatedAt_ = std::make_shared<::trantor::Date>(pUpdatedAt);
    dirtyFlag_[7] = true;
}
void Tenant::setUpdatedAtToNull() noexcept
{
    updatedAt_.reset();
    dirtyFlag_[7] = true;
}

const int8_t &Tenant::getValueOfIsDeleted() const noexcept
{
    static const int8_t defaultValue = int8_t();
    if(isDeleted_)
        return *isDeleted_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Tenant::getIsDeleted() const noexcept
{
    return isDeleted_;
}
void Tenant::setIsDeleted(const int8_t &pIsDeleted) noexcept
{
    isDeleted_ = std::make_shared<int8_t>(pIsDeleted);
    dirtyFlag_[8] = true;
}
void Tenant::setIsDeletedToNull() noexcept
{
    isDeleted_.reset();
    dirtyFlag_[8] = true;
}

void Tenant::updateId(const uint64_t id)
{
    tenantId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &Tenant::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "tenant_name",
        "email",
        "phone",
        "status",
        "tenant_token",
        "created_at",
        "updated_at",
        "is_deleted"
    };
    return inCols;
}

void Tenant::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantName())
        {
            binder << getValueOfTenantName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getTenantToken())
        {
            binder << getValueOfTenantToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getIsDeleted())
        {
            binder << getValueOfIsDeleted();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Tenant::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void Tenant::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantName())
        {
            binder << getValueOfTenantName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getTenantToken())
        {
            binder << getValueOfTenantToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getIsDeleted())
        {
            binder << getValueOfIsDeleted();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Tenant::toJson() const
{
    Json::Value ret;
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getTenantName())
    {
        ret["tenant_name"]=getValueOfTenantName();
    }
    else
    {
        ret["tenant_name"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getPhone())
    {
        ret["phone"]=getValueOfPhone();
    }
    else
    {
        ret["phone"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getTenantToken())
    {
        ret["tenant_token"]=getValueOfTenantToken();
    }
    else
    {
        ret["tenant_token"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getIsDeleted())
    {
        ret["is_deleted"]=getValueOfIsDeleted();
    }
    else
    {
        ret["is_deleted"]=Json::Value();
    }
    return ret;
}

Json::Value Tenant::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getTenantId())
            {
                ret[pMasqueradingVector[0]]=getValueOfTenantId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTenantName())
            {
                ret[pMasqueradingVector[1]]=getValueOfTenantName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[2]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getPhone())
            {
                ret[pMasqueradingVector[3]]=getValueOfPhone();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[4]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getTenantToken())
            {
                ret[pMasqueradingVector[5]]=getValueOfTenantToken();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[6]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getUpdatedAt())
            {
                ret[pMasqueradingVector[7]]=getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getIsDeleted())
            {
                ret[pMasqueradingVector[8]]=getValueOfIsDeleted();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getTenantName())
    {
        ret["tenant_name"]=getValueOfTenantName();
    }
    else
    {
        ret["tenant_name"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getPhone())
    {
        ret["phone"]=getValueOfPhone();
    }
    else
    {
        ret["phone"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getTenantToken())
    {
        ret["tenant_token"]=getValueOfTenantToken();
    }
    else
    {
        ret["tenant_token"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getIsDeleted())
    {
        ret["is_deleted"]=getValueOfIsDeleted();
    }
    else
    {
        ret["is_deleted"]=Json::Value();
    }
    return ret;
}

bool Tenant::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(0, "tenant_id", pJson["tenant_id"], err, true))
            return false;
    }
    if(pJson.isMember("tenant_name"))
    {
        if(!validJsonOfField(1, "tenant_name", pJson["tenant_name"], err, true))
            return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(2, "email", pJson["email"], err, true))
            return false;
    }
    if(pJson.isMember("phone"))
    {
        if(!validJsonOfField(3, "phone", pJson["phone"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(4, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("tenant_token"))
    {
        if(!validJsonOfField(5, "tenant_token", pJson["tenant_token"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(6, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(7, "updated_at", pJson["updated_at"], err, true))
            return false;
    }
    if(pJson.isMember("is_deleted"))
    {
        if(!validJsonOfField(8, "is_deleted", pJson["is_deleted"], err, true))
            return false;
    }
    return true;
}
bool Tenant::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Tenant::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(0, "tenant_id", pJson["tenant_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("tenant_name"))
    {
        if(!validJsonOfField(1, "tenant_name", pJson["tenant_name"], err, false))
            return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(2, "email", pJson["email"], err, false))
            return false;
    }
    if(pJson.isMember("phone"))
    {
        if(!validJsonOfField(3, "phone", pJson["phone"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(4, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("tenant_token"))
    {
        if(!validJsonOfField(5, "tenant_token", pJson["tenant_token"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(6, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(7, "updated_at", pJson["updated_at"], err, false))
            return false;
    }
    if(pJson.isMember("is_deleted"))
    {
        if(!validJsonOfField(8, "is_deleted", pJson["is_deleted"], err, false))
            return false;
    }
    return true;
}
bool Tenant::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Tenant::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson,
                              std::string &err,
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
std::vector<User> Tenant::getUsers(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from user where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<User> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(User(row));
    }
    return ret;
}

void Tenant::getUsers(const DbClientPtr &clientPtr,
                      const std::function<void(std::vector<User>)> &rcb,
                      const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from user where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<User> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(User(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<MemberLevel> Tenant::getMember_levels(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from member_level where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<MemberLevel> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(MemberLevel(row));
    }
    return ret;
}

void Tenant::getMember_levels(const DbClientPtr &clientPtr,
                              const std::function<void(std::vector<MemberLevel>)> &rcb,
                              const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from member_level where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<MemberLevel> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(MemberLevel(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<RolePermission> Tenant::getRole_permissions(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from role_permission where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<RolePermission> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(RolePermission(row));
    }
    return ret;
}

void Tenant::getRole_permissions(const DbClientPtr &clientPtr,
                                 const std::function<void(std::vector<RolePermission>)> &rcb,
                                 const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from role_permission where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<RolePermission> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(RolePermission(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<Role> Tenant::getRoles(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from role where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Role> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Role(row));
    }
    return ret;
}

void Tenant::getRoles(const DbClientPtr &clientPtr,
                      const std::function<void(std::vector<Role>)> &rcb,
                      const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from role where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Role> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Role(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<UserRole> Tenant::getUser_roles(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from user_role where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<UserRole> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(UserRole(row));
    }
    return ret;
}

void Tenant::getUser_roles(const DbClientPtr &clientPtr,
                           const std::function<void(std::vector<UserRole>)> &rcb,
                           const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from user_role where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<UserRole> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(UserRole(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<Branch> Tenant::getBranches(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from branch where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Branch> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Branch(row));
    }
    return ret;
}

void Tenant::getBranches(const DbClientPtr &clientPtr,
                         const std::function<void(std::vector<Branch>)> &rcb,
                         const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from branch where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Branch> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Branch(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<Dish> Tenant::getDishes(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from dish where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Dish> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Dish(row));
    }
    return ret;
}

void Tenant::getDishes(const DbClientPtr &clientPtr,
                       const std::function<void(std::vector<Dish>)> &rcb,
                       const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from dish where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Dish> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Dish(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<DishCategory> Tenant::getDish_categories(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from dish_category where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<DishCategory> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(DishCategory(row));
    }
    return ret;
}

void Tenant::getDish_categories(const DbClientPtr &clientPtr,
                                const std::function<void(std::vector<DishCategory>)> &rcb,
                                const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from dish_category where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<DishCategory> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(DishCategory(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<Inventory> Tenant::getInventories(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from inventory where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Inventory> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Inventory(row));
    }
    return ret;
}

void Tenant::getInventories(const DbClientPtr &clientPtr,
                            const std::function<void(std::vector<Inventory>)> &rcb,
                            const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from inventory where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Inventory> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Inventory(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<MarketingCampaign> Tenant::getMarketing_campaigns(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from marketing_campaign where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<MarketingCampaign> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(MarketingCampaign(row));
    }
    return ret;
}

void Tenant::getMarketing_campaigns(const DbClientPtr &clientPtr,
                                    const std::function<void(std::vector<MarketingCampaign>)> &rcb,
                                    const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from marketing_campaign where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<MarketingCampaign> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(MarketingCampaign(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<Member> Tenant::getMembers(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from member where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Member> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Member(row));
    }
    return ret;
}

void Tenant::getMembers(const DbClientPtr &clientPtr,
                        const std::function<void(std::vector<Member>)> &rcb,
                        const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from member where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Member> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Member(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<Menu> Tenant::getMenus(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from menu where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Menu> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Menu(row));
    }
    return ret;
}

void Tenant::getMenus(const DbClientPtr &clientPtr,
                      const std::function<void(std::vector<Menu>)> &rcb,
                      const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from menu where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Menu> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Menu(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<OrderTable> Tenant::getOrders(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from order_table where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<OrderTable> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(OrderTable(row));
    }
    return ret;
}

void Tenant::getOrders(const DbClientPtr &clientPtr,
                       const std::function<void(std::vector<OrderTable>)> &rcb,
                       const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from order_table where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<OrderTable> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(OrderTable(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<Permission> Tenant::getPermissions(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from permission where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Permission> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Permission(row));
    }
    return ret;
}

void Tenant::getPermissions(const DbClientPtr &clientPtr,
                            const std::function<void(std::vector<Permission>)> &rcb,
                            const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from permission where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Permission> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Permission(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<PermissionCategory> Tenant::getPermission_categories(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from permission_category where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<PermissionCategory> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(PermissionCategory(row));
    }
    return ret;
}

void Tenant::getPermission_categories(const DbClientPtr &clientPtr,
                                      const std::function<void(std::vector<PermissionCategory>)> &rcb,
                                      const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from permission_category where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<PermissionCategory> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(PermissionCategory(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
