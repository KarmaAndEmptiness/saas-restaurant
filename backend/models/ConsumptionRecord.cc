/**
 *
 *  ConsumptionRecord.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ConsumptionRecord.h"
#include "Member.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::saas_restaurant;

const std::string ConsumptionRecord::Cols::_record_id = "record_id";
const std::string ConsumptionRecord::Cols::_created_at = "created_at";
const std::string ConsumptionRecord::Cols::_amount = "amount";
const std::string ConsumptionRecord::Cols::_order_items = "order_items";
const std::string ConsumptionRecord::Cols::_member_id = "member_id";
const std::string ConsumptionRecord::Cols::_tenant_id = "tenant_id";
const std::string ConsumptionRecord::Cols::_points = "points";
const std::string ConsumptionRecord::primaryKeyName = "record_id";
const bool ConsumptionRecord::hasPrimaryKey = true;
const std::string ConsumptionRecord::tableName = "consumption_record";

const std::vector<typename ConsumptionRecord::MetaData> ConsumptionRecord::metaData_={
{"record_id","uint32_t","int(10) unsigned",4,1,1,1},
{"created_at","::trantor::Date","timestamp",0,0,0,0},
{"amount","std::string","varchar(255)",255,0,0,0},
{"order_items","std::string","varchar(255)",255,0,0,0},
{"member_id","uint32_t","int(10) unsigned",4,0,0,0},
{"tenant_id","uint32_t","int(10) unsigned",4,0,0,0},
{"points","std::string","varchar(255)",255,0,0,0}
};
const std::string &ConsumptionRecord::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
ConsumptionRecord::ConsumptionRecord(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["record_id"].isNull())
        {
            recordId_=std::make_shared<uint32_t>(r["record_id"].as<uint32_t>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["amount"].isNull())
        {
            amount_=std::make_shared<std::string>(r["amount"].as<std::string>());
        }
        if(!r["order_items"].isNull())
        {
            orderItems_=std::make_shared<std::string>(r["order_items"].as<std::string>());
        }
        if(!r["member_id"].isNull())
        {
            memberId_=std::make_shared<uint32_t>(r["member_id"].as<uint32_t>());
        }
        if(!r["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r["tenant_id"].as<uint32_t>());
        }
        if(!r["points"].isNull())
        {
            points_=std::make_shared<std::string>(r["points"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            recordId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            amount_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            orderItems_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            memberId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            points_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

ConsumptionRecord::ConsumptionRecord(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            recordId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            amount_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            orderItems_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            memberId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            points_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

ConsumptionRecord::ConsumptionRecord(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("record_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["record_id"].isNull())
        {
            recordId_=std::make_shared<uint32_t>((uint32_t)pJson["record_id"].asUInt64());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("amount"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["amount"].isNull())
        {
            amount_=std::make_shared<std::string>(pJson["amount"].asString());
        }
    }
    if(pJson.isMember("order_items"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["order_items"].isNull())
        {
            orderItems_=std::make_shared<std::string>(pJson["order_items"].asString());
        }
    }
    if(pJson.isMember("member_id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["member_id"].isNull())
        {
            memberId_=std::make_shared<uint32_t>((uint32_t)pJson["member_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("points"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["points"].isNull())
        {
            points_=std::make_shared<std::string>(pJson["points"].asString());
        }
    }
}

void ConsumptionRecord::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            recordId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            amount_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            orderItems_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            memberId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            points_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

void ConsumptionRecord::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("record_id"))
    {
        if(!pJson["record_id"].isNull())
        {
            recordId_=std::make_shared<uint32_t>((uint32_t)pJson["record_id"].asUInt64());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("amount"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["amount"].isNull())
        {
            amount_=std::make_shared<std::string>(pJson["amount"].asString());
        }
    }
    if(pJson.isMember("order_items"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["order_items"].isNull())
        {
            orderItems_=std::make_shared<std::string>(pJson["order_items"].asString());
        }
    }
    if(pJson.isMember("member_id"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["member_id"].isNull())
        {
            memberId_=std::make_shared<uint32_t>((uint32_t)pJson["member_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("points"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["points"].isNull())
        {
            points_=std::make_shared<std::string>(pJson["points"].asString());
        }
    }
}

const uint32_t &ConsumptionRecord::getValueOfRecordId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(recordId_)
        return *recordId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &ConsumptionRecord::getRecordId() const noexcept
{
    return recordId_;
}
void ConsumptionRecord::setRecordId(const uint32_t &pRecordId) noexcept
{
    recordId_ = std::make_shared<uint32_t>(pRecordId);
    dirtyFlag_[0] = true;
}
const typename ConsumptionRecord::PrimaryKeyType & ConsumptionRecord::getPrimaryKey() const
{
    assert(recordId_);
    return *recordId_;
}

const ::trantor::Date &ConsumptionRecord::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &ConsumptionRecord::getCreatedAt() const noexcept
{
    return createdAt_;
}
void ConsumptionRecord::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[1] = true;
}
void ConsumptionRecord::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[1] = true;
}

const std::string &ConsumptionRecord::getValueOfAmount() const noexcept
{
    static const std::string defaultValue = std::string();
    if(amount_)
        return *amount_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ConsumptionRecord::getAmount() const noexcept
{
    return amount_;
}
void ConsumptionRecord::setAmount(const std::string &pAmount) noexcept
{
    amount_ = std::make_shared<std::string>(pAmount);
    dirtyFlag_[2] = true;
}
void ConsumptionRecord::setAmount(std::string &&pAmount) noexcept
{
    amount_ = std::make_shared<std::string>(std::move(pAmount));
    dirtyFlag_[2] = true;
}
void ConsumptionRecord::setAmountToNull() noexcept
{
    amount_.reset();
    dirtyFlag_[2] = true;
}

const std::string &ConsumptionRecord::getValueOfOrderItems() const noexcept
{
    static const std::string defaultValue = std::string();
    if(orderItems_)
        return *orderItems_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ConsumptionRecord::getOrderItems() const noexcept
{
    return orderItems_;
}
void ConsumptionRecord::setOrderItems(const std::string &pOrderItems) noexcept
{
    orderItems_ = std::make_shared<std::string>(pOrderItems);
    dirtyFlag_[3] = true;
}
void ConsumptionRecord::setOrderItems(std::string &&pOrderItems) noexcept
{
    orderItems_ = std::make_shared<std::string>(std::move(pOrderItems));
    dirtyFlag_[3] = true;
}
void ConsumptionRecord::setOrderItemsToNull() noexcept
{
    orderItems_.reset();
    dirtyFlag_[3] = true;
}

const uint32_t &ConsumptionRecord::getValueOfMemberId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(memberId_)
        return *memberId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &ConsumptionRecord::getMemberId() const noexcept
{
    return memberId_;
}
void ConsumptionRecord::setMemberId(const uint32_t &pMemberId) noexcept
{
    memberId_ = std::make_shared<uint32_t>(pMemberId);
    dirtyFlag_[4] = true;
}
void ConsumptionRecord::setMemberIdToNull() noexcept
{
    memberId_.reset();
    dirtyFlag_[4] = true;
}

const uint32_t &ConsumptionRecord::getValueOfTenantId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(tenantId_)
        return *tenantId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &ConsumptionRecord::getTenantId() const noexcept
{
    return tenantId_;
}
void ConsumptionRecord::setTenantId(const uint32_t &pTenantId) noexcept
{
    tenantId_ = std::make_shared<uint32_t>(pTenantId);
    dirtyFlag_[5] = true;
}
void ConsumptionRecord::setTenantIdToNull() noexcept
{
    tenantId_.reset();
    dirtyFlag_[5] = true;
}

const std::string &ConsumptionRecord::getValueOfPoints() const noexcept
{
    static const std::string defaultValue = std::string();
    if(points_)
        return *points_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ConsumptionRecord::getPoints() const noexcept
{
    return points_;
}
void ConsumptionRecord::setPoints(const std::string &pPoints) noexcept
{
    points_ = std::make_shared<std::string>(pPoints);
    dirtyFlag_[6] = true;
}
void ConsumptionRecord::setPoints(std::string &&pPoints) noexcept
{
    points_ = std::make_shared<std::string>(std::move(pPoints));
    dirtyFlag_[6] = true;
}
void ConsumptionRecord::setPointsToNull() noexcept
{
    points_.reset();
    dirtyFlag_[6] = true;
}

void ConsumptionRecord::updateId(const uint64_t id)
{
    recordId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &ConsumptionRecord::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "created_at",
        "amount",
        "order_items",
        "member_id",
        "tenant_id",
        "points"
    };
    return inCols;
}

void ConsumptionRecord::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAmount())
        {
            binder << getValueOfAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getOrderItems())
        {
            binder << getValueOfOrderItems();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getMemberId())
        {
            binder << getValueOfMemberId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPoints())
        {
            binder << getValueOfPoints();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> ConsumptionRecord::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void ConsumptionRecord::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAmount())
        {
            binder << getValueOfAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getOrderItems())
        {
            binder << getValueOfOrderItems();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getMemberId())
        {
            binder << getValueOfMemberId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPoints())
        {
            binder << getValueOfPoints();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value ConsumptionRecord::toJson() const
{
    Json::Value ret;
    if(getRecordId())
    {
        ret["record_id"]=getValueOfRecordId();
    }
    else
    {
        ret["record_id"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getAmount())
    {
        ret["amount"]=getValueOfAmount();
    }
    else
    {
        ret["amount"]=Json::Value();
    }
    if(getOrderItems())
    {
        ret["order_items"]=getValueOfOrderItems();
    }
    else
    {
        ret["order_items"]=Json::Value();
    }
    if(getMemberId())
    {
        ret["member_id"]=getValueOfMemberId();
    }
    else
    {
        ret["member_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getPoints())
    {
        ret["points"]=getValueOfPoints();
    }
    else
    {
        ret["points"]=Json::Value();
    }
    return ret;
}

Json::Value ConsumptionRecord::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getRecordId())
            {
                ret[pMasqueradingVector[0]]=getValueOfRecordId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[1]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getAmount())
            {
                ret[pMasqueradingVector[2]]=getValueOfAmount();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getOrderItems())
            {
                ret[pMasqueradingVector[3]]=getValueOfOrderItems();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getMemberId())
            {
                ret[pMasqueradingVector[4]]=getValueOfMemberId();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getTenantId())
            {
                ret[pMasqueradingVector[5]]=getValueOfTenantId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getPoints())
            {
                ret[pMasqueradingVector[6]]=getValueOfPoints();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getRecordId())
    {
        ret["record_id"]=getValueOfRecordId();
    }
    else
    {
        ret["record_id"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getAmount())
    {
        ret["amount"]=getValueOfAmount();
    }
    else
    {
        ret["amount"]=Json::Value();
    }
    if(getOrderItems())
    {
        ret["order_items"]=getValueOfOrderItems();
    }
    else
    {
        ret["order_items"]=Json::Value();
    }
    if(getMemberId())
    {
        ret["member_id"]=getValueOfMemberId();
    }
    else
    {
        ret["member_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getPoints())
    {
        ret["points"]=getValueOfPoints();
    }
    else
    {
        ret["points"]=Json::Value();
    }
    return ret;
}

bool ConsumptionRecord::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("record_id"))
    {
        if(!validJsonOfField(0, "record_id", pJson["record_id"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(1, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("amount"))
    {
        if(!validJsonOfField(2, "amount", pJson["amount"], err, true))
            return false;
    }
    if(pJson.isMember("order_items"))
    {
        if(!validJsonOfField(3, "order_items", pJson["order_items"], err, true))
            return false;
    }
    if(pJson.isMember("member_id"))
    {
        if(!validJsonOfField(4, "member_id", pJson["member_id"], err, true))
            return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(5, "tenant_id", pJson["tenant_id"], err, true))
            return false;
    }
    if(pJson.isMember("points"))
    {
        if(!validJsonOfField(6, "points", pJson["points"], err, true))
            return false;
    }
    return true;
}
bool ConsumptionRecord::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                           const std::vector<std::string> &pMasqueradingVector,
                                                           std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ConsumptionRecord::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("record_id"))
    {
        if(!validJsonOfField(0, "record_id", pJson["record_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(1, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("amount"))
    {
        if(!validJsonOfField(2, "amount", pJson["amount"], err, false))
            return false;
    }
    if(pJson.isMember("order_items"))
    {
        if(!validJsonOfField(3, "order_items", pJson["order_items"], err, false))
            return false;
    }
    if(pJson.isMember("member_id"))
    {
        if(!validJsonOfField(4, "member_id", pJson["member_id"], err, false))
            return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(5, "tenant_id", pJson["tenant_id"], err, false))
            return false;
    }
    if(pJson.isMember("points"))
    {
        if(!validJsonOfField(6, "points", pJson["points"], err, false))
            return false;
    }
    return true;
}
bool ConsumptionRecord::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ConsumptionRecord::validJsonOfField(size_t index,
                                         const std::string &fieldName,
                                         const Json::Value &pJson,
                                         std::string &err,
                                         bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Member ConsumptionRecord::getMember(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from member where member_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *memberId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Member(r[0]);
}

void ConsumptionRecord::getMember(const DbClientPtr &clientPtr,
                                  const std::function<void(Member)> &rcb,
                                  const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from member where member_id = ?";
    *clientPtr << sql
               << *memberId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Member(r[0]));
                    }
               }
               >> ecb;
}
