/**
 *
 *  MarketingCampaign.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "MarketingCampaign.h"
#include "MemberLevel.h"
#include "Tenant.h"
#include "User.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::saas_restaurant;

const std::string MarketingCampaign::Cols::_campaign_id = "campaign_id";
const std::string MarketingCampaign::Cols::_tenant_id = "tenant_id";
const std::string MarketingCampaign::Cols::_campaign_name = "campaign_name";
const std::string MarketingCampaign::Cols::_status = "status";
const std::string MarketingCampaign::Cols::_level_id = "level_id";
const std::string MarketingCampaign::Cols::_campaign_content = "campaign_content";
const std::string MarketingCampaign::Cols::_campaign_start = "campaign_start";
const std::string MarketingCampaign::Cols::_campaign_end = "campaign_end";
const std::string MarketingCampaign::Cols::_created_by = "created_by";
const std::string MarketingCampaign::Cols::_created_at = "created_at";
const std::string MarketingCampaign::Cols::_updated_at = "updated_at";
const std::string MarketingCampaign::primaryKeyName = "campaign_id";
const bool MarketingCampaign::hasPrimaryKey = true;
const std::string MarketingCampaign::tableName = "marketing_campaign";

const std::vector<typename MarketingCampaign::MetaData> MarketingCampaign::metaData_={
{"campaign_id","uint32_t","int(10) unsigned",4,1,1,1},
{"tenant_id","uint32_t","int(10) unsigned",4,0,0,0},
{"campaign_name","std::string","varchar(255)",255,0,0,0},
{"status","std::string","varchar(50)",50,0,0,0},
{"level_id","uint32_t","int(10) unsigned",4,0,0,0},
{"campaign_content","std::string","longtext",0,0,0,0},
{"campaign_start","::trantor::Date","timestamp",0,0,0,0},
{"campaign_end","::trantor::Date","timestamp",0,0,0,0},
{"created_by","uint32_t","int(10) unsigned",4,0,0,0},
{"created_at","::trantor::Date","timestamp",0,0,0,0},
{"updated_at","::trantor::Date","timestamp",0,0,0,0}
};
const std::string &MarketingCampaign::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
MarketingCampaign::MarketingCampaign(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["campaign_id"].isNull())
        {
            campaignId_=std::make_shared<uint32_t>(r["campaign_id"].as<uint32_t>());
        }
        if(!r["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r["tenant_id"].as<uint32_t>());
        }
        if(!r["campaign_name"].isNull())
        {
            campaignName_=std::make_shared<std::string>(r["campaign_name"].as<std::string>());
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<std::string>(r["status"].as<std::string>());
        }
        if(!r["level_id"].isNull())
        {
            levelId_=std::make_shared<uint32_t>(r["level_id"].as<uint32_t>());
        }
        if(!r["campaign_content"].isNull())
        {
            campaignContent_=std::make_shared<std::string>(r["campaign_content"].as<std::string>());
        }
        if(!r["campaign_start"].isNull())
        {
            auto timeStr = r["campaign_start"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                campaignStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["campaign_end"].isNull())
        {
            auto timeStr = r["campaign_end"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                campaignEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["created_by"].isNull())
        {
            createdBy_=std::make_shared<uint32_t>(r["created_by"].as<uint32_t>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 11 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            campaignId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            campaignName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            status_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            levelId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            campaignContent_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                campaignStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                campaignEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            createdBy_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

MarketingCampaign::MarketingCampaign(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            campaignId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            campaignName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            levelId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            campaignContent_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                campaignStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                campaignEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            createdBy_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[9]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

MarketingCampaign::MarketingCampaign(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("campaign_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["campaign_id"].isNull())
        {
            campaignId_=std::make_shared<uint32_t>((uint32_t)pJson["campaign_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("campaign_name"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["campaign_name"].isNull())
        {
            campaignName_=std::make_shared<std::string>(pJson["campaign_name"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("level_id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["level_id"].isNull())
        {
            levelId_=std::make_shared<uint32_t>((uint32_t)pJson["level_id"].asUInt64());
        }
    }
    if(pJson.isMember("campaign_content"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["campaign_content"].isNull())
        {
            campaignContent_=std::make_shared<std::string>(pJson["campaign_content"].asString());
        }
    }
    if(pJson.isMember("campaign_start"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["campaign_start"].isNull())
        {
            auto timeStr = pJson["campaign_start"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                campaignStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("campaign_end"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["campaign_end"].isNull())
        {
            auto timeStr = pJson["campaign_end"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                campaignEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("created_by"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["created_by"].isNull())
        {
            createdBy_=std::make_shared<uint32_t>((uint32_t)pJson["created_by"].asUInt64());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void MarketingCampaign::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            campaignId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            campaignName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            levelId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            campaignContent_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                campaignStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                campaignEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            createdBy_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[9]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void MarketingCampaign::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("campaign_id"))
    {
        if(!pJson["campaign_id"].isNull())
        {
            campaignId_=std::make_shared<uint32_t>((uint32_t)pJson["campaign_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("campaign_name"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["campaign_name"].isNull())
        {
            campaignName_=std::make_shared<std::string>(pJson["campaign_name"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("level_id"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["level_id"].isNull())
        {
            levelId_=std::make_shared<uint32_t>((uint32_t)pJson["level_id"].asUInt64());
        }
    }
    if(pJson.isMember("campaign_content"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["campaign_content"].isNull())
        {
            campaignContent_=std::make_shared<std::string>(pJson["campaign_content"].asString());
        }
    }
    if(pJson.isMember("campaign_start"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["campaign_start"].isNull())
        {
            auto timeStr = pJson["campaign_start"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                campaignStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("campaign_end"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["campaign_end"].isNull())
        {
            auto timeStr = pJson["campaign_end"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                campaignEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("created_by"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["created_by"].isNull())
        {
            createdBy_=std::make_shared<uint32_t>((uint32_t)pJson["created_by"].asUInt64());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const uint32_t &MarketingCampaign::getValueOfCampaignId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(campaignId_)
        return *campaignId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &MarketingCampaign::getCampaignId() const noexcept
{
    return campaignId_;
}
void MarketingCampaign::setCampaignId(const uint32_t &pCampaignId) noexcept
{
    campaignId_ = std::make_shared<uint32_t>(pCampaignId);
    dirtyFlag_[0] = true;
}
const typename MarketingCampaign::PrimaryKeyType & MarketingCampaign::getPrimaryKey() const
{
    assert(campaignId_);
    return *campaignId_;
}

const uint32_t &MarketingCampaign::getValueOfTenantId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(tenantId_)
        return *tenantId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &MarketingCampaign::getTenantId() const noexcept
{
    return tenantId_;
}
void MarketingCampaign::setTenantId(const uint32_t &pTenantId) noexcept
{
    tenantId_ = std::make_shared<uint32_t>(pTenantId);
    dirtyFlag_[1] = true;
}
void MarketingCampaign::setTenantIdToNull() noexcept
{
    tenantId_.reset();
    dirtyFlag_[1] = true;
}

const std::string &MarketingCampaign::getValueOfCampaignName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(campaignName_)
        return *campaignName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MarketingCampaign::getCampaignName() const noexcept
{
    return campaignName_;
}
void MarketingCampaign::setCampaignName(const std::string &pCampaignName) noexcept
{
    campaignName_ = std::make_shared<std::string>(pCampaignName);
    dirtyFlag_[2] = true;
}
void MarketingCampaign::setCampaignName(std::string &&pCampaignName) noexcept
{
    campaignName_ = std::make_shared<std::string>(std::move(pCampaignName));
    dirtyFlag_[2] = true;
}
void MarketingCampaign::setCampaignNameToNull() noexcept
{
    campaignName_.reset();
    dirtyFlag_[2] = true;
}

const std::string &MarketingCampaign::getValueOfStatus() const noexcept
{
    static const std::string defaultValue = std::string();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MarketingCampaign::getStatus() const noexcept
{
    return status_;
}
void MarketingCampaign::setStatus(const std::string &pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[3] = true;
}
void MarketingCampaign::setStatus(std::string &&pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus));
    dirtyFlag_[3] = true;
}
void MarketingCampaign::setStatusToNull() noexcept
{
    status_.reset();
    dirtyFlag_[3] = true;
}

const uint32_t &MarketingCampaign::getValueOfLevelId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(levelId_)
        return *levelId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &MarketingCampaign::getLevelId() const noexcept
{
    return levelId_;
}
void MarketingCampaign::setLevelId(const uint32_t &pLevelId) noexcept
{
    levelId_ = std::make_shared<uint32_t>(pLevelId);
    dirtyFlag_[4] = true;
}
void MarketingCampaign::setLevelIdToNull() noexcept
{
    levelId_.reset();
    dirtyFlag_[4] = true;
}

const std::string &MarketingCampaign::getValueOfCampaignContent() const noexcept
{
    static const std::string defaultValue = std::string();
    if(campaignContent_)
        return *campaignContent_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MarketingCampaign::getCampaignContent() const noexcept
{
    return campaignContent_;
}
void MarketingCampaign::setCampaignContent(const std::string &pCampaignContent) noexcept
{
    campaignContent_ = std::make_shared<std::string>(pCampaignContent);
    dirtyFlag_[5] = true;
}
void MarketingCampaign::setCampaignContent(std::string &&pCampaignContent) noexcept
{
    campaignContent_ = std::make_shared<std::string>(std::move(pCampaignContent));
    dirtyFlag_[5] = true;
}
void MarketingCampaign::setCampaignContentToNull() noexcept
{
    campaignContent_.reset();
    dirtyFlag_[5] = true;
}

const ::trantor::Date &MarketingCampaign::getValueOfCampaignStart() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(campaignStart_)
        return *campaignStart_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &MarketingCampaign::getCampaignStart() const noexcept
{
    return campaignStart_;
}
void MarketingCampaign::setCampaignStart(const ::trantor::Date &pCampaignStart) noexcept
{
    campaignStart_ = std::make_shared<::trantor::Date>(pCampaignStart);
    dirtyFlag_[6] = true;
}
void MarketingCampaign::setCampaignStartToNull() noexcept
{
    campaignStart_.reset();
    dirtyFlag_[6] = true;
}

const ::trantor::Date &MarketingCampaign::getValueOfCampaignEnd() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(campaignEnd_)
        return *campaignEnd_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &MarketingCampaign::getCampaignEnd() const noexcept
{
    return campaignEnd_;
}
void MarketingCampaign::setCampaignEnd(const ::trantor::Date &pCampaignEnd) noexcept
{
    campaignEnd_ = std::make_shared<::trantor::Date>(pCampaignEnd);
    dirtyFlag_[7] = true;
}
void MarketingCampaign::setCampaignEndToNull() noexcept
{
    campaignEnd_.reset();
    dirtyFlag_[7] = true;
}

const uint32_t &MarketingCampaign::getValueOfCreatedBy() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(createdBy_)
        return *createdBy_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &MarketingCampaign::getCreatedBy() const noexcept
{
    return createdBy_;
}
void MarketingCampaign::setCreatedBy(const uint32_t &pCreatedBy) noexcept
{
    createdBy_ = std::make_shared<uint32_t>(pCreatedBy);
    dirtyFlag_[8] = true;
}
void MarketingCampaign::setCreatedByToNull() noexcept
{
    createdBy_.reset();
    dirtyFlag_[8] = true;
}

const ::trantor::Date &MarketingCampaign::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &MarketingCampaign::getCreatedAt() const noexcept
{
    return createdAt_;
}
void MarketingCampaign::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[9] = true;
}
void MarketingCampaign::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[9] = true;
}

const ::trantor::Date &MarketingCampaign::getValueOfUpdatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedAt_)
        return *updatedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &MarketingCampaign::getUpdatedAt() const noexcept
{
    return updatedAt_;
}
void MarketingCampaign::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    updatedAt_ = std::make_shared<::trantor::Date>(pUpdatedAt);
    dirtyFlag_[10] = true;
}
void MarketingCampaign::setUpdatedAtToNull() noexcept
{
    updatedAt_.reset();
    dirtyFlag_[10] = true;
}

void MarketingCampaign::updateId(const uint64_t id)
{
    campaignId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &MarketingCampaign::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "tenant_id",
        "campaign_name",
        "status",
        "level_id",
        "campaign_content",
        "campaign_start",
        "campaign_end",
        "created_by",
        "created_at",
        "updated_at"
    };
    return inCols;
}

void MarketingCampaign::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCampaignName())
        {
            binder << getValueOfCampaignName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLevelId())
        {
            binder << getValueOfLevelId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCampaignContent())
        {
            binder << getValueOfCampaignContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCampaignStart())
        {
            binder << getValueOfCampaignStart();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCampaignEnd())
        {
            binder << getValueOfCampaignEnd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCreatedBy())
        {
            binder << getValueOfCreatedBy();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> MarketingCampaign::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    return ret;
}

void MarketingCampaign::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCampaignName())
        {
            binder << getValueOfCampaignName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLevelId())
        {
            binder << getValueOfLevelId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCampaignContent())
        {
            binder << getValueOfCampaignContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCampaignStart())
        {
            binder << getValueOfCampaignStart();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCampaignEnd())
        {
            binder << getValueOfCampaignEnd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCreatedBy())
        {
            binder << getValueOfCreatedBy();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value MarketingCampaign::toJson() const
{
    Json::Value ret;
    if(getCampaignId())
    {
        ret["campaign_id"]=getValueOfCampaignId();
    }
    else
    {
        ret["campaign_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getCampaignName())
    {
        ret["campaign_name"]=getValueOfCampaignName();
    }
    else
    {
        ret["campaign_name"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getLevelId())
    {
        ret["level_id"]=getValueOfLevelId();
    }
    else
    {
        ret["level_id"]=Json::Value();
    }
    if(getCampaignContent())
    {
        ret["campaign_content"]=getValueOfCampaignContent();
    }
    else
    {
        ret["campaign_content"]=Json::Value();
    }
    if(getCampaignStart())
    {
        ret["campaign_start"]=getCampaignStart()->toDbStringLocal();
    }
    else
    {
        ret["campaign_start"]=Json::Value();
    }
    if(getCampaignEnd())
    {
        ret["campaign_end"]=getCampaignEnd()->toDbStringLocal();
    }
    else
    {
        ret["campaign_end"]=Json::Value();
    }
    if(getCreatedBy())
    {
        ret["created_by"]=getValueOfCreatedBy();
    }
    else
    {
        ret["created_by"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}

Json::Value MarketingCampaign::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 11)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getCampaignId())
            {
                ret[pMasqueradingVector[0]]=getValueOfCampaignId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTenantId())
            {
                ret[pMasqueradingVector[1]]=getValueOfTenantId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCampaignName())
            {
                ret[pMasqueradingVector[2]]=getValueOfCampaignName();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[3]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getLevelId())
            {
                ret[pMasqueradingVector[4]]=getValueOfLevelId();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCampaignContent())
            {
                ret[pMasqueradingVector[5]]=getValueOfCampaignContent();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getCampaignStart())
            {
                ret[pMasqueradingVector[6]]=getCampaignStart()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCampaignEnd())
            {
                ret[pMasqueradingVector[7]]=getCampaignEnd()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getCreatedBy())
            {
                ret[pMasqueradingVector[8]]=getValueOfCreatedBy();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[9]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getUpdatedAt())
            {
                ret[pMasqueradingVector[10]]=getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getCampaignId())
    {
        ret["campaign_id"]=getValueOfCampaignId();
    }
    else
    {
        ret["campaign_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getCampaignName())
    {
        ret["campaign_name"]=getValueOfCampaignName();
    }
    else
    {
        ret["campaign_name"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getLevelId())
    {
        ret["level_id"]=getValueOfLevelId();
    }
    else
    {
        ret["level_id"]=Json::Value();
    }
    if(getCampaignContent())
    {
        ret["campaign_content"]=getValueOfCampaignContent();
    }
    else
    {
        ret["campaign_content"]=Json::Value();
    }
    if(getCampaignStart())
    {
        ret["campaign_start"]=getCampaignStart()->toDbStringLocal();
    }
    else
    {
        ret["campaign_start"]=Json::Value();
    }
    if(getCampaignEnd())
    {
        ret["campaign_end"]=getCampaignEnd()->toDbStringLocal();
    }
    else
    {
        ret["campaign_end"]=Json::Value();
    }
    if(getCreatedBy())
    {
        ret["created_by"]=getValueOfCreatedBy();
    }
    else
    {
        ret["created_by"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}

bool MarketingCampaign::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("campaign_id"))
    {
        if(!validJsonOfField(0, "campaign_id", pJson["campaign_id"], err, true))
            return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(1, "tenant_id", pJson["tenant_id"], err, true))
            return false;
    }
    if(pJson.isMember("campaign_name"))
    {
        if(!validJsonOfField(2, "campaign_name", pJson["campaign_name"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(3, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("level_id"))
    {
        if(!validJsonOfField(4, "level_id", pJson["level_id"], err, true))
            return false;
    }
    if(pJson.isMember("campaign_content"))
    {
        if(!validJsonOfField(5, "campaign_content", pJson["campaign_content"], err, true))
            return false;
    }
    if(pJson.isMember("campaign_start"))
    {
        if(!validJsonOfField(6, "campaign_start", pJson["campaign_start"], err, true))
            return false;
    }
    if(pJson.isMember("campaign_end"))
    {
        if(!validJsonOfField(7, "campaign_end", pJson["campaign_end"], err, true))
            return false;
    }
    if(pJson.isMember("created_by"))
    {
        if(!validJsonOfField(8, "created_by", pJson["created_by"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(9, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(10, "updated_at", pJson["updated_at"], err, true))
            return false;
    }
    return true;
}
bool MarketingCampaign::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                           const std::vector<std::string> &pMasqueradingVector,
                                                           std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool MarketingCampaign::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("campaign_id"))
    {
        if(!validJsonOfField(0, "campaign_id", pJson["campaign_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(1, "tenant_id", pJson["tenant_id"], err, false))
            return false;
    }
    if(pJson.isMember("campaign_name"))
    {
        if(!validJsonOfField(2, "campaign_name", pJson["campaign_name"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(3, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("level_id"))
    {
        if(!validJsonOfField(4, "level_id", pJson["level_id"], err, false))
            return false;
    }
    if(pJson.isMember("campaign_content"))
    {
        if(!validJsonOfField(5, "campaign_content", pJson["campaign_content"], err, false))
            return false;
    }
    if(pJson.isMember("campaign_start"))
    {
        if(!validJsonOfField(6, "campaign_start", pJson["campaign_start"], err, false))
            return false;
    }
    if(pJson.isMember("campaign_end"))
    {
        if(!validJsonOfField(7, "campaign_end", pJson["campaign_end"], err, false))
            return false;
    }
    if(pJson.isMember("created_by"))
    {
        if(!validJsonOfField(8, "created_by", pJson["created_by"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(9, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(10, "updated_at", pJson["updated_at"], err, false))
            return false;
    }
    return true;
}
bool MarketingCampaign::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool MarketingCampaign::validJsonOfField(size_t index,
                                         const std::string &fieldName,
                                         const Json::Value &pJson,
                                         std::string &err,
                                         bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Tenant MarketingCampaign::getTenant(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from tenant where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Tenant(r[0]);
}

void MarketingCampaign::getTenant(const DbClientPtr &clientPtr,
                                  const std::function<void(Tenant)> &rcb,
                                  const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from tenant where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Tenant(r[0]));
                    }
               }
               >> ecb;
}
MemberLevel MarketingCampaign::getMemberLevel(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from member_level where level_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *levelId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return MemberLevel(r[0]);
}

void MarketingCampaign::getMemberLevel(const DbClientPtr &clientPtr,
                                       const std::function<void(MemberLevel)> &rcb,
                                       const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from member_level where level_id = ?";
    *clientPtr << sql
               << *levelId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(MemberLevel(r[0]));
                    }
               }
               >> ecb;
}
User MarketingCampaign::getUser(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from user where user_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *createdBy_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return User(r[0]);
}

void MarketingCampaign::getUser(const DbClientPtr &clientPtr,
                                const std::function<void(User)> &rcb,
                                const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from user where user_id = ?";
    *clientPtr << sql
               << *createdBy_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(User(r[0]));
                    }
               }
               >> ecb;
}
