/**
 *
 *  InventoryRecord.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace saas_restaurant
{
class Inventory;

class InventoryRecord
{
  public:
    struct Cols
    {
        static const std::string _record_id;
        static const std::string _created_at;
        static const std::string _record_type;
        static const std::string _quantity;
        static const std::string _item_id;
        static const std::string _operator_id;
        static const std::string _tenant_id;
        static const std::string _remark;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = uint32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit InventoryRecord(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit InventoryRecord(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    InventoryRecord(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    InventoryRecord() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column record_id  */
    ///Get the value of the column record_id, returns the default value if the column is null
    const uint32_t &getValueOfRecordId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getRecordId() const noexcept;
    ///Set the value of the column record_id
    void setRecordId(const uint32_t &pRecordId) noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;
    void setCreatedAtToNull() noexcept;

    /**  For column record_type  */
    ///Get the value of the column record_type, returns the default value if the column is null
    const std::string &getValueOfRecordType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRecordType() const noexcept;
    ///Set the value of the column record_type
    void setRecordType(const std::string &pRecordType) noexcept;
    void setRecordType(std::string &&pRecordType) noexcept;
    void setRecordTypeToNull() noexcept;

    /**  For column quantity  */
    ///Get the value of the column quantity, returns the default value if the column is null
    const std::string &getValueOfQuantity() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getQuantity() const noexcept;
    ///Set the value of the column quantity
    void setQuantity(const std::string &pQuantity) noexcept;
    void setQuantity(std::string &&pQuantity) noexcept;
    void setQuantityToNull() noexcept;

    /**  For column item_id  */
    ///Get the value of the column item_id, returns the default value if the column is null
    const uint32_t &getValueOfItemId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getItemId() const noexcept;
    ///Set the value of the column item_id
    void setItemId(const uint32_t &pItemId) noexcept;
    void setItemIdToNull() noexcept;

    /**  For column operator_id  */
    ///Get the value of the column operator_id, returns the default value if the column is null
    const uint32_t &getValueOfOperatorId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getOperatorId() const noexcept;
    ///Set the value of the column operator_id
    void setOperatorId(const uint32_t &pOperatorId) noexcept;
    void setOperatorIdToNull() noexcept;

    /**  For column tenant_id  */
    ///Get the value of the column tenant_id, returns the default value if the column is null
    const uint32_t &getValueOfTenantId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getTenantId() const noexcept;
    ///Set the value of the column tenant_id
    void setTenantId(const uint32_t &pTenantId) noexcept;
    void setTenantIdToNull() noexcept;

    /**  For column remark  */
    ///Get the value of the column remark, returns the default value if the column is null
    const std::string &getValueOfRemark() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRemark() const noexcept;
    ///Set the value of the column remark
    void setRemark(const std::string &pRemark) noexcept;
    void setRemark(std::string &&pRemark) noexcept;
    void setRemarkToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 8;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
    Inventory getInventory(const drogon::orm::DbClientPtr &clientPtr) const;
    void getInventory(const drogon::orm::DbClientPtr &clientPtr,
                      const std::function<void(Inventory)> &rcb,
                      const drogon::orm::ExceptionCallback &ecb) const;
  private:
    friend drogon::orm::Mapper<InventoryRecord>;
    friend drogon::orm::BaseBuilder<InventoryRecord, true, true>;
    friend drogon::orm::BaseBuilder<InventoryRecord, true, false>;
    friend drogon::orm::BaseBuilder<InventoryRecord, false, true>;
    friend drogon::orm::BaseBuilder<InventoryRecord, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<InventoryRecord>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint32_t> recordId_;
    std::shared_ptr<::trantor::Date> createdAt_;
    std::shared_ptr<std::string> recordType_;
    std::shared_ptr<std::string> quantity_;
    std::shared_ptr<uint32_t> itemId_;
    std::shared_ptr<uint32_t> operatorId_;
    std::shared_ptr<uint32_t> tenantId_;
    std::shared_ptr<std::string> remark_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[8]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where record_id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where record_id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "record_id,";
            ++parametersCount;
        sql += "created_at,";
        ++parametersCount;
        if(!dirtyFlag_[1])
        {
            needSelection=true;
        }
        if(dirtyFlag_[2])
        {
            sql += "record_type,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "quantity,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "item_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "operator_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "tenant_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "remark,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace saas_restaurant
} // namespace drogon_model
