/**
 *
 *  DishCategory.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "DishCategory.h"
#include "Dish.h"
#include "Tenant.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::saas_restaurant;

const std::string DishCategory::Cols::_category_id = "category_id";
const std::string DishCategory::Cols::_tenant_id = "tenant_id";
const std::string DishCategory::Cols::_parent_id = "parent_id";
const std::string DishCategory::Cols::_category_name = "category_name";
const std::string DishCategory::Cols::_created_at = "created_at";
const std::string DishCategory::Cols::_sort_order = "sort_order";
const std::string DishCategory::primaryKeyName = "category_id";
const bool DishCategory::hasPrimaryKey = true;
const std::string DishCategory::tableName = "dish_category";

const std::vector<typename DishCategory::MetaData> DishCategory::metaData_={
{"category_id","uint32_t","int(10) unsigned",4,1,1,1},
{"tenant_id","uint32_t","int(10) unsigned",4,0,0,0},
{"parent_id","uint32_t","int(10) unsigned",4,0,0,0},
{"category_name","std::string","varchar(255)",255,0,0,0},
{"created_at","::trantor::Date","timestamp",0,0,0,0},
{"sort_order","int32_t","int(11)",4,0,0,0}
};
const std::string &DishCategory::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
DishCategory::DishCategory(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["category_id"].isNull())
        {
            categoryId_=std::make_shared<uint32_t>(r["category_id"].as<uint32_t>());
        }
        if(!r["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r["tenant_id"].as<uint32_t>());
        }
        if(!r["parent_id"].isNull())
        {
            parentId_=std::make_shared<uint32_t>(r["parent_id"].as<uint32_t>());
        }
        if(!r["category_name"].isNull())
        {
            categoryName_=std::make_shared<std::string>(r["category_name"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["sort_order"].isNull())
        {
            sortOrder_=std::make_shared<int32_t>(r["sort_order"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            categoryId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            parentId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            categoryName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            sortOrder_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

DishCategory::DishCategory(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            categoryId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            parentId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            categoryName_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            sortOrder_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}

DishCategory::DishCategory(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("category_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["category_id"].isNull())
        {
            categoryId_=std::make_shared<uint32_t>((uint32_t)pJson["category_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("parent_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["parent_id"].isNull())
        {
            parentId_=std::make_shared<uint32_t>((uint32_t)pJson["parent_id"].asUInt64());
        }
    }
    if(pJson.isMember("category_name"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["category_name"].isNull())
        {
            categoryName_=std::make_shared<std::string>(pJson["category_name"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("sort_order"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["sort_order"].isNull())
        {
            sortOrder_=std::make_shared<int32_t>((int32_t)pJson["sort_order"].asInt64());
        }
    }
}

void DishCategory::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            categoryId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            parentId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            categoryName_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            sortOrder_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}

void DishCategory::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("category_id"))
    {
        if(!pJson["category_id"].isNull())
        {
            categoryId_=std::make_shared<uint32_t>((uint32_t)pJson["category_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("parent_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["parent_id"].isNull())
        {
            parentId_=std::make_shared<uint32_t>((uint32_t)pJson["parent_id"].asUInt64());
        }
    }
    if(pJson.isMember("category_name"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["category_name"].isNull())
        {
            categoryName_=std::make_shared<std::string>(pJson["category_name"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("sort_order"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["sort_order"].isNull())
        {
            sortOrder_=std::make_shared<int32_t>((int32_t)pJson["sort_order"].asInt64());
        }
    }
}

const uint32_t &DishCategory::getValueOfCategoryId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(categoryId_)
        return *categoryId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &DishCategory::getCategoryId() const noexcept
{
    return categoryId_;
}
void DishCategory::setCategoryId(const uint32_t &pCategoryId) noexcept
{
    categoryId_ = std::make_shared<uint32_t>(pCategoryId);
    dirtyFlag_[0] = true;
}
const typename DishCategory::PrimaryKeyType & DishCategory::getPrimaryKey() const
{
    assert(categoryId_);
    return *categoryId_;
}

const uint32_t &DishCategory::getValueOfTenantId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(tenantId_)
        return *tenantId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &DishCategory::getTenantId() const noexcept
{
    return tenantId_;
}
void DishCategory::setTenantId(const uint32_t &pTenantId) noexcept
{
    tenantId_ = std::make_shared<uint32_t>(pTenantId);
    dirtyFlag_[1] = true;
}
void DishCategory::setTenantIdToNull() noexcept
{
    tenantId_.reset();
    dirtyFlag_[1] = true;
}

const uint32_t &DishCategory::getValueOfParentId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(parentId_)
        return *parentId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &DishCategory::getParentId() const noexcept
{
    return parentId_;
}
void DishCategory::setParentId(const uint32_t &pParentId) noexcept
{
    parentId_ = std::make_shared<uint32_t>(pParentId);
    dirtyFlag_[2] = true;
}
void DishCategory::setParentIdToNull() noexcept
{
    parentId_.reset();
    dirtyFlag_[2] = true;
}

const std::string &DishCategory::getValueOfCategoryName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(categoryName_)
        return *categoryName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &DishCategory::getCategoryName() const noexcept
{
    return categoryName_;
}
void DishCategory::setCategoryName(const std::string &pCategoryName) noexcept
{
    categoryName_ = std::make_shared<std::string>(pCategoryName);
    dirtyFlag_[3] = true;
}
void DishCategory::setCategoryName(std::string &&pCategoryName) noexcept
{
    categoryName_ = std::make_shared<std::string>(std::move(pCategoryName));
    dirtyFlag_[3] = true;
}
void DishCategory::setCategoryNameToNull() noexcept
{
    categoryName_.reset();
    dirtyFlag_[3] = true;
}

const ::trantor::Date &DishCategory::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &DishCategory::getCreatedAt() const noexcept
{
    return createdAt_;
}
void DishCategory::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[4] = true;
}
void DishCategory::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[4] = true;
}

const int32_t &DishCategory::getValueOfSortOrder() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(sortOrder_)
        return *sortOrder_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &DishCategory::getSortOrder() const noexcept
{
    return sortOrder_;
}
void DishCategory::setSortOrder(const int32_t &pSortOrder) noexcept
{
    sortOrder_ = std::make_shared<int32_t>(pSortOrder);
    dirtyFlag_[5] = true;
}
void DishCategory::setSortOrderToNull() noexcept
{
    sortOrder_.reset();
    dirtyFlag_[5] = true;
}

void DishCategory::updateId(const uint64_t id)
{
    categoryId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &DishCategory::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "tenant_id",
        "parent_id",
        "category_name",
        "created_at",
        "sort_order"
    };
    return inCols;
}

void DishCategory::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getParentId())
        {
            binder << getValueOfParentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCategoryName())
        {
            binder << getValueOfCategoryName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getSortOrder())
        {
            binder << getValueOfSortOrder();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> DishCategory::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void DishCategory::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getParentId())
        {
            binder << getValueOfParentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCategoryName())
        {
            binder << getValueOfCategoryName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getSortOrder())
        {
            binder << getValueOfSortOrder();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value DishCategory::toJson() const
{
    Json::Value ret;
    if(getCategoryId())
    {
        ret["category_id"]=getValueOfCategoryId();
    }
    else
    {
        ret["category_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getParentId())
    {
        ret["parent_id"]=getValueOfParentId();
    }
    else
    {
        ret["parent_id"]=Json::Value();
    }
    if(getCategoryName())
    {
        ret["category_name"]=getValueOfCategoryName();
    }
    else
    {
        ret["category_name"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getSortOrder())
    {
        ret["sort_order"]=getValueOfSortOrder();
    }
    else
    {
        ret["sort_order"]=Json::Value();
    }
    return ret;
}

Json::Value DishCategory::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getCategoryId())
            {
                ret[pMasqueradingVector[0]]=getValueOfCategoryId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTenantId())
            {
                ret[pMasqueradingVector[1]]=getValueOfTenantId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getParentId())
            {
                ret[pMasqueradingVector[2]]=getValueOfParentId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getCategoryName())
            {
                ret[pMasqueradingVector[3]]=getValueOfCategoryName();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[4]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getSortOrder())
            {
                ret[pMasqueradingVector[5]]=getValueOfSortOrder();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getCategoryId())
    {
        ret["category_id"]=getValueOfCategoryId();
    }
    else
    {
        ret["category_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getParentId())
    {
        ret["parent_id"]=getValueOfParentId();
    }
    else
    {
        ret["parent_id"]=Json::Value();
    }
    if(getCategoryName())
    {
        ret["category_name"]=getValueOfCategoryName();
    }
    else
    {
        ret["category_name"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getSortOrder())
    {
        ret["sort_order"]=getValueOfSortOrder();
    }
    else
    {
        ret["sort_order"]=Json::Value();
    }
    return ret;
}

bool DishCategory::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("category_id"))
    {
        if(!validJsonOfField(0, "category_id", pJson["category_id"], err, true))
            return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(1, "tenant_id", pJson["tenant_id"], err, true))
            return false;
    }
    if(pJson.isMember("parent_id"))
    {
        if(!validJsonOfField(2, "parent_id", pJson["parent_id"], err, true))
            return false;
    }
    if(pJson.isMember("category_name"))
    {
        if(!validJsonOfField(3, "category_name", pJson["category_name"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(4, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("sort_order"))
    {
        if(!validJsonOfField(5, "sort_order", pJson["sort_order"], err, true))
            return false;
    }
    return true;
}
bool DishCategory::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool DishCategory::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("category_id"))
    {
        if(!validJsonOfField(0, "category_id", pJson["category_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(1, "tenant_id", pJson["tenant_id"], err, false))
            return false;
    }
    if(pJson.isMember("parent_id"))
    {
        if(!validJsonOfField(2, "parent_id", pJson["parent_id"], err, false))
            return false;
    }
    if(pJson.isMember("category_name"))
    {
        if(!validJsonOfField(3, "category_name", pJson["category_name"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(4, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("sort_order"))
    {
        if(!validJsonOfField(5, "sort_order", pJson["sort_order"], err, false))
            return false;
    }
    return true;
}
bool DishCategory::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool DishCategory::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson,
                                    std::string &err,
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Tenant DishCategory::getTenant(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from tenant where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Tenant(r[0]);
}

void DishCategory::getTenant(const DbClientPtr &clientPtr,
                             const std::function<void(Tenant)> &rcb,
                             const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from tenant where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Tenant(r[0]));
                    }
               }
               >> ecb;
}
std::vector<Dish> DishCategory::getDishes(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from dish where dish_category_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *categoryId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Dish> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Dish(row));
    }
    return ret;
}

void DishCategory::getDishes(const DbClientPtr &clientPtr,
                             const std::function<void(std::vector<Dish>)> &rcb,
                             const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from dish where dish_category_id = ?";
    *clientPtr << sql
               << *categoryId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Dish> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Dish(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<DishCategory> DishCategory::getDish_categories(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from dish_category where parent_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *categoryId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<DishCategory> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(DishCategory(row));
    }
    return ret;
}

void DishCategory::getDish_categories(const DbClientPtr &clientPtr,
                                      const std::function<void(std::vector<DishCategory>)> &rcb,
                                      const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from dish_category where parent_id = ?";
    *clientPtr << sql
               << *categoryId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<DishCategory> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(DishCategory(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
DishCategory DishCategory::getParent(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from dish_category where category_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *parentId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return DishCategory(r[0]);
}

void DishCategory::getParent(const DbClientPtr &clientPtr,
                             const std::function<void(DishCategory)> &rcb,
                             const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from dish_category where category_id = ?";
    *clientPtr << sql
               << *parentId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(DishCategory(r[0]));
                    }
               }
               >> ecb;
}
