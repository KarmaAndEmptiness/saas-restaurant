/**
 *
 *  Dish.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace saas_restaurant
{
class DishCategory;
class Inventory;
class Tenant;

class Dish
{
  public:
    struct Cols
    {
        static const std::string _dish_id;
        static const std::string _tenant_id;
        static const std::string _dish_category_id;
        static const std::string _dish_name;
        static const std::string _dish_price;
        static const std::string _cost_price;
        static const std::string _origin_price;
        static const std::string _description;
        static const std::string _cover_img;
        static const std::string _status;
        static const std::string _sort_order;
        static const std::string _is_deleted;
        static const std::string _created_at;
        static const std::string _updated_at;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = uint32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Dish(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Dish(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Dish(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Dish() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column dish_id  */
    ///Get the value of the column dish_id, returns the default value if the column is null
    const uint32_t &getValueOfDishId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getDishId() const noexcept;
    ///Set the value of the column dish_id
    void setDishId(const uint32_t &pDishId) noexcept;

    /**  For column tenant_id  */
    ///Get the value of the column tenant_id, returns the default value if the column is null
    const uint32_t &getValueOfTenantId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getTenantId() const noexcept;
    ///Set the value of the column tenant_id
    void setTenantId(const uint32_t &pTenantId) noexcept;
    void setTenantIdToNull() noexcept;

    /**  For column dish_category_id  */
    ///Get the value of the column dish_category_id, returns the default value if the column is null
    const uint32_t &getValueOfDishCategoryId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getDishCategoryId() const noexcept;
    ///Set the value of the column dish_category_id
    void setDishCategoryId(const uint32_t &pDishCategoryId) noexcept;
    void setDishCategoryIdToNull() noexcept;

    /**  For column dish_name  */
    ///Get the value of the column dish_name, returns the default value if the column is null
    const std::string &getValueOfDishName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDishName() const noexcept;
    ///Set the value of the column dish_name
    void setDishName(const std::string &pDishName) noexcept;
    void setDishName(std::string &&pDishName) noexcept;
    void setDishNameToNull() noexcept;

    /**  For column dish_price  */
    ///Get the value of the column dish_price, returns the default value if the column is null
    const std::string &getValueOfDishPrice() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDishPrice() const noexcept;
    ///Set the value of the column dish_price
    void setDishPrice(const std::string &pDishPrice) noexcept;
    void setDishPrice(std::string &&pDishPrice) noexcept;
    void setDishPriceToNull() noexcept;

    /**  For column cost_price  */
    ///Get the value of the column cost_price, returns the default value if the column is null
    const std::string &getValueOfCostPrice() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCostPrice() const noexcept;
    ///Set the value of the column cost_price
    void setCostPrice(const std::string &pCostPrice) noexcept;
    void setCostPrice(std::string &&pCostPrice) noexcept;
    void setCostPriceToNull() noexcept;

    /**  For column origin_price  */
    ///Get the value of the column origin_price, returns the default value if the column is null
    const std::string &getValueOfOriginPrice() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getOriginPrice() const noexcept;
    ///Set the value of the column origin_price
    void setOriginPrice(const std::string &pOriginPrice) noexcept;
    void setOriginPrice(std::string &&pOriginPrice) noexcept;
    void setOriginPriceToNull() noexcept;

    /**  For column description  */
    ///Get the value of the column description, returns the default value if the column is null
    const std::string &getValueOfDescription() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDescription() const noexcept;
    ///Set the value of the column description
    void setDescription(const std::string &pDescription) noexcept;
    void setDescription(std::string &&pDescription) noexcept;
    void setDescriptionToNull() noexcept;

    /**  For column cover_img  */
    ///Get the value of the column cover_img, returns the default value if the column is null
    const std::string &getValueOfCoverImg() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCoverImg() const noexcept;
    ///Set the value of the column cover_img
    void setCoverImg(const std::string &pCoverImg) noexcept;
    void setCoverImg(std::string &&pCoverImg) noexcept;
    void setCoverImgToNull() noexcept;

    /**  For column status  */
    ///Get the value of the column status, returns the default value if the column is null
    const std::string &getValueOfStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStatus() const noexcept;
    ///Set the value of the column status
    void setStatus(const std::string &pStatus) noexcept;
    void setStatus(std::string &&pStatus) noexcept;
    void setStatusToNull() noexcept;

    /**  For column sort_order  */
    ///Get the value of the column sort_order, returns the default value if the column is null
    const int32_t &getValueOfSortOrder() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getSortOrder() const noexcept;
    ///Set the value of the column sort_order
    void setSortOrder(const int32_t &pSortOrder) noexcept;
    void setSortOrderToNull() noexcept;

    /**  For column is_deleted  */
    ///Get the value of the column is_deleted, returns the default value if the column is null
    const int8_t &getValueOfIsDeleted() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsDeleted() const noexcept;
    ///Set the value of the column is_deleted
    void setIsDeleted(const int8_t &pIsDeleted) noexcept;
    void setIsDeletedToNull() noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;
    void setCreatedAtToNull() noexcept;

    /**  For column updated_at  */
    ///Get the value of the column updated_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedAt() const noexcept;
    ///Set the value of the column updated_at
    void setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept;
    void setUpdatedAtToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 14;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
    Tenant getTenant(const drogon::orm::DbClientPtr &clientPtr) const;
    void getTenant(const drogon::orm::DbClientPtr &clientPtr,
                   const std::function<void(Tenant)> &rcb,
                   const drogon::orm::ExceptionCallback &ecb) const;
    DishCategory getDishCategory(const drogon::orm::DbClientPtr &clientPtr) const;
    void getDishCategory(const drogon::orm::DbClientPtr &clientPtr,
                         const std::function<void(DishCategory)> &rcb,
                         const drogon::orm::ExceptionCallback &ecb) const;
    std::vector<Inventory> getInventories(const drogon::orm::DbClientPtr &clientPtr) const;
    void getInventories(const drogon::orm::DbClientPtr &clientPtr,
                        const std::function<void(std::vector<Inventory>)> &rcb,
                        const drogon::orm::ExceptionCallback &ecb) const;
  private:
    friend drogon::orm::Mapper<Dish>;
    friend drogon::orm::BaseBuilder<Dish, true, true>;
    friend drogon::orm::BaseBuilder<Dish, true, false>;
    friend drogon::orm::BaseBuilder<Dish, false, true>;
    friend drogon::orm::BaseBuilder<Dish, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Dish>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint32_t> dishId_;
    std::shared_ptr<uint32_t> tenantId_;
    std::shared_ptr<uint32_t> dishCategoryId_;
    std::shared_ptr<std::string> dishName_;
    std::shared_ptr<std::string> dishPrice_;
    std::shared_ptr<std::string> costPrice_;
    std::shared_ptr<std::string> originPrice_;
    std::shared_ptr<std::string> description_;
    std::shared_ptr<std::string> coverImg_;
    std::shared_ptr<std::string> status_;
    std::shared_ptr<int32_t> sortOrder_;
    std::shared_ptr<int8_t> isDeleted_;
    std::shared_ptr<::trantor::Date> createdAt_;
    std::shared_ptr<::trantor::Date> updatedAt_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[14]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where dish_id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where dish_id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "dish_id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "tenant_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "dish_category_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "dish_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "dish_price,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "cost_price,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "origin_price,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "description,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "cover_img,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "status,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "sort_order,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "is_deleted,";
            ++parametersCount;
        }
        sql += "created_at,";
        ++parametersCount;
        if(!dirtyFlag_[12])
        {
            needSelection=true;
        }
        sql += "updated_at,";
        ++parametersCount;
        if(!dirtyFlag_[13])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace saas_restaurant
} // namespace drogon_model
