/**
 *
 *  MemberLevel.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace saas_restaurant
{
class MarketingCampaign;
class Member;
class Tenant;

class MemberLevel
{
  public:
    struct Cols
    {
        static const std::string _level_id;
        static const std::string _tenant_id;
        static const std::string _level_name;
        static const std::string _required_points;
        static const std::string _required_spent;
        static const std::string _discount_rate;
        static const std::string _icon_url;
        static const std::string _benefits;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = uint32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit MemberLevel(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit MemberLevel(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    MemberLevel(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    MemberLevel() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column level_id  */
    ///Get the value of the column level_id, returns the default value if the column is null
    const uint32_t &getValueOfLevelId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getLevelId() const noexcept;
    ///Set the value of the column level_id
    void setLevelId(const uint32_t &pLevelId) noexcept;

    /**  For column tenant_id  */
    ///Get the value of the column tenant_id, returns the default value if the column is null
    const uint32_t &getValueOfTenantId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getTenantId() const noexcept;
    ///Set the value of the column tenant_id
    void setTenantId(const uint32_t &pTenantId) noexcept;
    void setTenantIdToNull() noexcept;

    /**  For column level_name  */
    ///Get the value of the column level_name, returns the default value if the column is null
    const std::string &getValueOfLevelName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLevelName() const noexcept;
    ///Set the value of the column level_name
    void setLevelName(const std::string &pLevelName) noexcept;
    void setLevelName(std::string &&pLevelName) noexcept;
    void setLevelNameToNull() noexcept;

    /**  For column required_points  */
    ///Get the value of the column required_points, returns the default value if the column is null
    const uint32_t &getValueOfRequiredPoints() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getRequiredPoints() const noexcept;
    ///Set the value of the column required_points
    void setRequiredPoints(const uint32_t &pRequiredPoints) noexcept;
    void setRequiredPointsToNull() noexcept;

    /**  For column required_spent  */
    ///Get the value of the column required_spent, returns the default value if the column is null
    const std::string &getValueOfRequiredSpent() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRequiredSpent() const noexcept;
    ///Set the value of the column required_spent
    void setRequiredSpent(const std::string &pRequiredSpent) noexcept;
    void setRequiredSpent(std::string &&pRequiredSpent) noexcept;
    void setRequiredSpentToNull() noexcept;

    /**  For column discount_rate  */
    ///Get the value of the column discount_rate, returns the default value if the column is null
    const std::string &getValueOfDiscountRate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDiscountRate() const noexcept;
    ///Set the value of the column discount_rate
    void setDiscountRate(const std::string &pDiscountRate) noexcept;
    void setDiscountRate(std::string &&pDiscountRate) noexcept;
    void setDiscountRateToNull() noexcept;

    /**  For column icon_url  */
    ///Get the value of the column icon_url, returns the default value if the column is null
    const std::string &getValueOfIconUrl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getIconUrl() const noexcept;
    ///Set the value of the column icon_url
    void setIconUrl(const std::string &pIconUrl) noexcept;
    void setIconUrl(std::string &&pIconUrl) noexcept;
    void setIconUrlToNull() noexcept;

    /**  For column benefits  */
    ///Get the value of the column benefits, returns the default value if the column is null
    const std::string &getValueOfBenefits() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBenefits() const noexcept;
    ///Set the value of the column benefits
    void setBenefits(const std::string &pBenefits) noexcept;
    void setBenefits(std::string &&pBenefits) noexcept;
    void setBenefitsToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 8;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
    Tenant getTenant(const drogon::orm::DbClientPtr &clientPtr) const;
    void getTenant(const drogon::orm::DbClientPtr &clientPtr,
                   const std::function<void(Tenant)> &rcb,
                   const drogon::orm::ExceptionCallback &ecb) const;
    std::vector<MarketingCampaign> getMarketing_campaigns(const drogon::orm::DbClientPtr &clientPtr) const;
    void getMarketing_campaigns(const drogon::orm::DbClientPtr &clientPtr,
                                const std::function<void(std::vector<MarketingCampaign>)> &rcb,
                                const drogon::orm::ExceptionCallback &ecb) const;
    std::vector<Member> getMembers(const drogon::orm::DbClientPtr &clientPtr) const;
    void getMembers(const drogon::orm::DbClientPtr &clientPtr,
                    const std::function<void(std::vector<Member>)> &rcb,
                    const drogon::orm::ExceptionCallback &ecb) const;
  private:
    friend drogon::orm::Mapper<MemberLevel>;
    friend drogon::orm::BaseBuilder<MemberLevel, true, true>;
    friend drogon::orm::BaseBuilder<MemberLevel, true, false>;
    friend drogon::orm::BaseBuilder<MemberLevel, false, true>;
    friend drogon::orm::BaseBuilder<MemberLevel, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<MemberLevel>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint32_t> levelId_;
    std::shared_ptr<uint32_t> tenantId_;
    std::shared_ptr<std::string> levelName_;
    std::shared_ptr<uint32_t> requiredPoints_;
    std::shared_ptr<std::string> requiredSpent_;
    std::shared_ptr<std::string> discountRate_;
    std::shared_ptr<std::string> iconUrl_;
    std::shared_ptr<std::string> benefits_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[8]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where level_id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where level_id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "level_id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "tenant_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "level_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "required_points,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "required_spent,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "discount_rate,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "icon_url,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "benefits,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace saas_restaurant
} // namespace drogon_model
