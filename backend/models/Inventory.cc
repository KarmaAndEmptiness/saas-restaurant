/**
 *
 *  Inventory.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Inventory.h"
#include "Dish.h"
#include "InventoryRecord.h"
#include "Tenant.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::saas_restaurant;

const std::string Inventory::Cols::_inventory_id = "inventory_id";
const std::string Inventory::Cols::_dish_id = "dish_id";
const std::string Inventory::Cols::_tenant_id = "tenant_id";
const std::string Inventory::Cols::_quantity = "quantity";
const std::string Inventory::Cols::_item_name = "item_name";
const std::string Inventory::Cols::_item_category = "item_category";
const std::string Inventory::Cols::_item_cost = "item_cost";
const std::string Inventory::Cols::_min_stock = "min_stock";
const std::string Inventory::Cols::_max_stock = "max_stock";
const std::string Inventory::Cols::_supplier = "supplier";
const std::string Inventory::Cols::_status = "status";
const std::string Inventory::Cols::_location = "location";
const std::string Inventory::Cols::_created_at = "created_at";
const std::string Inventory::Cols::_updated_at = "updated_at";
const std::string Inventory::Cols::_is_deleted = "is_deleted";
const std::string Inventory::primaryKeyName = "inventory_id";
const bool Inventory::hasPrimaryKey = true;
const std::string Inventory::tableName = "inventory";

const std::vector<typename Inventory::MetaData> Inventory::metaData_={
{"inventory_id","uint32_t","int(10) unsigned",4,1,1,1},
{"dish_id","uint32_t","int(10) unsigned",4,0,0,0},
{"tenant_id","uint32_t","int(10) unsigned",4,0,0,0},
{"quantity","int32_t","int(11)",4,0,0,0},
{"item_name","std::string","varchar(255)",255,0,0,0},
{"item_category","std::string","varchar(255)",255,0,0,0},
{"item_cost","std::string","varchar(255)",255,0,0,0},
{"min_stock","int32_t","int(11)",4,0,0,0},
{"max_stock","int32_t","int(11)",4,0,0,0},
{"supplier","std::string","varchar(255)",255,0,0,0},
{"status","std::string","varchar(255)",255,0,0,0},
{"location","std::string","varchar(255)",255,0,0,0},
{"created_at","::trantor::Date","timestamp",0,0,0,0},
{"updated_at","::trantor::Date","timestamp",0,0,0,0},
{"is_deleted","int8_t","tinyint(1)",1,0,0,0}
};
const std::string &Inventory::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Inventory::Inventory(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["inventory_id"].isNull())
        {
            inventoryId_=std::make_shared<uint32_t>(r["inventory_id"].as<uint32_t>());
        }
        if(!r["dish_id"].isNull())
        {
            dishId_=std::make_shared<uint32_t>(r["dish_id"].as<uint32_t>());
        }
        if(!r["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r["tenant_id"].as<uint32_t>());
        }
        if(!r["quantity"].isNull())
        {
            quantity_=std::make_shared<int32_t>(r["quantity"].as<int32_t>());
        }
        if(!r["item_name"].isNull())
        {
            itemName_=std::make_shared<std::string>(r["item_name"].as<std::string>());
        }
        if(!r["item_category"].isNull())
        {
            itemCategory_=std::make_shared<std::string>(r["item_category"].as<std::string>());
        }
        if(!r["item_cost"].isNull())
        {
            itemCost_=std::make_shared<std::string>(r["item_cost"].as<std::string>());
        }
        if(!r["min_stock"].isNull())
        {
            minStock_=std::make_shared<int32_t>(r["min_stock"].as<int32_t>());
        }
        if(!r["max_stock"].isNull())
        {
            maxStock_=std::make_shared<int32_t>(r["max_stock"].as<int32_t>());
        }
        if(!r["supplier"].isNull())
        {
            supplier_=std::make_shared<std::string>(r["supplier"].as<std::string>());
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<std::string>(r["status"].as<std::string>());
        }
        if(!r["location"].isNull())
        {
            location_=std::make_shared<std::string>(r["location"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>(r["is_deleted"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 15 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            inventoryId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            dishId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            quantity_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            itemName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            itemCategory_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            itemCost_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            minStock_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            maxStock_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            supplier_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            status_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            location_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            isDeleted_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

Inventory::Inventory(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 15)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            inventoryId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            dishId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            quantity_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            itemName_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            itemCategory_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            itemCost_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            minStock_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            maxStock_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            supplier_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            location_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[12]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[13]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
}

Inventory::Inventory(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("inventory_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["inventory_id"].isNull())
        {
            inventoryId_=std::make_shared<uint32_t>((uint32_t)pJson["inventory_id"].asUInt64());
        }
    }
    if(pJson.isMember("dish_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["dish_id"].isNull())
        {
            dishId_=std::make_shared<uint32_t>((uint32_t)pJson["dish_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("quantity"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["quantity"].isNull())
        {
            quantity_=std::make_shared<int32_t>((int32_t)pJson["quantity"].asInt64());
        }
    }
    if(pJson.isMember("item_name"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["item_name"].isNull())
        {
            itemName_=std::make_shared<std::string>(pJson["item_name"].asString());
        }
    }
    if(pJson.isMember("item_category"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["item_category"].isNull())
        {
            itemCategory_=std::make_shared<std::string>(pJson["item_category"].asString());
        }
    }
    if(pJson.isMember("item_cost"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["item_cost"].isNull())
        {
            itemCost_=std::make_shared<std::string>(pJson["item_cost"].asString());
        }
    }
    if(pJson.isMember("min_stock"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["min_stock"].isNull())
        {
            minStock_=std::make_shared<int32_t>((int32_t)pJson["min_stock"].asInt64());
        }
    }
    if(pJson.isMember("max_stock"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["max_stock"].isNull())
        {
            maxStock_=std::make_shared<int32_t>((int32_t)pJson["max_stock"].asInt64());
        }
    }
    if(pJson.isMember("supplier"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["supplier"].isNull())
        {
            supplier_=std::make_shared<std::string>(pJson["supplier"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("location"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["location"].isNull())
        {
            location_=std::make_shared<std::string>(pJson["location"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("is_deleted"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson["is_deleted"].asInt64());
        }
    }
}

void Inventory::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 15)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            inventoryId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            dishId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            quantity_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            itemName_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            itemCategory_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            itemCost_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            minStock_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            maxStock_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            supplier_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            location_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[12]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[13]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
}

void Inventory::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("inventory_id"))
    {
        if(!pJson["inventory_id"].isNull())
        {
            inventoryId_=std::make_shared<uint32_t>((uint32_t)pJson["inventory_id"].asUInt64());
        }
    }
    if(pJson.isMember("dish_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["dish_id"].isNull())
        {
            dishId_=std::make_shared<uint32_t>((uint32_t)pJson["dish_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("quantity"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["quantity"].isNull())
        {
            quantity_=std::make_shared<int32_t>((int32_t)pJson["quantity"].asInt64());
        }
    }
    if(pJson.isMember("item_name"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["item_name"].isNull())
        {
            itemName_=std::make_shared<std::string>(pJson["item_name"].asString());
        }
    }
    if(pJson.isMember("item_category"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["item_category"].isNull())
        {
            itemCategory_=std::make_shared<std::string>(pJson["item_category"].asString());
        }
    }
    if(pJson.isMember("item_cost"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["item_cost"].isNull())
        {
            itemCost_=std::make_shared<std::string>(pJson["item_cost"].asString());
        }
    }
    if(pJson.isMember("min_stock"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["min_stock"].isNull())
        {
            minStock_=std::make_shared<int32_t>((int32_t)pJson["min_stock"].asInt64());
        }
    }
    if(pJson.isMember("max_stock"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["max_stock"].isNull())
        {
            maxStock_=std::make_shared<int32_t>((int32_t)pJson["max_stock"].asInt64());
        }
    }
    if(pJson.isMember("supplier"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["supplier"].isNull())
        {
            supplier_=std::make_shared<std::string>(pJson["supplier"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("location"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["location"].isNull())
        {
            location_=std::make_shared<std::string>(pJson["location"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("is_deleted"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson["is_deleted"].asInt64());
        }
    }
}

const uint32_t &Inventory::getValueOfInventoryId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(inventoryId_)
        return *inventoryId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Inventory::getInventoryId() const noexcept
{
    return inventoryId_;
}
void Inventory::setInventoryId(const uint32_t &pInventoryId) noexcept
{
    inventoryId_ = std::make_shared<uint32_t>(pInventoryId);
    dirtyFlag_[0] = true;
}
const typename Inventory::PrimaryKeyType & Inventory::getPrimaryKey() const
{
    assert(inventoryId_);
    return *inventoryId_;
}

const uint32_t &Inventory::getValueOfDishId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(dishId_)
        return *dishId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Inventory::getDishId() const noexcept
{
    return dishId_;
}
void Inventory::setDishId(const uint32_t &pDishId) noexcept
{
    dishId_ = std::make_shared<uint32_t>(pDishId);
    dirtyFlag_[1] = true;
}
void Inventory::setDishIdToNull() noexcept
{
    dishId_.reset();
    dirtyFlag_[1] = true;
}

const uint32_t &Inventory::getValueOfTenantId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(tenantId_)
        return *tenantId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Inventory::getTenantId() const noexcept
{
    return tenantId_;
}
void Inventory::setTenantId(const uint32_t &pTenantId) noexcept
{
    tenantId_ = std::make_shared<uint32_t>(pTenantId);
    dirtyFlag_[2] = true;
}
void Inventory::setTenantIdToNull() noexcept
{
    tenantId_.reset();
    dirtyFlag_[2] = true;
}

const int32_t &Inventory::getValueOfQuantity() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(quantity_)
        return *quantity_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Inventory::getQuantity() const noexcept
{
    return quantity_;
}
void Inventory::setQuantity(const int32_t &pQuantity) noexcept
{
    quantity_ = std::make_shared<int32_t>(pQuantity);
    dirtyFlag_[3] = true;
}
void Inventory::setQuantityToNull() noexcept
{
    quantity_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Inventory::getValueOfItemName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(itemName_)
        return *itemName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Inventory::getItemName() const noexcept
{
    return itemName_;
}
void Inventory::setItemName(const std::string &pItemName) noexcept
{
    itemName_ = std::make_shared<std::string>(pItemName);
    dirtyFlag_[4] = true;
}
void Inventory::setItemName(std::string &&pItemName) noexcept
{
    itemName_ = std::make_shared<std::string>(std::move(pItemName));
    dirtyFlag_[4] = true;
}
void Inventory::setItemNameToNull() noexcept
{
    itemName_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Inventory::getValueOfItemCategory() const noexcept
{
    static const std::string defaultValue = std::string();
    if(itemCategory_)
        return *itemCategory_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Inventory::getItemCategory() const noexcept
{
    return itemCategory_;
}
void Inventory::setItemCategory(const std::string &pItemCategory) noexcept
{
    itemCategory_ = std::make_shared<std::string>(pItemCategory);
    dirtyFlag_[5] = true;
}
void Inventory::setItemCategory(std::string &&pItemCategory) noexcept
{
    itemCategory_ = std::make_shared<std::string>(std::move(pItemCategory));
    dirtyFlag_[5] = true;
}
void Inventory::setItemCategoryToNull() noexcept
{
    itemCategory_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Inventory::getValueOfItemCost() const noexcept
{
    static const std::string defaultValue = std::string();
    if(itemCost_)
        return *itemCost_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Inventory::getItemCost() const noexcept
{
    return itemCost_;
}
void Inventory::setItemCost(const std::string &pItemCost) noexcept
{
    itemCost_ = std::make_shared<std::string>(pItemCost);
    dirtyFlag_[6] = true;
}
void Inventory::setItemCost(std::string &&pItemCost) noexcept
{
    itemCost_ = std::make_shared<std::string>(std::move(pItemCost));
    dirtyFlag_[6] = true;
}
void Inventory::setItemCostToNull() noexcept
{
    itemCost_.reset();
    dirtyFlag_[6] = true;
}

const int32_t &Inventory::getValueOfMinStock() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(minStock_)
        return *minStock_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Inventory::getMinStock() const noexcept
{
    return minStock_;
}
void Inventory::setMinStock(const int32_t &pMinStock) noexcept
{
    minStock_ = std::make_shared<int32_t>(pMinStock);
    dirtyFlag_[7] = true;
}
void Inventory::setMinStockToNull() noexcept
{
    minStock_.reset();
    dirtyFlag_[7] = true;
}

const int32_t &Inventory::getValueOfMaxStock() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(maxStock_)
        return *maxStock_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Inventory::getMaxStock() const noexcept
{
    return maxStock_;
}
void Inventory::setMaxStock(const int32_t &pMaxStock) noexcept
{
    maxStock_ = std::make_shared<int32_t>(pMaxStock);
    dirtyFlag_[8] = true;
}
void Inventory::setMaxStockToNull() noexcept
{
    maxStock_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Inventory::getValueOfSupplier() const noexcept
{
    static const std::string defaultValue = std::string();
    if(supplier_)
        return *supplier_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Inventory::getSupplier() const noexcept
{
    return supplier_;
}
void Inventory::setSupplier(const std::string &pSupplier) noexcept
{
    supplier_ = std::make_shared<std::string>(pSupplier);
    dirtyFlag_[9] = true;
}
void Inventory::setSupplier(std::string &&pSupplier) noexcept
{
    supplier_ = std::make_shared<std::string>(std::move(pSupplier));
    dirtyFlag_[9] = true;
}
void Inventory::setSupplierToNull() noexcept
{
    supplier_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Inventory::getValueOfStatus() const noexcept
{
    static const std::string defaultValue = std::string();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Inventory::getStatus() const noexcept
{
    return status_;
}
void Inventory::setStatus(const std::string &pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[10] = true;
}
void Inventory::setStatus(std::string &&pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus));
    dirtyFlag_[10] = true;
}
void Inventory::setStatusToNull() noexcept
{
    status_.reset();
    dirtyFlag_[10] = true;
}

const std::string &Inventory::getValueOfLocation() const noexcept
{
    static const std::string defaultValue = std::string();
    if(location_)
        return *location_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Inventory::getLocation() const noexcept
{
    return location_;
}
void Inventory::setLocation(const std::string &pLocation) noexcept
{
    location_ = std::make_shared<std::string>(pLocation);
    dirtyFlag_[11] = true;
}
void Inventory::setLocation(std::string &&pLocation) noexcept
{
    location_ = std::make_shared<std::string>(std::move(pLocation));
    dirtyFlag_[11] = true;
}
void Inventory::setLocationToNull() noexcept
{
    location_.reset();
    dirtyFlag_[11] = true;
}

const ::trantor::Date &Inventory::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Inventory::getCreatedAt() const noexcept
{
    return createdAt_;
}
void Inventory::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[12] = true;
}
void Inventory::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[12] = true;
}

const ::trantor::Date &Inventory::getValueOfUpdatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedAt_)
        return *updatedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Inventory::getUpdatedAt() const noexcept
{
    return updatedAt_;
}
void Inventory::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    updatedAt_ = std::make_shared<::trantor::Date>(pUpdatedAt);
    dirtyFlag_[13] = true;
}
void Inventory::setUpdatedAtToNull() noexcept
{
    updatedAt_.reset();
    dirtyFlag_[13] = true;
}

const int8_t &Inventory::getValueOfIsDeleted() const noexcept
{
    static const int8_t defaultValue = int8_t();
    if(isDeleted_)
        return *isDeleted_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Inventory::getIsDeleted() const noexcept
{
    return isDeleted_;
}
void Inventory::setIsDeleted(const int8_t &pIsDeleted) noexcept
{
    isDeleted_ = std::make_shared<int8_t>(pIsDeleted);
    dirtyFlag_[14] = true;
}
void Inventory::setIsDeletedToNull() noexcept
{
    isDeleted_.reset();
    dirtyFlag_[14] = true;
}

void Inventory::updateId(const uint64_t id)
{
    inventoryId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &Inventory::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "dish_id",
        "tenant_id",
        "quantity",
        "item_name",
        "item_category",
        "item_cost",
        "min_stock",
        "max_stock",
        "supplier",
        "status",
        "location",
        "created_at",
        "updated_at",
        "is_deleted"
    };
    return inCols;
}

void Inventory::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getDishId())
        {
            binder << getValueOfDishId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getQuantity())
        {
            binder << getValueOfQuantity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getItemName())
        {
            binder << getValueOfItemName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getItemCategory())
        {
            binder << getValueOfItemCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getItemCost())
        {
            binder << getValueOfItemCost();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getMinStock())
        {
            binder << getValueOfMinStock();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getMaxStock())
        {
            binder << getValueOfMaxStock();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getSupplier())
        {
            binder << getValueOfSupplier();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getLocation())
        {
            binder << getValueOfLocation();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getIsDeleted())
        {
            binder << getValueOfIsDeleted();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Inventory::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    return ret;
}

void Inventory::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getDishId())
        {
            binder << getValueOfDishId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getQuantity())
        {
            binder << getValueOfQuantity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getItemName())
        {
            binder << getValueOfItemName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getItemCategory())
        {
            binder << getValueOfItemCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getItemCost())
        {
            binder << getValueOfItemCost();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getMinStock())
        {
            binder << getValueOfMinStock();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getMaxStock())
        {
            binder << getValueOfMaxStock();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getSupplier())
        {
            binder << getValueOfSupplier();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getLocation())
        {
            binder << getValueOfLocation();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getIsDeleted())
        {
            binder << getValueOfIsDeleted();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Inventory::toJson() const
{
    Json::Value ret;
    if(getInventoryId())
    {
        ret["inventory_id"]=getValueOfInventoryId();
    }
    else
    {
        ret["inventory_id"]=Json::Value();
    }
    if(getDishId())
    {
        ret["dish_id"]=getValueOfDishId();
    }
    else
    {
        ret["dish_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getQuantity())
    {
        ret["quantity"]=getValueOfQuantity();
    }
    else
    {
        ret["quantity"]=Json::Value();
    }
    if(getItemName())
    {
        ret["item_name"]=getValueOfItemName();
    }
    else
    {
        ret["item_name"]=Json::Value();
    }
    if(getItemCategory())
    {
        ret["item_category"]=getValueOfItemCategory();
    }
    else
    {
        ret["item_category"]=Json::Value();
    }
    if(getItemCost())
    {
        ret["item_cost"]=getValueOfItemCost();
    }
    else
    {
        ret["item_cost"]=Json::Value();
    }
    if(getMinStock())
    {
        ret["min_stock"]=getValueOfMinStock();
    }
    else
    {
        ret["min_stock"]=Json::Value();
    }
    if(getMaxStock())
    {
        ret["max_stock"]=getValueOfMaxStock();
    }
    else
    {
        ret["max_stock"]=Json::Value();
    }
    if(getSupplier())
    {
        ret["supplier"]=getValueOfSupplier();
    }
    else
    {
        ret["supplier"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getLocation())
    {
        ret["location"]=getValueOfLocation();
    }
    else
    {
        ret["location"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getIsDeleted())
    {
        ret["is_deleted"]=getValueOfIsDeleted();
    }
    else
    {
        ret["is_deleted"]=Json::Value();
    }
    return ret;
}

Json::Value Inventory::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 15)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getInventoryId())
            {
                ret[pMasqueradingVector[0]]=getValueOfInventoryId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getDishId())
            {
                ret[pMasqueradingVector[1]]=getValueOfDishId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTenantId())
            {
                ret[pMasqueradingVector[2]]=getValueOfTenantId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getQuantity())
            {
                ret[pMasqueradingVector[3]]=getValueOfQuantity();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getItemName())
            {
                ret[pMasqueradingVector[4]]=getValueOfItemName();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getItemCategory())
            {
                ret[pMasqueradingVector[5]]=getValueOfItemCategory();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getItemCost())
            {
                ret[pMasqueradingVector[6]]=getValueOfItemCost();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getMinStock())
            {
                ret[pMasqueradingVector[7]]=getValueOfMinStock();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getMaxStock())
            {
                ret[pMasqueradingVector[8]]=getValueOfMaxStock();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getSupplier())
            {
                ret[pMasqueradingVector[9]]=getValueOfSupplier();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[10]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getLocation())
            {
                ret[pMasqueradingVector[11]]=getValueOfLocation();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[12]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getUpdatedAt())
            {
                ret[pMasqueradingVector[13]]=getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getIsDeleted())
            {
                ret[pMasqueradingVector[14]]=getValueOfIsDeleted();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getInventoryId())
    {
        ret["inventory_id"]=getValueOfInventoryId();
    }
    else
    {
        ret["inventory_id"]=Json::Value();
    }
    if(getDishId())
    {
        ret["dish_id"]=getValueOfDishId();
    }
    else
    {
        ret["dish_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getQuantity())
    {
        ret["quantity"]=getValueOfQuantity();
    }
    else
    {
        ret["quantity"]=Json::Value();
    }
    if(getItemName())
    {
        ret["item_name"]=getValueOfItemName();
    }
    else
    {
        ret["item_name"]=Json::Value();
    }
    if(getItemCategory())
    {
        ret["item_category"]=getValueOfItemCategory();
    }
    else
    {
        ret["item_category"]=Json::Value();
    }
    if(getItemCost())
    {
        ret["item_cost"]=getValueOfItemCost();
    }
    else
    {
        ret["item_cost"]=Json::Value();
    }
    if(getMinStock())
    {
        ret["min_stock"]=getValueOfMinStock();
    }
    else
    {
        ret["min_stock"]=Json::Value();
    }
    if(getMaxStock())
    {
        ret["max_stock"]=getValueOfMaxStock();
    }
    else
    {
        ret["max_stock"]=Json::Value();
    }
    if(getSupplier())
    {
        ret["supplier"]=getValueOfSupplier();
    }
    else
    {
        ret["supplier"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getLocation())
    {
        ret["location"]=getValueOfLocation();
    }
    else
    {
        ret["location"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getIsDeleted())
    {
        ret["is_deleted"]=getValueOfIsDeleted();
    }
    else
    {
        ret["is_deleted"]=Json::Value();
    }
    return ret;
}

bool Inventory::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("inventory_id"))
    {
        if(!validJsonOfField(0, "inventory_id", pJson["inventory_id"], err, true))
            return false;
    }
    if(pJson.isMember("dish_id"))
    {
        if(!validJsonOfField(1, "dish_id", pJson["dish_id"], err, true))
            return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(2, "tenant_id", pJson["tenant_id"], err, true))
            return false;
    }
    if(pJson.isMember("quantity"))
    {
        if(!validJsonOfField(3, "quantity", pJson["quantity"], err, true))
            return false;
    }
    if(pJson.isMember("item_name"))
    {
        if(!validJsonOfField(4, "item_name", pJson["item_name"], err, true))
            return false;
    }
    if(pJson.isMember("item_category"))
    {
        if(!validJsonOfField(5, "item_category", pJson["item_category"], err, true))
            return false;
    }
    if(pJson.isMember("item_cost"))
    {
        if(!validJsonOfField(6, "item_cost", pJson["item_cost"], err, true))
            return false;
    }
    if(pJson.isMember("min_stock"))
    {
        if(!validJsonOfField(7, "min_stock", pJson["min_stock"], err, true))
            return false;
    }
    if(pJson.isMember("max_stock"))
    {
        if(!validJsonOfField(8, "max_stock", pJson["max_stock"], err, true))
            return false;
    }
    if(pJson.isMember("supplier"))
    {
        if(!validJsonOfField(9, "supplier", pJson["supplier"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(10, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("location"))
    {
        if(!validJsonOfField(11, "location", pJson["location"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(12, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(13, "updated_at", pJson["updated_at"], err, true))
            return false;
    }
    if(pJson.isMember("is_deleted"))
    {
        if(!validJsonOfField(14, "is_deleted", pJson["is_deleted"], err, true))
            return false;
    }
    return true;
}
bool Inventory::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 15)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Inventory::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("inventory_id"))
    {
        if(!validJsonOfField(0, "inventory_id", pJson["inventory_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("dish_id"))
    {
        if(!validJsonOfField(1, "dish_id", pJson["dish_id"], err, false))
            return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(2, "tenant_id", pJson["tenant_id"], err, false))
            return false;
    }
    if(pJson.isMember("quantity"))
    {
        if(!validJsonOfField(3, "quantity", pJson["quantity"], err, false))
            return false;
    }
    if(pJson.isMember("item_name"))
    {
        if(!validJsonOfField(4, "item_name", pJson["item_name"], err, false))
            return false;
    }
    if(pJson.isMember("item_category"))
    {
        if(!validJsonOfField(5, "item_category", pJson["item_category"], err, false))
            return false;
    }
    if(pJson.isMember("item_cost"))
    {
        if(!validJsonOfField(6, "item_cost", pJson["item_cost"], err, false))
            return false;
    }
    if(pJson.isMember("min_stock"))
    {
        if(!validJsonOfField(7, "min_stock", pJson["min_stock"], err, false))
            return false;
    }
    if(pJson.isMember("max_stock"))
    {
        if(!validJsonOfField(8, "max_stock", pJson["max_stock"], err, false))
            return false;
    }
    if(pJson.isMember("supplier"))
    {
        if(!validJsonOfField(9, "supplier", pJson["supplier"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(10, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("location"))
    {
        if(!validJsonOfField(11, "location", pJson["location"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(12, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(13, "updated_at", pJson["updated_at"], err, false))
            return false;
    }
    if(pJson.isMember("is_deleted"))
    {
        if(!validJsonOfField(14, "is_deleted", pJson["is_deleted"], err, false))
            return false;
    }
    return true;
}
bool Inventory::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 15)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Inventory::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson,
                                 std::string &err,
                                 bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Tenant Inventory::getTenant(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from tenant where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Tenant(r[0]);
}

void Inventory::getTenant(const DbClientPtr &clientPtr,
                          const std::function<void(Tenant)> &rcb,
                          const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from tenant where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Tenant(r[0]));
                    }
               }
               >> ecb;
}
Dish Inventory::getDish(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from dish where dish_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *dishId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Dish(r[0]);
}

void Inventory::getDish(const DbClientPtr &clientPtr,
                        const std::function<void(Dish)> &rcb,
                        const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from dish where dish_id = ?";
    *clientPtr << sql
               << *dishId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Dish(r[0]));
                    }
               }
               >> ecb;
}
std::vector<InventoryRecord> Inventory::getInventory_records(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from inventory_record where item_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *inventoryId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<InventoryRecord> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(InventoryRecord(row));
    }
    return ret;
}

void Inventory::getInventory_records(const DbClientPtr &clientPtr,
                                     const std::function<void(std::vector<InventoryRecord>)> &rcb,
                                     const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from inventory_record where item_id = ?";
    *clientPtr << sql
               << *inventoryId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<InventoryRecord> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(InventoryRecord(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
