/**
 *
 *  MarketingCampaign.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace saas_restaurant
{
class MemberLevel;
class Tenant;
class User;

class MarketingCampaign
{
  public:
    struct Cols
    {
        static const std::string _campaign_id;
        static const std::string _tenant_id;
        static const std::string _campaign_name;
        static const std::string _status;
        static const std::string _level_id;
        static const std::string _campaign_content;
        static const std::string _campaign_start;
        static const std::string _campaign_end;
        static const std::string _created_by;
        static const std::string _created_at;
        static const std::string _updated_at;
        static const std::string _is_deleted;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = uint32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit MarketingCampaign(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit MarketingCampaign(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    MarketingCampaign(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    MarketingCampaign() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column campaign_id  */
    ///Get the value of the column campaign_id, returns the default value if the column is null
    const uint32_t &getValueOfCampaignId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getCampaignId() const noexcept;
    ///Set the value of the column campaign_id
    void setCampaignId(const uint32_t &pCampaignId) noexcept;

    /**  For column tenant_id  */
    ///Get the value of the column tenant_id, returns the default value if the column is null
    const uint32_t &getValueOfTenantId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getTenantId() const noexcept;
    ///Set the value of the column tenant_id
    void setTenantId(const uint32_t &pTenantId) noexcept;
    void setTenantIdToNull() noexcept;

    /**  For column campaign_name  */
    ///Get the value of the column campaign_name, returns the default value if the column is null
    const std::string &getValueOfCampaignName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCampaignName() const noexcept;
    ///Set the value of the column campaign_name
    void setCampaignName(const std::string &pCampaignName) noexcept;
    void setCampaignName(std::string &&pCampaignName) noexcept;
    void setCampaignNameToNull() noexcept;

    /**  For column status  */
    ///Get the value of the column status, returns the default value if the column is null
    const std::string &getValueOfStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStatus() const noexcept;
    ///Set the value of the column status
    void setStatus(const std::string &pStatus) noexcept;
    void setStatus(std::string &&pStatus) noexcept;
    void setStatusToNull() noexcept;

    /**  For column level_id  */
    ///Get the value of the column level_id, returns the default value if the column is null
    const uint32_t &getValueOfLevelId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getLevelId() const noexcept;
    ///Set the value of the column level_id
    void setLevelId(const uint32_t &pLevelId) noexcept;
    void setLevelIdToNull() noexcept;

    /**  For column campaign_content  */
    ///Get the value of the column campaign_content, returns the default value if the column is null
    const std::string &getValueOfCampaignContent() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCampaignContent() const noexcept;
    ///Set the value of the column campaign_content
    void setCampaignContent(const std::string &pCampaignContent) noexcept;
    void setCampaignContent(std::string &&pCampaignContent) noexcept;
    void setCampaignContentToNull() noexcept;

    /**  For column campaign_start  */
    ///Get the value of the column campaign_start, returns the default value if the column is null
    const ::trantor::Date &getValueOfCampaignStart() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCampaignStart() const noexcept;
    ///Set the value of the column campaign_start
    void setCampaignStart(const ::trantor::Date &pCampaignStart) noexcept;
    void setCampaignStartToNull() noexcept;

    /**  For column campaign_end  */
    ///Get the value of the column campaign_end, returns the default value if the column is null
    const ::trantor::Date &getValueOfCampaignEnd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCampaignEnd() const noexcept;
    ///Set the value of the column campaign_end
    void setCampaignEnd(const ::trantor::Date &pCampaignEnd) noexcept;
    void setCampaignEndToNull() noexcept;

    /**  For column created_by  */
    ///Get the value of the column created_by, returns the default value if the column is null
    const uint32_t &getValueOfCreatedBy() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getCreatedBy() const noexcept;
    ///Set the value of the column created_by
    void setCreatedBy(const uint32_t &pCreatedBy) noexcept;
    void setCreatedByToNull() noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;
    void setCreatedAtToNull() noexcept;

    /**  For column updated_at  */
    ///Get the value of the column updated_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedAt() const noexcept;
    ///Set the value of the column updated_at
    void setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept;
    void setUpdatedAtToNull() noexcept;

    /**  For column is_deleted  */
    ///Get the value of the column is_deleted, returns the default value if the column is null
    const int8_t &getValueOfIsDeleted() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsDeleted() const noexcept;
    ///Set the value of the column is_deleted
    void setIsDeleted(const int8_t &pIsDeleted) noexcept;
    void setIsDeletedToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 12;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
    Tenant getTenant(const drogon::orm::DbClientPtr &clientPtr) const;
    void getTenant(const drogon::orm::DbClientPtr &clientPtr,
                   const std::function<void(Tenant)> &rcb,
                   const drogon::orm::ExceptionCallback &ecb) const;
    MemberLevel getMemberLevel(const drogon::orm::DbClientPtr &clientPtr) const;
    void getMemberLevel(const drogon::orm::DbClientPtr &clientPtr,
                        const std::function<void(MemberLevel)> &rcb,
                        const drogon::orm::ExceptionCallback &ecb) const;
    User getUser(const drogon::orm::DbClientPtr &clientPtr) const;
    void getUser(const drogon::orm::DbClientPtr &clientPtr,
                 const std::function<void(User)> &rcb,
                 const drogon::orm::ExceptionCallback &ecb) const;
  private:
    friend drogon::orm::Mapper<MarketingCampaign>;
    friend drogon::orm::BaseBuilder<MarketingCampaign, true, true>;
    friend drogon::orm::BaseBuilder<MarketingCampaign, true, false>;
    friend drogon::orm::BaseBuilder<MarketingCampaign, false, true>;
    friend drogon::orm::BaseBuilder<MarketingCampaign, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<MarketingCampaign>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint32_t> campaignId_;
    std::shared_ptr<uint32_t> tenantId_;
    std::shared_ptr<std::string> campaignName_;
    std::shared_ptr<std::string> status_;
    std::shared_ptr<uint32_t> levelId_;
    std::shared_ptr<std::string> campaignContent_;
    std::shared_ptr<::trantor::Date> campaignStart_;
    std::shared_ptr<::trantor::Date> campaignEnd_;
    std::shared_ptr<uint32_t> createdBy_;
    std::shared_ptr<::trantor::Date> createdAt_;
    std::shared_ptr<::trantor::Date> updatedAt_;
    std::shared_ptr<int8_t> isDeleted_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[12]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where campaign_id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where campaign_id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "campaign_id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "tenant_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "campaign_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "status,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "level_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "campaign_content,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "campaign_start,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "campaign_end,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "created_by,";
            ++parametersCount;
        }
        sql += "created_at,";
        ++parametersCount;
        if(!dirtyFlag_[9])
        {
            needSelection=true;
        }
        sql += "updated_at,";
        ++parametersCount;
        if(!dirtyFlag_[10])
        {
            needSelection=true;
        }
        if(dirtyFlag_[11])
        {
            sql += "is_deleted,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace saas_restaurant
} // namespace drogon_model
