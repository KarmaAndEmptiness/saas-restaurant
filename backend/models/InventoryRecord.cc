/**
 *
 *  InventoryRecord.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "InventoryRecord.h"
#include "Inventory.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::saas_restaurant;

const std::string InventoryRecord::Cols::_record_id = "record_id";
const std::string InventoryRecord::Cols::_created_at = "created_at";
const std::string InventoryRecord::Cols::_record_type = "record_type";
const std::string InventoryRecord::Cols::_quantity = "quantity";
const std::string InventoryRecord::Cols::_item_id = "item_id";
const std::string InventoryRecord::Cols::_operator_id = "operator_id";
const std::string InventoryRecord::Cols::_tenant_id = "tenant_id";
const std::string InventoryRecord::Cols::_remark = "remark";
const std::string InventoryRecord::primaryKeyName = "record_id";
const bool InventoryRecord::hasPrimaryKey = true;
const std::string InventoryRecord::tableName = "inventory_record";

const std::vector<typename InventoryRecord::MetaData> InventoryRecord::metaData_={
{"record_id","uint32_t","int(10) unsigned",4,1,1,1},
{"created_at","::trantor::Date","timestamp",0,0,0,0},
{"record_type","std::string","varchar(50)",50,0,0,0},
{"quantity","std::string","varchar(255)",255,0,0,0},
{"item_id","uint32_t","int(10) unsigned",4,0,0,0},
{"operator_id","uint32_t","int(10) unsigned",4,0,0,0},
{"tenant_id","uint32_t","int(10) unsigned",4,0,0,0},
{"remark","std::string","text",0,0,0,0}
};
const std::string &InventoryRecord::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
InventoryRecord::InventoryRecord(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["record_id"].isNull())
        {
            recordId_=std::make_shared<uint32_t>(r["record_id"].as<uint32_t>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["record_type"].isNull())
        {
            recordType_=std::make_shared<std::string>(r["record_type"].as<std::string>());
        }
        if(!r["quantity"].isNull())
        {
            quantity_=std::make_shared<std::string>(r["quantity"].as<std::string>());
        }
        if(!r["item_id"].isNull())
        {
            itemId_=std::make_shared<uint32_t>(r["item_id"].as<uint32_t>());
        }
        if(!r["operator_id"].isNull())
        {
            operatorId_=std::make_shared<uint32_t>(r["operator_id"].as<uint32_t>());
        }
        if(!r["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r["tenant_id"].as<uint32_t>());
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            recordId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            recordType_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            quantity_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            itemId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            operatorId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

InventoryRecord::InventoryRecord(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            recordId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            recordType_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            quantity_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            itemId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            operatorId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
}

InventoryRecord::InventoryRecord(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("record_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["record_id"].isNull())
        {
            recordId_=std::make_shared<uint32_t>((uint32_t)pJson["record_id"].asUInt64());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("record_type"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["record_type"].isNull())
        {
            recordType_=std::make_shared<std::string>(pJson["record_type"].asString());
        }
    }
    if(pJson.isMember("quantity"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["quantity"].isNull())
        {
            quantity_=std::make_shared<std::string>(pJson["quantity"].asString());
        }
    }
    if(pJson.isMember("item_id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["item_id"].isNull())
        {
            itemId_=std::make_shared<uint32_t>((uint32_t)pJson["item_id"].asUInt64());
        }
    }
    if(pJson.isMember("operator_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["operator_id"].isNull())
        {
            operatorId_=std::make_shared<uint32_t>((uint32_t)pJson["operator_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
}

void InventoryRecord::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            recordId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            recordType_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            quantity_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            itemId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            operatorId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
}

void InventoryRecord::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("record_id"))
    {
        if(!pJson["record_id"].isNull())
        {
            recordId_=std::make_shared<uint32_t>((uint32_t)pJson["record_id"].asUInt64());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("record_type"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["record_type"].isNull())
        {
            recordType_=std::make_shared<std::string>(pJson["record_type"].asString());
        }
    }
    if(pJson.isMember("quantity"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["quantity"].isNull())
        {
            quantity_=std::make_shared<std::string>(pJson["quantity"].asString());
        }
    }
    if(pJson.isMember("item_id"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["item_id"].isNull())
        {
            itemId_=std::make_shared<uint32_t>((uint32_t)pJson["item_id"].asUInt64());
        }
    }
    if(pJson.isMember("operator_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["operator_id"].isNull())
        {
            operatorId_=std::make_shared<uint32_t>((uint32_t)pJson["operator_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
}

const uint32_t &InventoryRecord::getValueOfRecordId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(recordId_)
        return *recordId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &InventoryRecord::getRecordId() const noexcept
{
    return recordId_;
}
void InventoryRecord::setRecordId(const uint32_t &pRecordId) noexcept
{
    recordId_ = std::make_shared<uint32_t>(pRecordId);
    dirtyFlag_[0] = true;
}
const typename InventoryRecord::PrimaryKeyType & InventoryRecord::getPrimaryKey() const
{
    assert(recordId_);
    return *recordId_;
}

const ::trantor::Date &InventoryRecord::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &InventoryRecord::getCreatedAt() const noexcept
{
    return createdAt_;
}
void InventoryRecord::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[1] = true;
}
void InventoryRecord::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[1] = true;
}

const std::string &InventoryRecord::getValueOfRecordType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(recordType_)
        return *recordType_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InventoryRecord::getRecordType() const noexcept
{
    return recordType_;
}
void InventoryRecord::setRecordType(const std::string &pRecordType) noexcept
{
    recordType_ = std::make_shared<std::string>(pRecordType);
    dirtyFlag_[2] = true;
}
void InventoryRecord::setRecordType(std::string &&pRecordType) noexcept
{
    recordType_ = std::make_shared<std::string>(std::move(pRecordType));
    dirtyFlag_[2] = true;
}
void InventoryRecord::setRecordTypeToNull() noexcept
{
    recordType_.reset();
    dirtyFlag_[2] = true;
}

const std::string &InventoryRecord::getValueOfQuantity() const noexcept
{
    static const std::string defaultValue = std::string();
    if(quantity_)
        return *quantity_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InventoryRecord::getQuantity() const noexcept
{
    return quantity_;
}
void InventoryRecord::setQuantity(const std::string &pQuantity) noexcept
{
    quantity_ = std::make_shared<std::string>(pQuantity);
    dirtyFlag_[3] = true;
}
void InventoryRecord::setQuantity(std::string &&pQuantity) noexcept
{
    quantity_ = std::make_shared<std::string>(std::move(pQuantity));
    dirtyFlag_[3] = true;
}
void InventoryRecord::setQuantityToNull() noexcept
{
    quantity_.reset();
    dirtyFlag_[3] = true;
}

const uint32_t &InventoryRecord::getValueOfItemId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(itemId_)
        return *itemId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &InventoryRecord::getItemId() const noexcept
{
    return itemId_;
}
void InventoryRecord::setItemId(const uint32_t &pItemId) noexcept
{
    itemId_ = std::make_shared<uint32_t>(pItemId);
    dirtyFlag_[4] = true;
}
void InventoryRecord::setItemIdToNull() noexcept
{
    itemId_.reset();
    dirtyFlag_[4] = true;
}

const uint32_t &InventoryRecord::getValueOfOperatorId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(operatorId_)
        return *operatorId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &InventoryRecord::getOperatorId() const noexcept
{
    return operatorId_;
}
void InventoryRecord::setOperatorId(const uint32_t &pOperatorId) noexcept
{
    operatorId_ = std::make_shared<uint32_t>(pOperatorId);
    dirtyFlag_[5] = true;
}
void InventoryRecord::setOperatorIdToNull() noexcept
{
    operatorId_.reset();
    dirtyFlag_[5] = true;
}

const uint32_t &InventoryRecord::getValueOfTenantId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(tenantId_)
        return *tenantId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &InventoryRecord::getTenantId() const noexcept
{
    return tenantId_;
}
void InventoryRecord::setTenantId(const uint32_t &pTenantId) noexcept
{
    tenantId_ = std::make_shared<uint32_t>(pTenantId);
    dirtyFlag_[6] = true;
}
void InventoryRecord::setTenantIdToNull() noexcept
{
    tenantId_.reset();
    dirtyFlag_[6] = true;
}

const std::string &InventoryRecord::getValueOfRemark() const noexcept
{
    static const std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &InventoryRecord::getRemark() const noexcept
{
    return remark_;
}
void InventoryRecord::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[7] = true;
}
void InventoryRecord::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[7] = true;
}
void InventoryRecord::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[7] = true;
}

void InventoryRecord::updateId(const uint64_t id)
{
    recordId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &InventoryRecord::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "created_at",
        "record_type",
        "quantity",
        "item_id",
        "operator_id",
        "tenant_id",
        "remark"
    };
    return inCols;
}

void InventoryRecord::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getRecordType())
        {
            binder << getValueOfRecordType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getQuantity())
        {
            binder << getValueOfQuantity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getItemId())
        {
            binder << getValueOfItemId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getOperatorId())
        {
            binder << getValueOfOperatorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> InventoryRecord::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void InventoryRecord::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getRecordType())
        {
            binder << getValueOfRecordType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getQuantity())
        {
            binder << getValueOfQuantity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getItemId())
        {
            binder << getValueOfItemId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getOperatorId())
        {
            binder << getValueOfOperatorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value InventoryRecord::toJson() const
{
    Json::Value ret;
    if(getRecordId())
    {
        ret["record_id"]=getValueOfRecordId();
    }
    else
    {
        ret["record_id"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getRecordType())
    {
        ret["record_type"]=getValueOfRecordType();
    }
    else
    {
        ret["record_type"]=Json::Value();
    }
    if(getQuantity())
    {
        ret["quantity"]=getValueOfQuantity();
    }
    else
    {
        ret["quantity"]=Json::Value();
    }
    if(getItemId())
    {
        ret["item_id"]=getValueOfItemId();
    }
    else
    {
        ret["item_id"]=Json::Value();
    }
    if(getOperatorId())
    {
        ret["operator_id"]=getValueOfOperatorId();
    }
    else
    {
        ret["operator_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    return ret;
}

Json::Value InventoryRecord::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getRecordId())
            {
                ret[pMasqueradingVector[0]]=getValueOfRecordId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[1]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getRecordType())
            {
                ret[pMasqueradingVector[2]]=getValueOfRecordType();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getQuantity())
            {
                ret[pMasqueradingVector[3]]=getValueOfQuantity();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getItemId())
            {
                ret[pMasqueradingVector[4]]=getValueOfItemId();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getOperatorId())
            {
                ret[pMasqueradingVector[5]]=getValueOfOperatorId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getTenantId())
            {
                ret[pMasqueradingVector[6]]=getValueOfTenantId();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[7]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getRecordId())
    {
        ret["record_id"]=getValueOfRecordId();
    }
    else
    {
        ret["record_id"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getRecordType())
    {
        ret["record_type"]=getValueOfRecordType();
    }
    else
    {
        ret["record_type"]=Json::Value();
    }
    if(getQuantity())
    {
        ret["quantity"]=getValueOfQuantity();
    }
    else
    {
        ret["quantity"]=Json::Value();
    }
    if(getItemId())
    {
        ret["item_id"]=getValueOfItemId();
    }
    else
    {
        ret["item_id"]=Json::Value();
    }
    if(getOperatorId())
    {
        ret["operator_id"]=getValueOfOperatorId();
    }
    else
    {
        ret["operator_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    return ret;
}

bool InventoryRecord::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("record_id"))
    {
        if(!validJsonOfField(0, "record_id", pJson["record_id"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(1, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("record_type"))
    {
        if(!validJsonOfField(2, "record_type", pJson["record_type"], err, true))
            return false;
    }
    if(pJson.isMember("quantity"))
    {
        if(!validJsonOfField(3, "quantity", pJson["quantity"], err, true))
            return false;
    }
    if(pJson.isMember("item_id"))
    {
        if(!validJsonOfField(4, "item_id", pJson["item_id"], err, true))
            return false;
    }
    if(pJson.isMember("operator_id"))
    {
        if(!validJsonOfField(5, "operator_id", pJson["operator_id"], err, true))
            return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(6, "tenant_id", pJson["tenant_id"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(7, "remark", pJson["remark"], err, true))
            return false;
    }
    return true;
}
bool InventoryRecord::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool InventoryRecord::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("record_id"))
    {
        if(!validJsonOfField(0, "record_id", pJson["record_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(1, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("record_type"))
    {
        if(!validJsonOfField(2, "record_type", pJson["record_type"], err, false))
            return false;
    }
    if(pJson.isMember("quantity"))
    {
        if(!validJsonOfField(3, "quantity", pJson["quantity"], err, false))
            return false;
    }
    if(pJson.isMember("item_id"))
    {
        if(!validJsonOfField(4, "item_id", pJson["item_id"], err, false))
            return false;
    }
    if(pJson.isMember("operator_id"))
    {
        if(!validJsonOfField(5, "operator_id", pJson["operator_id"], err, false))
            return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(6, "tenant_id", pJson["tenant_id"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(7, "remark", pJson["remark"], err, false))
            return false;
    }
    return true;
}
bool InventoryRecord::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool InventoryRecord::validJsonOfField(size_t index,
                                       const std::string &fieldName,
                                       const Json::Value &pJson,
                                       std::string &err,
                                       bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Inventory InventoryRecord::getInventory(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from inventory where inventory_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *itemId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Inventory(r[0]);
}

void InventoryRecord::getInventory(const DbClientPtr &clientPtr,
                                   const std::function<void(Inventory)> &rcb,
                                   const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from inventory where inventory_id = ?";
    *clientPtr << sql
               << *itemId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Inventory(r[0]));
                    }
               }
               >> ecb;
}
