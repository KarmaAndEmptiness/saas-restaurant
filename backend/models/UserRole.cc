/**
 *
 *  UserRole.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "UserRole.h"
#include "Tenant.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::saas_restaurant;

const std::string UserRole::Cols::_user_role_id = "user_role_id";
const std::string UserRole::Cols::_tenant_id = "tenant_id";
const std::string UserRole::Cols::_user_id = "user_id";
const std::string UserRole::Cols::_role_id = "role_id";
const std::string UserRole::Cols::_created_at = "created_at";
const std::string UserRole::Cols::_updated_at = "updated_at";
const std::string UserRole::Cols::_is_deleted = "is_deleted";
const std::string UserRole::primaryKeyName = "user_role_id";
const bool UserRole::hasPrimaryKey = true;
const std::string UserRole::tableName = "user_role";

const std::vector<typename UserRole::MetaData> UserRole::metaData_={
{"user_role_id","uint32_t","int(10) unsigned",4,1,1,1},
{"tenant_id","uint32_t","int(10) unsigned",4,0,0,0},
{"user_id","uint32_t","int(10) unsigned",4,0,0,0},
{"role_id","uint32_t","int(10) unsigned",4,0,0,0},
{"created_at","::trantor::Date","timestamp",0,0,0,0},
{"updated_at","::trantor::Date","timestamp",0,0,0,0},
{"is_deleted","int8_t","tinyint(1)",1,0,0,0}
};
const std::string &UserRole::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
UserRole::UserRole(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["user_role_id"].isNull())
        {
            userRoleId_=std::make_shared<uint32_t>(r["user_role_id"].as<uint32_t>());
        }
        if(!r["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r["tenant_id"].as<uint32_t>());
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<uint32_t>(r["user_id"].as<uint32_t>());
        }
        if(!r["role_id"].isNull())
        {
            roleId_=std::make_shared<uint32_t>(r["role_id"].as<uint32_t>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>(r["is_deleted"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            userRoleId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            roleId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            isDeleted_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

UserRole::UserRole(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userRoleId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            roleId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
}

UserRole::UserRole(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_role_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["user_role_id"].isNull())
        {
            userRoleId_=std::make_shared<uint32_t>((uint32_t)pJson["user_role_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson["user_id"].asUInt64());
        }
    }
    if(pJson.isMember("role_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["role_id"].isNull())
        {
            roleId_=std::make_shared<uint32_t>((uint32_t)pJson["role_id"].asUInt64());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("is_deleted"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson["is_deleted"].asInt64());
        }
    }
}

void UserRole::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userRoleId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            roleId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
}

void UserRole::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_role_id"))
    {
        if(!pJson["user_role_id"].isNull())
        {
            userRoleId_=std::make_shared<uint32_t>((uint32_t)pJson["user_role_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<uint32_t>((uint32_t)pJson["user_id"].asUInt64());
        }
    }
    if(pJson.isMember("role_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["role_id"].isNull())
        {
            roleId_=std::make_shared<uint32_t>((uint32_t)pJson["role_id"].asUInt64());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("is_deleted"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson["is_deleted"].asInt64());
        }
    }
}

const uint32_t &UserRole::getValueOfUserRoleId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(userRoleId_)
        return *userRoleId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &UserRole::getUserRoleId() const noexcept
{
    return userRoleId_;
}
void UserRole::setUserRoleId(const uint32_t &pUserRoleId) noexcept
{
    userRoleId_ = std::make_shared<uint32_t>(pUserRoleId);
    dirtyFlag_[0] = true;
}
const typename UserRole::PrimaryKeyType & UserRole::getPrimaryKey() const
{
    assert(userRoleId_);
    return *userRoleId_;
}

const uint32_t &UserRole::getValueOfTenantId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(tenantId_)
        return *tenantId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &UserRole::getTenantId() const noexcept
{
    return tenantId_;
}
void UserRole::setTenantId(const uint32_t &pTenantId) noexcept
{
    tenantId_ = std::make_shared<uint32_t>(pTenantId);
    dirtyFlag_[1] = true;
}
void UserRole::setTenantIdToNull() noexcept
{
    tenantId_.reset();
    dirtyFlag_[1] = true;
}

const uint32_t &UserRole::getValueOfUserId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &UserRole::getUserId() const noexcept
{
    return userId_;
}
void UserRole::setUserId(const uint32_t &pUserId) noexcept
{
    userId_ = std::make_shared<uint32_t>(pUserId);
    dirtyFlag_[2] = true;
}
void UserRole::setUserIdToNull() noexcept
{
    userId_.reset();
    dirtyFlag_[2] = true;
}

const uint32_t &UserRole::getValueOfRoleId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(roleId_)
        return *roleId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &UserRole::getRoleId() const noexcept
{
    return roleId_;
}
void UserRole::setRoleId(const uint32_t &pRoleId) noexcept
{
    roleId_ = std::make_shared<uint32_t>(pRoleId);
    dirtyFlag_[3] = true;
}
void UserRole::setRoleIdToNull() noexcept
{
    roleId_.reset();
    dirtyFlag_[3] = true;
}

const ::trantor::Date &UserRole::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &UserRole::getCreatedAt() const noexcept
{
    return createdAt_;
}
void UserRole::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[4] = true;
}
void UserRole::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[4] = true;
}

const ::trantor::Date &UserRole::getValueOfUpdatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedAt_)
        return *updatedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &UserRole::getUpdatedAt() const noexcept
{
    return updatedAt_;
}
void UserRole::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    updatedAt_ = std::make_shared<::trantor::Date>(pUpdatedAt);
    dirtyFlag_[5] = true;
}
void UserRole::setUpdatedAtToNull() noexcept
{
    updatedAt_.reset();
    dirtyFlag_[5] = true;
}

const int8_t &UserRole::getValueOfIsDeleted() const noexcept
{
    static const int8_t defaultValue = int8_t();
    if(isDeleted_)
        return *isDeleted_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &UserRole::getIsDeleted() const noexcept
{
    return isDeleted_;
}
void UserRole::setIsDeleted(const int8_t &pIsDeleted) noexcept
{
    isDeleted_ = std::make_shared<int8_t>(pIsDeleted);
    dirtyFlag_[6] = true;
}
void UserRole::setIsDeletedToNull() noexcept
{
    isDeleted_.reset();
    dirtyFlag_[6] = true;
}

void UserRole::updateId(const uint64_t id)
{
    userRoleId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &UserRole::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "tenant_id",
        "user_id",
        "role_id",
        "created_at",
        "updated_at",
        "is_deleted"
    };
    return inCols;
}

void UserRole::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRoleId())
        {
            binder << getValueOfRoleId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getIsDeleted())
        {
            binder << getValueOfIsDeleted();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> UserRole::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void UserRole::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRoleId())
        {
            binder << getValueOfRoleId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getIsDeleted())
        {
            binder << getValueOfIsDeleted();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value UserRole::toJson() const
{
    Json::Value ret;
    if(getUserRoleId())
    {
        ret["user_role_id"]=getValueOfUserRoleId();
    }
    else
    {
        ret["user_role_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getRoleId())
    {
        ret["role_id"]=getValueOfRoleId();
    }
    else
    {
        ret["role_id"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getIsDeleted())
    {
        ret["is_deleted"]=getValueOfIsDeleted();
    }
    else
    {
        ret["is_deleted"]=Json::Value();
    }
    return ret;
}

Json::Value UserRole::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUserRoleId())
            {
                ret[pMasqueradingVector[0]]=getValueOfUserRoleId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTenantId())
            {
                ret[pMasqueradingVector[1]]=getValueOfTenantId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[2]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getRoleId())
            {
                ret[pMasqueradingVector[3]]=getValueOfRoleId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[4]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getUpdatedAt())
            {
                ret[pMasqueradingVector[5]]=getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getIsDeleted())
            {
                ret[pMasqueradingVector[6]]=getValueOfIsDeleted();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUserRoleId())
    {
        ret["user_role_id"]=getValueOfUserRoleId();
    }
    else
    {
        ret["user_role_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getRoleId())
    {
        ret["role_id"]=getValueOfRoleId();
    }
    else
    {
        ret["role_id"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getIsDeleted())
    {
        ret["is_deleted"]=getValueOfIsDeleted();
    }
    else
    {
        ret["is_deleted"]=Json::Value();
    }
    return ret;
}

bool UserRole::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_role_id"))
    {
        if(!validJsonOfField(0, "user_role_id", pJson["user_role_id"], err, true))
            return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(1, "tenant_id", pJson["tenant_id"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(2, "user_id", pJson["user_id"], err, true))
            return false;
    }
    if(pJson.isMember("role_id"))
    {
        if(!validJsonOfField(3, "role_id", pJson["role_id"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(4, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(5, "updated_at", pJson["updated_at"], err, true))
            return false;
    }
    if(pJson.isMember("is_deleted"))
    {
        if(!validJsonOfField(6, "is_deleted", pJson["is_deleted"], err, true))
            return false;
    }
    return true;
}
bool UserRole::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserRole::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_role_id"))
    {
        if(!validJsonOfField(0, "user_role_id", pJson["user_role_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(1, "tenant_id", pJson["tenant_id"], err, false))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(2, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("role_id"))
    {
        if(!validJsonOfField(3, "role_id", pJson["role_id"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(4, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(5, "updated_at", pJson["updated_at"], err, false))
            return false;
    }
    if(pJson.isMember("is_deleted"))
    {
        if(!validJsonOfField(6, "is_deleted", pJson["is_deleted"], err, false))
            return false;
    }
    return true;
}
bool UserRole::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserRole::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Tenant UserRole::getTenant(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from tenant where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Tenant(r[0]);
}

void UserRole::getTenant(const DbClientPtr &clientPtr,
                         const std::function<void(Tenant)> &rcb,
                         const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from tenant where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Tenant(r[0]));
                    }
               }
               >> ecb;
}
