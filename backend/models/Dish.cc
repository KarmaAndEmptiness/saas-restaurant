/**
 *
 *  Dish.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Dish.h"
#include "DishCategory.h"
#include "Inventory.h"
#include "Tenant.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::saas_restaurant;

const std::string Dish::Cols::_dish_id = "dish_id";
const std::string Dish::Cols::_tenant_id = "tenant_id";
const std::string Dish::Cols::_dish_category_id = "dish_category_id";
const std::string Dish::Cols::_dish_name = "dish_name";
const std::string Dish::Cols::_dish_price = "dish_price";
const std::string Dish::Cols::_cost_price = "cost_price";
const std::string Dish::Cols::_origin_price = "origin_price";
const std::string Dish::Cols::_description = "description";
const std::string Dish::Cols::_cover_img = "cover_img";
const std::string Dish::Cols::_status = "status";
const std::string Dish::Cols::_sort_order = "sort_order";
const std::string Dish::Cols::_is_deleted = "is_deleted";
const std::string Dish::primaryKeyName = "dish_id";
const bool Dish::hasPrimaryKey = true;
const std::string Dish::tableName = "dish";

const std::vector<typename Dish::MetaData> Dish::metaData_={
{"dish_id","uint32_t","int(10) unsigned",4,1,1,1},
{"tenant_id","uint32_t","int(10) unsigned",4,0,0,0},
{"dish_category_id","uint32_t","int(10) unsigned",4,0,0,0},
{"dish_name","std::string","varchar(255)",255,0,0,0},
{"dish_price","std::string","varchar(255)",255,0,0,0},
{"cost_price","std::string","varchar(255)",255,0,0,0},
{"origin_price","std::string","varchar(255)",255,0,0,0},
{"description","std::string","text",0,0,0,0},
{"cover_img","std::string","varchar(255)",255,0,0,0},
{"status","std::string","varchar(50)",50,0,0,0},
{"sort_order","int32_t","int(11)",4,0,0,0},
{"is_deleted","int8_t","tinyint(1)",1,0,0,0}
};
const std::string &Dish::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Dish::Dish(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["dish_id"].isNull())
        {
            dishId_=std::make_shared<uint32_t>(r["dish_id"].as<uint32_t>());
        }
        if(!r["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r["tenant_id"].as<uint32_t>());
        }
        if(!r["dish_category_id"].isNull())
        {
            dishCategoryId_=std::make_shared<uint32_t>(r["dish_category_id"].as<uint32_t>());
        }
        if(!r["dish_name"].isNull())
        {
            dishName_=std::make_shared<std::string>(r["dish_name"].as<std::string>());
        }
        if(!r["dish_price"].isNull())
        {
            dishPrice_=std::make_shared<std::string>(r["dish_price"].as<std::string>());
        }
        if(!r["cost_price"].isNull())
        {
            costPrice_=std::make_shared<std::string>(r["cost_price"].as<std::string>());
        }
        if(!r["origin_price"].isNull())
        {
            originPrice_=std::make_shared<std::string>(r["origin_price"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            description_=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["cover_img"].isNull())
        {
            coverImg_=std::make_shared<std::string>(r["cover_img"].as<std::string>());
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<std::string>(r["status"].as<std::string>());
        }
        if(!r["sort_order"].isNull())
        {
            sortOrder_=std::make_shared<int32_t>(r["sort_order"].as<int32_t>());
        }
        if(!r["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>(r["is_deleted"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 12 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            dishId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            tenantId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            dishCategoryId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            dishName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            dishPrice_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            costPrice_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            originPrice_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            description_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            coverImg_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            status_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            sortOrder_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            isDeleted_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

Dish::Dish(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            dishId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            dishCategoryId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            dishName_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            dishPrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            costPrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            originPrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            coverImg_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            sortOrder_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
}

Dish::Dish(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("dish_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["dish_id"].isNull())
        {
            dishId_=std::make_shared<uint32_t>((uint32_t)pJson["dish_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("dish_category_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["dish_category_id"].isNull())
        {
            dishCategoryId_=std::make_shared<uint32_t>((uint32_t)pJson["dish_category_id"].asUInt64());
        }
    }
    if(pJson.isMember("dish_name"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["dish_name"].isNull())
        {
            dishName_=std::make_shared<std::string>(pJson["dish_name"].asString());
        }
    }
    if(pJson.isMember("dish_price"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["dish_price"].isNull())
        {
            dishPrice_=std::make_shared<std::string>(pJson["dish_price"].asString());
        }
    }
    if(pJson.isMember("cost_price"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["cost_price"].isNull())
        {
            costPrice_=std::make_shared<std::string>(pJson["cost_price"].asString());
        }
    }
    if(pJson.isMember("origin_price"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["origin_price"].isNull())
        {
            originPrice_=std::make_shared<std::string>(pJson["origin_price"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("cover_img"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["cover_img"].isNull())
        {
            coverImg_=std::make_shared<std::string>(pJson["cover_img"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("sort_order"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["sort_order"].isNull())
        {
            sortOrder_=std::make_shared<int32_t>((int32_t)pJson["sort_order"].asInt64());
        }
    }
    if(pJson.isMember("is_deleted"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson["is_deleted"].asInt64());
        }
    }
}

void Dish::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            dishId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            dishCategoryId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            dishName_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            dishPrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            costPrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            originPrice_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            coverImg_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            sortOrder_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
}

void Dish::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("dish_id"))
    {
        if(!pJson["dish_id"].isNull())
        {
            dishId_=std::make_shared<uint32_t>((uint32_t)pJson["dish_id"].asUInt64());
        }
    }
    if(pJson.isMember("tenant_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["tenant_id"].isNull())
        {
            tenantId_=std::make_shared<uint32_t>((uint32_t)pJson["tenant_id"].asUInt64());
        }
    }
    if(pJson.isMember("dish_category_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["dish_category_id"].isNull())
        {
            dishCategoryId_=std::make_shared<uint32_t>((uint32_t)pJson["dish_category_id"].asUInt64());
        }
    }
    if(pJson.isMember("dish_name"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["dish_name"].isNull())
        {
            dishName_=std::make_shared<std::string>(pJson["dish_name"].asString());
        }
    }
    if(pJson.isMember("dish_price"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["dish_price"].isNull())
        {
            dishPrice_=std::make_shared<std::string>(pJson["dish_price"].asString());
        }
    }
    if(pJson.isMember("cost_price"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["cost_price"].isNull())
        {
            costPrice_=std::make_shared<std::string>(pJson["cost_price"].asString());
        }
    }
    if(pJson.isMember("origin_price"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["origin_price"].isNull())
        {
            originPrice_=std::make_shared<std::string>(pJson["origin_price"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("cover_img"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["cover_img"].isNull())
        {
            coverImg_=std::make_shared<std::string>(pJson["cover_img"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("sort_order"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["sort_order"].isNull())
        {
            sortOrder_=std::make_shared<int32_t>((int32_t)pJson["sort_order"].asInt64());
        }
    }
    if(pJson.isMember("is_deleted"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["is_deleted"].isNull())
        {
            isDeleted_=std::make_shared<int8_t>((int8_t)pJson["is_deleted"].asInt64());
        }
    }
}

const uint32_t &Dish::getValueOfDishId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(dishId_)
        return *dishId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Dish::getDishId() const noexcept
{
    return dishId_;
}
void Dish::setDishId(const uint32_t &pDishId) noexcept
{
    dishId_ = std::make_shared<uint32_t>(pDishId);
    dirtyFlag_[0] = true;
}
const typename Dish::PrimaryKeyType & Dish::getPrimaryKey() const
{
    assert(dishId_);
    return *dishId_;
}

const uint32_t &Dish::getValueOfTenantId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(tenantId_)
        return *tenantId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Dish::getTenantId() const noexcept
{
    return tenantId_;
}
void Dish::setTenantId(const uint32_t &pTenantId) noexcept
{
    tenantId_ = std::make_shared<uint32_t>(pTenantId);
    dirtyFlag_[1] = true;
}
void Dish::setTenantIdToNull() noexcept
{
    tenantId_.reset();
    dirtyFlag_[1] = true;
}

const uint32_t &Dish::getValueOfDishCategoryId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(dishCategoryId_)
        return *dishCategoryId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Dish::getDishCategoryId() const noexcept
{
    return dishCategoryId_;
}
void Dish::setDishCategoryId(const uint32_t &pDishCategoryId) noexcept
{
    dishCategoryId_ = std::make_shared<uint32_t>(pDishCategoryId);
    dirtyFlag_[2] = true;
}
void Dish::setDishCategoryIdToNull() noexcept
{
    dishCategoryId_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Dish::getValueOfDishName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(dishName_)
        return *dishName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Dish::getDishName() const noexcept
{
    return dishName_;
}
void Dish::setDishName(const std::string &pDishName) noexcept
{
    dishName_ = std::make_shared<std::string>(pDishName);
    dirtyFlag_[3] = true;
}
void Dish::setDishName(std::string &&pDishName) noexcept
{
    dishName_ = std::make_shared<std::string>(std::move(pDishName));
    dirtyFlag_[3] = true;
}
void Dish::setDishNameToNull() noexcept
{
    dishName_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Dish::getValueOfDishPrice() const noexcept
{
    static const std::string defaultValue = std::string();
    if(dishPrice_)
        return *dishPrice_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Dish::getDishPrice() const noexcept
{
    return dishPrice_;
}
void Dish::setDishPrice(const std::string &pDishPrice) noexcept
{
    dishPrice_ = std::make_shared<std::string>(pDishPrice);
    dirtyFlag_[4] = true;
}
void Dish::setDishPrice(std::string &&pDishPrice) noexcept
{
    dishPrice_ = std::make_shared<std::string>(std::move(pDishPrice));
    dirtyFlag_[4] = true;
}
void Dish::setDishPriceToNull() noexcept
{
    dishPrice_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Dish::getValueOfCostPrice() const noexcept
{
    static const std::string defaultValue = std::string();
    if(costPrice_)
        return *costPrice_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Dish::getCostPrice() const noexcept
{
    return costPrice_;
}
void Dish::setCostPrice(const std::string &pCostPrice) noexcept
{
    costPrice_ = std::make_shared<std::string>(pCostPrice);
    dirtyFlag_[5] = true;
}
void Dish::setCostPrice(std::string &&pCostPrice) noexcept
{
    costPrice_ = std::make_shared<std::string>(std::move(pCostPrice));
    dirtyFlag_[5] = true;
}
void Dish::setCostPriceToNull() noexcept
{
    costPrice_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Dish::getValueOfOriginPrice() const noexcept
{
    static const std::string defaultValue = std::string();
    if(originPrice_)
        return *originPrice_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Dish::getOriginPrice() const noexcept
{
    return originPrice_;
}
void Dish::setOriginPrice(const std::string &pOriginPrice) noexcept
{
    originPrice_ = std::make_shared<std::string>(pOriginPrice);
    dirtyFlag_[6] = true;
}
void Dish::setOriginPrice(std::string &&pOriginPrice) noexcept
{
    originPrice_ = std::make_shared<std::string>(std::move(pOriginPrice));
    dirtyFlag_[6] = true;
}
void Dish::setOriginPriceToNull() noexcept
{
    originPrice_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Dish::getValueOfDescription() const noexcept
{
    static const std::string defaultValue = std::string();
    if(description_)
        return *description_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Dish::getDescription() const noexcept
{
    return description_;
}
void Dish::setDescription(const std::string &pDescription) noexcept
{
    description_ = std::make_shared<std::string>(pDescription);
    dirtyFlag_[7] = true;
}
void Dish::setDescription(std::string &&pDescription) noexcept
{
    description_ = std::make_shared<std::string>(std::move(pDescription));
    dirtyFlag_[7] = true;
}
void Dish::setDescriptionToNull() noexcept
{
    description_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Dish::getValueOfCoverImg() const noexcept
{
    static const std::string defaultValue = std::string();
    if(coverImg_)
        return *coverImg_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Dish::getCoverImg() const noexcept
{
    return coverImg_;
}
void Dish::setCoverImg(const std::string &pCoverImg) noexcept
{
    coverImg_ = std::make_shared<std::string>(pCoverImg);
    dirtyFlag_[8] = true;
}
void Dish::setCoverImg(std::string &&pCoverImg) noexcept
{
    coverImg_ = std::make_shared<std::string>(std::move(pCoverImg));
    dirtyFlag_[8] = true;
}
void Dish::setCoverImgToNull() noexcept
{
    coverImg_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Dish::getValueOfStatus() const noexcept
{
    static const std::string defaultValue = std::string();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Dish::getStatus() const noexcept
{
    return status_;
}
void Dish::setStatus(const std::string &pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[9] = true;
}
void Dish::setStatus(std::string &&pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus));
    dirtyFlag_[9] = true;
}
void Dish::setStatusToNull() noexcept
{
    status_.reset();
    dirtyFlag_[9] = true;
}

const int32_t &Dish::getValueOfSortOrder() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(sortOrder_)
        return *sortOrder_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Dish::getSortOrder() const noexcept
{
    return sortOrder_;
}
void Dish::setSortOrder(const int32_t &pSortOrder) noexcept
{
    sortOrder_ = std::make_shared<int32_t>(pSortOrder);
    dirtyFlag_[10] = true;
}
void Dish::setSortOrderToNull() noexcept
{
    sortOrder_.reset();
    dirtyFlag_[10] = true;
}

const int8_t &Dish::getValueOfIsDeleted() const noexcept
{
    static const int8_t defaultValue = int8_t();
    if(isDeleted_)
        return *isDeleted_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Dish::getIsDeleted() const noexcept
{
    return isDeleted_;
}
void Dish::setIsDeleted(const int8_t &pIsDeleted) noexcept
{
    isDeleted_ = std::make_shared<int8_t>(pIsDeleted);
    dirtyFlag_[11] = true;
}
void Dish::setIsDeletedToNull() noexcept
{
    isDeleted_.reset();
    dirtyFlag_[11] = true;
}

void Dish::updateId(const uint64_t id)
{
    dishId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &Dish::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "tenant_id",
        "dish_category_id",
        "dish_name",
        "dish_price",
        "cost_price",
        "origin_price",
        "description",
        "cover_img",
        "status",
        "sort_order",
        "is_deleted"
    };
    return inCols;
}

void Dish::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDishCategoryId())
        {
            binder << getValueOfDishCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getDishName())
        {
            binder << getValueOfDishName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDishPrice())
        {
            binder << getValueOfDishPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCostPrice())
        {
            binder << getValueOfCostPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getOriginPrice())
        {
            binder << getValueOfOriginPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCoverImg())
        {
            binder << getValueOfCoverImg();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getSortOrder())
        {
            binder << getValueOfSortOrder();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIsDeleted())
        {
            binder << getValueOfIsDeleted();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Dish::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    return ret;
}

void Dish::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTenantId())
        {
            binder << getValueOfTenantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDishCategoryId())
        {
            binder << getValueOfDishCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getDishName())
        {
            binder << getValueOfDishName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDishPrice())
        {
            binder << getValueOfDishPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCostPrice())
        {
            binder << getValueOfCostPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getOriginPrice())
        {
            binder << getValueOfOriginPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCoverImg())
        {
            binder << getValueOfCoverImg();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getSortOrder())
        {
            binder << getValueOfSortOrder();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIsDeleted())
        {
            binder << getValueOfIsDeleted();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Dish::toJson() const
{
    Json::Value ret;
    if(getDishId())
    {
        ret["dish_id"]=getValueOfDishId();
    }
    else
    {
        ret["dish_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getDishCategoryId())
    {
        ret["dish_category_id"]=getValueOfDishCategoryId();
    }
    else
    {
        ret["dish_category_id"]=Json::Value();
    }
    if(getDishName())
    {
        ret["dish_name"]=getValueOfDishName();
    }
    else
    {
        ret["dish_name"]=Json::Value();
    }
    if(getDishPrice())
    {
        ret["dish_price"]=getValueOfDishPrice();
    }
    else
    {
        ret["dish_price"]=Json::Value();
    }
    if(getCostPrice())
    {
        ret["cost_price"]=getValueOfCostPrice();
    }
    else
    {
        ret["cost_price"]=Json::Value();
    }
    if(getOriginPrice())
    {
        ret["origin_price"]=getValueOfOriginPrice();
    }
    else
    {
        ret["origin_price"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getCoverImg())
    {
        ret["cover_img"]=getValueOfCoverImg();
    }
    else
    {
        ret["cover_img"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getSortOrder())
    {
        ret["sort_order"]=getValueOfSortOrder();
    }
    else
    {
        ret["sort_order"]=Json::Value();
    }
    if(getIsDeleted())
    {
        ret["is_deleted"]=getValueOfIsDeleted();
    }
    else
    {
        ret["is_deleted"]=Json::Value();
    }
    return ret;
}

Json::Value Dish::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 12)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getDishId())
            {
                ret[pMasqueradingVector[0]]=getValueOfDishId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTenantId())
            {
                ret[pMasqueradingVector[1]]=getValueOfTenantId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDishCategoryId())
            {
                ret[pMasqueradingVector[2]]=getValueOfDishCategoryId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getDishName())
            {
                ret[pMasqueradingVector[3]]=getValueOfDishName();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getDishPrice())
            {
                ret[pMasqueradingVector[4]]=getValueOfDishPrice();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCostPrice())
            {
                ret[pMasqueradingVector[5]]=getValueOfCostPrice();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getOriginPrice())
            {
                ret[pMasqueradingVector[6]]=getValueOfOriginPrice();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[7]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getCoverImg())
            {
                ret[pMasqueradingVector[8]]=getValueOfCoverImg();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[9]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getSortOrder())
            {
                ret[pMasqueradingVector[10]]=getValueOfSortOrder();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getIsDeleted())
            {
                ret[pMasqueradingVector[11]]=getValueOfIsDeleted();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getDishId())
    {
        ret["dish_id"]=getValueOfDishId();
    }
    else
    {
        ret["dish_id"]=Json::Value();
    }
    if(getTenantId())
    {
        ret["tenant_id"]=getValueOfTenantId();
    }
    else
    {
        ret["tenant_id"]=Json::Value();
    }
    if(getDishCategoryId())
    {
        ret["dish_category_id"]=getValueOfDishCategoryId();
    }
    else
    {
        ret["dish_category_id"]=Json::Value();
    }
    if(getDishName())
    {
        ret["dish_name"]=getValueOfDishName();
    }
    else
    {
        ret["dish_name"]=Json::Value();
    }
    if(getDishPrice())
    {
        ret["dish_price"]=getValueOfDishPrice();
    }
    else
    {
        ret["dish_price"]=Json::Value();
    }
    if(getCostPrice())
    {
        ret["cost_price"]=getValueOfCostPrice();
    }
    else
    {
        ret["cost_price"]=Json::Value();
    }
    if(getOriginPrice())
    {
        ret["origin_price"]=getValueOfOriginPrice();
    }
    else
    {
        ret["origin_price"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getCoverImg())
    {
        ret["cover_img"]=getValueOfCoverImg();
    }
    else
    {
        ret["cover_img"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getSortOrder())
    {
        ret["sort_order"]=getValueOfSortOrder();
    }
    else
    {
        ret["sort_order"]=Json::Value();
    }
    if(getIsDeleted())
    {
        ret["is_deleted"]=getValueOfIsDeleted();
    }
    else
    {
        ret["is_deleted"]=Json::Value();
    }
    return ret;
}

bool Dish::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("dish_id"))
    {
        if(!validJsonOfField(0, "dish_id", pJson["dish_id"], err, true))
            return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(1, "tenant_id", pJson["tenant_id"], err, true))
            return false;
    }
    if(pJson.isMember("dish_category_id"))
    {
        if(!validJsonOfField(2, "dish_category_id", pJson["dish_category_id"], err, true))
            return false;
    }
    if(pJson.isMember("dish_name"))
    {
        if(!validJsonOfField(3, "dish_name", pJson["dish_name"], err, true))
            return false;
    }
    if(pJson.isMember("dish_price"))
    {
        if(!validJsonOfField(4, "dish_price", pJson["dish_price"], err, true))
            return false;
    }
    if(pJson.isMember("cost_price"))
    {
        if(!validJsonOfField(5, "cost_price", pJson["cost_price"], err, true))
            return false;
    }
    if(pJson.isMember("origin_price"))
    {
        if(!validJsonOfField(6, "origin_price", pJson["origin_price"], err, true))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(7, "description", pJson["description"], err, true))
            return false;
    }
    if(pJson.isMember("cover_img"))
    {
        if(!validJsonOfField(8, "cover_img", pJson["cover_img"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(9, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("sort_order"))
    {
        if(!validJsonOfField(10, "sort_order", pJson["sort_order"], err, true))
            return false;
    }
    if(pJson.isMember("is_deleted"))
    {
        if(!validJsonOfField(11, "is_deleted", pJson["is_deleted"], err, true))
            return false;
    }
    return true;
}
bool Dish::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Dish::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("dish_id"))
    {
        if(!validJsonOfField(0, "dish_id", pJson["dish_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("tenant_id"))
    {
        if(!validJsonOfField(1, "tenant_id", pJson["tenant_id"], err, false))
            return false;
    }
    if(pJson.isMember("dish_category_id"))
    {
        if(!validJsonOfField(2, "dish_category_id", pJson["dish_category_id"], err, false))
            return false;
    }
    if(pJson.isMember("dish_name"))
    {
        if(!validJsonOfField(3, "dish_name", pJson["dish_name"], err, false))
            return false;
    }
    if(pJson.isMember("dish_price"))
    {
        if(!validJsonOfField(4, "dish_price", pJson["dish_price"], err, false))
            return false;
    }
    if(pJson.isMember("cost_price"))
    {
        if(!validJsonOfField(5, "cost_price", pJson["cost_price"], err, false))
            return false;
    }
    if(pJson.isMember("origin_price"))
    {
        if(!validJsonOfField(6, "origin_price", pJson["origin_price"], err, false))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(7, "description", pJson["description"], err, false))
            return false;
    }
    if(pJson.isMember("cover_img"))
    {
        if(!validJsonOfField(8, "cover_img", pJson["cover_img"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(9, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("sort_order"))
    {
        if(!validJsonOfField(10, "sort_order", pJson["sort_order"], err, false))
            return false;
    }
    if(pJson.isMember("is_deleted"))
    {
        if(!validJsonOfField(11, "is_deleted", pJson["is_deleted"], err, false))
            return false;
    }
    return true;
}
bool Dish::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Dish::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Tenant Dish::getTenant(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from tenant where tenant_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *tenantId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Tenant(r[0]);
}

void Dish::getTenant(const DbClientPtr &clientPtr,
                     const std::function<void(Tenant)> &rcb,
                     const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from tenant where tenant_id = ?";
    *clientPtr << sql
               << *tenantId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Tenant(r[0]));
                    }
               }
               >> ecb;
}
DishCategory Dish::getDishCategory(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from dish_category where category_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *dishCategoryId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return DishCategory(r[0]);
}

void Dish::getDishCategory(const DbClientPtr &clientPtr,
                           const std::function<void(DishCategory)> &rcb,
                           const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from dish_category where category_id = ?";
    *clientPtr << sql
               << *dishCategoryId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(DishCategory(r[0]));
                    }
               }
               >> ecb;
}
std::vector<Inventory> Dish::getInventories(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from inventory where dish_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *dishId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Inventory> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Inventory(row));
    }
    return ret;
}

void Dish::getInventories(const DbClientPtr &clientPtr,
                          const std::function<void(std::vector<Inventory>)> &rcb,
                          const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from inventory where dish_id = ?";
    *clientPtr << sql
               << *dishId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Inventory> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Inventory(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
