/**
 *
 *  User.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace saas_restaurant
{
class Branch;
class MarketingCampaign;
class Member;
class Order;
class Role;
class Tenant;
class UserRole;

class User
{
  public:
    struct Cols
    {
        static const std::string _user_id;
        static const std::string _tenant_id;
        static const std::string _username;
        static const std::string _password;
        static const std::string _email;
        static const std::string _phone;
        static const std::string _avatar_url;
        static const std::string _gender;
        static const std::string _birthday;
        static const std::string _province;
        static const std::string _city;
        static const std::string _address;
        static const std::string _created_at;
        static const std::string _updated_at;
        static const std::string _last_login;
        static const std::string _is_deleted;
        static const std::string _status;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = uint32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit User(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit User(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    User(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    User() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column user_id  */
    ///Get the value of the column user_id, returns the default value if the column is null
    const uint32_t &getValueOfUserId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getUserId() const noexcept;
    ///Set the value of the column user_id
    void setUserId(const uint32_t &pUserId) noexcept;

    /**  For column tenant_id  */
    ///Get the value of the column tenant_id, returns the default value if the column is null
    const uint32_t &getValueOfTenantId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getTenantId() const noexcept;
    ///Set the value of the column tenant_id
    void setTenantId(const uint32_t &pTenantId) noexcept;
    void setTenantIdToNull() noexcept;

    /**  For column username  */
    ///Get the value of the column username, returns the default value if the column is null
    const std::string &getValueOfUsername() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUsername() const noexcept;
    ///Set the value of the column username
    void setUsername(const std::string &pUsername) noexcept;
    void setUsername(std::string &&pUsername) noexcept;
    void setUsernameToNull() noexcept;

    /**  For column password  */
    ///Get the value of the column password, returns the default value if the column is null
    const std::string &getValueOfPassword() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPassword() const noexcept;
    ///Set the value of the column password
    void setPassword(const std::string &pPassword) noexcept;
    void setPassword(std::string &&pPassword) noexcept;
    void setPasswordToNull() noexcept;

    /**  For column email  */
    ///Get the value of the column email, returns the default value if the column is null
    const std::string &getValueOfEmail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEmail() const noexcept;
    ///Set the value of the column email
    void setEmail(const std::string &pEmail) noexcept;
    void setEmail(std::string &&pEmail) noexcept;
    void setEmailToNull() noexcept;

    /**  For column phone  */
    ///Get the value of the column phone, returns the default value if the column is null
    const std::string &getValueOfPhone() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPhone() const noexcept;
    ///Set the value of the column phone
    void setPhone(const std::string &pPhone) noexcept;
    void setPhone(std::string &&pPhone) noexcept;
    void setPhoneToNull() noexcept;

    /**  For column avatar_url  */
    ///Get the value of the column avatar_url, returns the default value if the column is null
    const std::string &getValueOfAvatarUrl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAvatarUrl() const noexcept;
    ///Set the value of the column avatar_url
    void setAvatarUrl(const std::string &pAvatarUrl) noexcept;
    void setAvatarUrl(std::string &&pAvatarUrl) noexcept;
    void setAvatarUrlToNull() noexcept;

    /**  For column gender  */
    ///Get the value of the column gender, returns the default value if the column is null
    const std::string &getValueOfGender() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getGender() const noexcept;
    ///Set the value of the column gender
    void setGender(const std::string &pGender) noexcept;
    void setGender(std::string &&pGender) noexcept;
    void setGenderToNull() noexcept;

    /**  For column birthday  */
    ///Get the value of the column birthday, returns the default value if the column is null
    const std::string &getValueOfBirthday() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBirthday() const noexcept;
    ///Set the value of the column birthday
    void setBirthday(const std::string &pBirthday) noexcept;
    void setBirthday(std::string &&pBirthday) noexcept;
    void setBirthdayToNull() noexcept;

    /**  For column province  */
    ///Get the value of the column province, returns the default value if the column is null
    const std::string &getValueOfProvince() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getProvince() const noexcept;
    ///Set the value of the column province
    void setProvince(const std::string &pProvince) noexcept;
    void setProvince(std::string &&pProvince) noexcept;
    void setProvinceToNull() noexcept;

    /**  For column city  */
    ///Get the value of the column city, returns the default value if the column is null
    const std::string &getValueOfCity() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCity() const noexcept;
    ///Set the value of the column city
    void setCity(const std::string &pCity) noexcept;
    void setCity(std::string &&pCity) noexcept;
    void setCityToNull() noexcept;

    /**  For column address  */
    ///Get the value of the column address, returns the default value if the column is null
    const std::string &getValueOfAddress() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAddress() const noexcept;
    ///Set the value of the column address
    void setAddress(const std::string &pAddress) noexcept;
    void setAddress(std::string &&pAddress) noexcept;
    void setAddressToNull() noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;
    void setCreatedAtToNull() noexcept;

    /**  For column updated_at  */
    ///Get the value of the column updated_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedAt() const noexcept;
    ///Set the value of the column updated_at
    void setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept;
    void setUpdatedAtToNull() noexcept;

    /**  For column last_login  */
    ///Get the value of the column last_login, returns the default value if the column is null
    const ::trantor::Date &getValueOfLastLogin() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getLastLogin() const noexcept;
    ///Set the value of the column last_login
    void setLastLogin(const ::trantor::Date &pLastLogin) noexcept;
    void setLastLoginToNull() noexcept;

    /**  For column is_deleted  */
    ///Get the value of the column is_deleted, returns the default value if the column is null
    const int8_t &getValueOfIsDeleted() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsDeleted() const noexcept;
    ///Set the value of the column is_deleted
    void setIsDeleted(const int8_t &pIsDeleted) noexcept;
    void setIsDeletedToNull() noexcept;

    /**  For column status  */
    ///Get the value of the column status, returns the default value if the column is null
    const std::string &getValueOfStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStatus() const noexcept;
    ///Set the value of the column status
    void setStatus(const std::string &pStatus) noexcept;
    void setStatus(std::string &&pStatus) noexcept;
    void setStatusToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 17;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
    Branch getBranch(const drogon::orm::DbClientPtr &clientPtr) const;
    void getBranch(const drogon::orm::DbClientPtr &clientPtr,
                   const std::function<void(Branch)> &rcb,
                   const drogon::orm::ExceptionCallback &ecb) const;
    Member getMember(const drogon::orm::DbClientPtr &clientPtr) const;
    void getMember(const drogon::orm::DbClientPtr &clientPtr,
                   const std::function<void(Member)> &rcb,
                   const drogon::orm::ExceptionCallback &ecb) const;
    Tenant getTenant(const drogon::orm::DbClientPtr &clientPtr) const;
    void getTenant(const drogon::orm::DbClientPtr &clientPtr,
                   const std::function<void(Tenant)> &rcb,
                   const drogon::orm::ExceptionCallback &ecb) const;
    std::vector<MarketingCampaign> getMarketing_campaigns(const drogon::orm::DbClientPtr &clientPtr) const;
    void getMarketing_campaigns(const drogon::orm::DbClientPtr &clientPtr,
                                const std::function<void(std::vector<MarketingCampaign>)> &rcb,
                                const drogon::orm::ExceptionCallback &ecb) const;
    std::vector<Order> getOrders(const drogon::orm::DbClientPtr &clientPtr) const;
    void getOrders(const drogon::orm::DbClientPtr &clientPtr,
                   const std::function<void(std::vector<Order>)> &rcb,
                   const drogon::orm::ExceptionCallback &ecb) const;
    std::vector<std::pair<Role,UserRole>> getRoles(const drogon::orm::DbClientPtr &clientPtr) const;
    void getRoles(const drogon::orm::DbClientPtr &clientPtr,
                  const std::function<void(std::vector<std::pair<Role,UserRole>>)> &rcb,
                  const drogon::orm::ExceptionCallback &ecb) const;
  private:
    friend drogon::orm::Mapper<User>;
    friend drogon::orm::BaseBuilder<User, true, true>;
    friend drogon::orm::BaseBuilder<User, true, false>;
    friend drogon::orm::BaseBuilder<User, false, true>;
    friend drogon::orm::BaseBuilder<User, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<User>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint32_t> userId_;
    std::shared_ptr<uint32_t> tenantId_;
    std::shared_ptr<std::string> username_;
    std::shared_ptr<std::string> password_;
    std::shared_ptr<std::string> email_;
    std::shared_ptr<std::string> phone_;
    std::shared_ptr<std::string> avatarUrl_;
    std::shared_ptr<std::string> gender_;
    std::shared_ptr<std::string> birthday_;
    std::shared_ptr<std::string> province_;
    std::shared_ptr<std::string> city_;
    std::shared_ptr<std::string> address_;
    std::shared_ptr<::trantor::Date> createdAt_;
    std::shared_ptr<::trantor::Date> updatedAt_;
    std::shared_ptr<::trantor::Date> lastLogin_;
    std::shared_ptr<int8_t> isDeleted_;
    std::shared_ptr<std::string> status_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[17]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where user_id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where user_id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "user_id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "tenant_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "username,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "password,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "email,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "phone,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "avatar_url,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "gender,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "birthday,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "province,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "city,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "address,";
            ++parametersCount;
        }
        sql += "created_at,";
        ++parametersCount;
        if(!dirtyFlag_[12])
        {
            needSelection=true;
        }
        sql += "updated_at,";
        ++parametersCount;
        if(!dirtyFlag_[13])
        {
            needSelection=true;
        }
        sql += "last_login,";
        ++parametersCount;
        if(!dirtyFlag_[14])
        {
            needSelection=true;
        }
        if(dirtyFlag_[15])
        {
            sql += "is_deleted,";
            ++parametersCount;
        }
        if(dirtyFlag_[16])
        {
            sql += "status,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace saas_restaurant
} // namespace drogon_model
