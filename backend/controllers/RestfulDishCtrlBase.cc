
/**
 *
 *  RestfulDishCtrlBase.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl automatically.
 *  Users should implement business logic in the derived class.
 */

#include "RestfulDishCtrlBase.h"
#include <string>

void RestfulDishCtrlBase::getOne(const HttpRequestPtr &req,
                                 std::function<void(const HttpResponsePtr &)> &&callback,
                                 Dish::PrimaryKeyType &&id)
{

    auto dbClientPtr = getDbClient();
    auto callbackPtr =
        std::make_shared<std::function<void(const HttpResponsePtr &)>>(
            std::move(callback));
    drogon::orm::Mapper<Dish> mapper(dbClientPtr);
    mapper.findByPrimaryKey(
        id,
        [req, callbackPtr, this](Dish r)
        {
            (*callbackPtr)(HttpResponse::newHttpJsonResponse(makeJson(req, r)));
        },
        [callbackPtr](const DrogonDbException &e)
        {
            const drogon::orm::UnexpectedRows *s = dynamic_cast<const drogon::orm::UnexpectedRows *>(&e.base());
            if (s)
            {
                auto resp = HttpResponse::newHttpResponse();
                resp->setStatusCode(k404NotFound);
                (*callbackPtr)(resp);
                return;
            }
            LOG_ERROR << e.base().what();
            Json::Value ret;
            ret["error"] = "database error";
            auto resp = HttpResponse::newHttpJsonResponse(ret);
            resp->setStatusCode(k500InternalServerError);
            (*callbackPtr)(resp);
        });
}

void RestfulDishCtrlBase::updateOne(const HttpRequestPtr &req,
                                    std::function<void(const HttpResponsePtr &)> &&callback,
                                    Dish::PrimaryKeyType &&id)
{
    auto jsonPtr = req->jsonObject();
    if (!jsonPtr)
    {
        Json::Value ret;
        ret["code"] = k400BadRequest;
        ret["message"] = "No json object is found in the request";
        auto resp = HttpResponse::newHttpJsonResponse(ret);
        callback(resp);
        return;
    }
    Dish object;
    std::string err;
    if (!doCustomValidations(*jsonPtr, err))
    {
        Json::Value ret;
        ret["code"] = k400BadRequest;
        ret["message"] = err;
        auto resp = HttpResponse::newHttpJsonResponse(ret);
        callback(resp);
        return;
    }
    try
    {
        if (isMasquerading())
        {
            if (!Dish::validateMasqueradedJsonForUpdate(*jsonPtr, masqueradingVector(), err))
            {
                Json::Value ret;
                ret["code"] = k400BadRequest;
                ret["message"] = err;
                auto resp = HttpResponse::newHttpJsonResponse(ret);
                callback(resp);
                return;
            }
            object.updateByMasqueradedJson(*jsonPtr, masqueradingVector());
        }
        else
        {
            if (!Dish::validateJsonForUpdate(*jsonPtr, err))
            {
                Json::Value ret;
                ret["code"] = k400BadRequest;
                ret["message"] = err;
                auto resp = HttpResponse::newHttpJsonResponse(ret);
                callback(resp);
                return;
            }
            object.updateByJson(*jsonPtr);
        }
    }
    catch (const Json::Exception &e)
    {
        LOG_ERROR << e.what();
        Json::Value ret;
        ret["code"] = k400BadRequest;
        ret["message"] = "Field type error";
        auto resp = HttpResponse::newHttpJsonResponse(ret);
        callback(resp);
        return;
    }
    if (object.getPrimaryKey() != id)
    {
        Json::Value ret;
        ret["code"] = k400BadRequest;
        ret["message"] = "Bad primary key";
        auto resp = HttpResponse::newHttpJsonResponse(ret);
        callback(resp);
        return;
    }

    auto dbClientPtr = getDbClient();
    auto callbackPtr =
        std::make_shared<std::function<void(const HttpResponsePtr &)>>(
            std::move(callback));
    drogon::orm::Mapper<Dish> mapper(dbClientPtr);

    mapper.update(
        object,
        [callbackPtr](const size_t count)
        {
            if (count == 1)
            {
                Json::Value ret;
                ret["code"] = k200OK;
                ret["message"] = "ok";
                auto resp = HttpResponse::newHttpJsonResponse(ret);
                (*callbackPtr)(resp);
            }
            else if (count == 0)
            {
                Json::Value ret;
                ret["code"] = k404NotFound;
                ret["message"] = "No resources are updated";
                auto resp = HttpResponse::newHttpJsonResponse(ret);
                (*callbackPtr)(resp);
            }
            else
            {
                LOG_FATAL << "More than one resource is updated: " << count;
                Json::Value ret;
                ret["code"] = k500InternalServerError;
                ret["message"] = "database error";
                auto resp = HttpResponse::newHttpJsonResponse(ret);
                (*callbackPtr)(resp);
            }
        },
        [callbackPtr](const DrogonDbException &e)
        {
            LOG_ERROR << e.base().what();
            Json::Value ret;
            ret["code"] = k500InternalServerError;
            ret["message"] = "database error";
            auto resp = HttpResponse::newHttpJsonResponse(ret);
            (*callbackPtr)(resp);
        });
}

void RestfulDishCtrlBase::deleteOne(const HttpRequestPtr &req,
                                    std::function<void(const HttpResponsePtr &)> &&callback,
                                    Dish::PrimaryKeyType &&id)
{

    auto dbClientPtr = getDbClient();
    auto callbackPtr =
        std::make_shared<std::function<void(const HttpResponsePtr &)>>(
            std::move(callback));
    drogon::orm::Mapper<Dish> mapper(dbClientPtr);
    mapper.deleteByPrimaryKey(
        id,
        [callbackPtr](const size_t count)
        {
            if (count == 1)
            {
                auto resp = HttpResponse::newHttpResponse();
                resp->setStatusCode(k204NoContent);
                (*callbackPtr)(resp);
            }
            else if (count == 0)
            {
                Json::Value ret;
                ret["error"] = "No resources deleted";
                auto resp = HttpResponse::newHttpJsonResponse(ret);
                resp->setStatusCode(k404NotFound);
                (*callbackPtr)(resp);
            }
            else
            {
                LOG_FATAL << "Delete more than one records: " << count;
                Json::Value ret;
                ret["error"] = "Database error";
                auto resp = HttpResponse::newHttpJsonResponse(ret);
                resp->setStatusCode(k500InternalServerError);
                (*callbackPtr)(resp);
            }
        },
        [callbackPtr](const DrogonDbException &e)
        {
            LOG_ERROR << e.base().what();
            Json::Value ret;
            ret["error"] = "database error";
            auto resp = HttpResponse::newHttpJsonResponse(ret);
            resp->setStatusCode(k500InternalServerError);
            (*callbackPtr)(resp);
        });
}

void RestfulDishCtrlBase::getHotDishes(const HttpRequestPtr &req,
                                       std::function<void(const HttpResponsePtr &)> &&callback)
{
    auto dbClientPtr = getDbClient();
    drogon::orm::Mapper<Dish> mapper(dbClientPtr);
    auto &parameters = req->parameters();
    auto iter = parameters.find("sort");
    if (iter != parameters.end())
    {
        auto sortFields = drogon::utils::splitString(iter->second, ",");
        for (auto &field : sortFields)
        {
            if (field.empty())
                continue;
            if (field[0] == '+')
            {
                field = field.substr(1);
                mapper.orderBy(field, SortOrder::ASC);
            }
            else if (field[0] == '-')
            {
                field = field.substr(1);
                mapper.orderBy(field, SortOrder::DESC);
            }
            else
            {
                mapper.orderBy(field, SortOrder::ASC);
            }
        }
    }
    iter = parameters.find("offset");
    if (iter != parameters.end())
    {
        try
        {
            auto offset = std::stoll(iter->second);
            mapper.offset(offset);
        }
        catch (...)
        {
            auto resp = HttpResponse::newHttpResponse();
            resp->setStatusCode(k400BadRequest);
            callback(resp);
            return;
        }
    }
    iter = parameters.find("limit");
    if (iter != parameters.end())
    {
        try
        {
            auto limit = std::stoll(iter->second);
            mapper.limit(limit);
        }
        catch (...)
        {
            auto resp = HttpResponse::newHttpResponse();
            resp->setStatusCode(k400BadRequest);
            callback(resp);
            return;
        }
    }
    auto callbackPtr =
        std::make_shared<std::function<void(const HttpResponsePtr &)>>(
            std::move(callback));
    auto jsonPtr = req->jsonObject();
    if (jsonPtr && jsonPtr->isMember("filter"))
    {
        try
        {
            auto criteria = makeCriteria((*jsonPtr)["filter"]);
            mapper.findBy(criteria, [req, callbackPtr, this](const std::vector<Dish> &v)
                          {
                    Json::Value ret;
                    ret.resize(0);
                    for (auto &obj : v)
                    {
                        ret.append(makeJson(req, obj));
                    }
                    (*callbackPtr)(HttpResponse::newHttpJsonResponse(ret)); }, [callbackPtr](const DrogonDbException &e)
                          { 
                    LOG_ERROR << e.base().what();
                    Json::Value ret;
                    ret["error"] = "database error";
                    auto resp = HttpResponse::newHttpJsonResponse(ret);
                    resp->setStatusCode(k500InternalServerError);
                    (*callbackPtr)(resp); });
        }
        catch (const std::exception &e)
        {
            LOG_ERROR << e.what();
            Json::Value ret;
            ret["error"] = e.what();
            auto resp = HttpResponse::newHttpJsonResponse(ret);
            resp->setStatusCode(k400BadRequest);
            (*callbackPtr)(resp);
            return;
        }
    }
    else
    {
        mapper.findAll([req, callbackPtr, this](const std::vector<Dish> &v)
                       {
                Json::Value list;
                Json::Value ret;
                list.resize(0);
                //返回前3条数据
                if (v.size() > 3)
                {
                    for (size_t i = 0; i < 3; ++i)
                    {
                        if(v[i].getValueOfIsDeleted())
                        continue;
                        list.append(makeJson(req, v[i]));
                    }
                }
                else
                for (auto &obj : v)
                {
                    if(obj.getValueOfIsDeleted())
                    continue;
                    list.append(makeJson(req, obj));
                }
                ret["code"]=k200OK;
                ret["message"]="ok";
                ret["data"]=list;
                (*callbackPtr)(HttpResponse::newHttpJsonResponse(ret)); },
                       [callbackPtr](const DrogonDbException &e)
                       {
                           LOG_ERROR << e.base().what();
                           Json::Value ret;
                           ret["error"] = "database error";
                           auto resp = HttpResponse::newHttpJsonResponse(ret);
                           resp->setStatusCode(k500InternalServerError);
                           (*callbackPtr)(resp);
                       });
    }
}
void RestfulDishCtrlBase::get(const HttpRequestPtr &req,
                              std::function<void(const HttpResponsePtr &)> &&callback)
{
    auto dbClientPtr = getDbClient();
    drogon::orm::Mapper<Dish> mapper(dbClientPtr);
    auto &parameters = req->parameters();
    auto iter = parameters.find("sort");
    if (iter != parameters.end())
    {
        auto sortFields = drogon::utils::splitString(iter->second, ",");
        for (auto &field : sortFields)
        {
            if (field.empty())
                continue;
            if (field[0] == '+')
            {
                field = field.substr(1);
                mapper.orderBy(field, SortOrder::ASC);
            }
            else if (field[0] == '-')
            {
                field = field.substr(1);
                mapper.orderBy(field, SortOrder::DESC);
            }
            else
            {
                mapper.orderBy(field, SortOrder::ASC);
            }
        }
    }
    iter = parameters.find("offset");
    if (iter != parameters.end())
    {
        try
        {
            auto offset = std::stoll(iter->second);
            mapper.offset(offset);
        }
        catch (...)
        {
            auto resp = HttpResponse::newHttpResponse();
            resp->setStatusCode(k400BadRequest);
            callback(resp);
            return;
        }
    }
    iter = parameters.find("limit");
    if (iter != parameters.end())
    {
        try
        {
            auto limit = std::stoll(iter->second);
            mapper.limit(limit);
        }
        catch (...)
        {
            auto resp = HttpResponse::newHttpResponse();
            resp->setStatusCode(k400BadRequest);
            callback(resp);
            return;
        }
    }
    auto callbackPtr =
        std::make_shared<std::function<void(const HttpResponsePtr &)>>(
            std::move(callback));
    auto jsonPtr = req->jsonObject();
    if (jsonPtr && jsonPtr->isMember("filter"))
    {
        try
        {
            auto criteria = makeCriteria((*jsonPtr)["filter"]);
            mapper.findBy(criteria, [req, callbackPtr, this](const std::vector<Dish> &v)
                          {
                    Json::Value ret;
                    ret.resize(0);
                    for (auto &obj : v)
                    {
                        ret.append(makeJson(req, obj));
                    }
                    (*callbackPtr)(HttpResponse::newHttpJsonResponse(ret)); }, [callbackPtr](const DrogonDbException &e)
                          { 
                    LOG_ERROR << e.base().what();
                    Json::Value ret;
                    ret["error"] = "database error";
                    auto resp = HttpResponse::newHttpJsonResponse(ret);
                    resp->setStatusCode(k500InternalServerError);
                    (*callbackPtr)(resp); });
        }
        catch (const std::exception &e)
        {
            LOG_ERROR << e.what();
            Json::Value ret;
            ret["error"] = e.what();
            auto resp = HttpResponse::newHttpJsonResponse(ret);
            resp->setStatusCode(k400BadRequest);
            (*callbackPtr)(resp);
            return;
        }
    }
    else
    {
        mapper.findAll([req, callbackPtr, this](const std::vector<Dish> &v)
                       {
                Json::Value list;
                Json::Value ret;
                list.resize(0);
                for (auto &obj : v)
                {
                    if(obj.getValueOfIsDeleted())
                    continue;
                    list.append(makeJson(req, obj));
                }
                ret["code"]=k200OK;
                ret["message"]="ok";
                ret["data"]=list;
                (*callbackPtr)(HttpResponse::newHttpJsonResponse(ret)); },
                       [callbackPtr](const DrogonDbException &e)
                       {
                           LOG_ERROR << e.base().what();
                           Json::Value ret;
                           ret["error"] = "database error";
                           auto resp = HttpResponse::newHttpJsonResponse(ret);
                           resp->setStatusCode(k500InternalServerError);
                           (*callbackPtr)(resp);
                       });
    }
}

void RestfulDishCtrlBase::create(const HttpRequestPtr &req,
                                 std::function<void(const HttpResponsePtr &)> &&callback)
{
    auto jsonPtr = req->jsonObject();
    if (!jsonPtr)
    {
        Json::Value ret;
        ret["code"] = k400BadRequest;
        ret["message"] = "No json object is found in the request";
        auto resp = HttpResponse::newHttpJsonResponse(ret);
        callback(resp);
        return;
    }
    std::string err;
    if (!doCustomValidations(*jsonPtr, err))
    {
        Json::Value ret;
        ret["code"] = k400BadRequest;
        ret["message"] = err;
        auto resp = HttpResponse::newHttpJsonResponse(ret);
        callback(resp);
        return;
    }
    if (isMasquerading())
    {
        if (!Dish::validateMasqueradedJsonForCreation(*jsonPtr, masqueradingVector(), err))
        {
            Json::Value ret;
            ret["code"] = k400BadRequest;
            ret["message"] = err;
            auto resp = HttpResponse::newHttpJsonResponse(ret);
            callback(resp);
            return;
        }
    }
    else
    {
        if (!Dish::validateJsonForCreation(*jsonPtr, err))
        {
            Json::Value ret;
            ret["code"] = k400BadRequest;
            ret["message"] = err;
            auto resp = HttpResponse::newHttpJsonResponse(ret);
            callback(resp);
            return;
        }
    }
    try
    {
        Dish object =
            (isMasquerading() ? Dish(*jsonPtr, masqueradingVector()) : Dish(*jsonPtr));
        auto dbClientPtr = getDbClient();
        auto callbackPtr =
            std::make_shared<std::function<void(const HttpResponsePtr &)>>(
                std::move(callback));
        drogon::orm::Mapper<Dish> mapper(dbClientPtr);
        mapper.insert(
            object,
            [req, callbackPtr, this](Dish newObject)
            {
                Json::Value ret;
                ret["code"] = k200OK;
                ret["message"] = "ok";
                ret["data"]["dish_id"] = newObject.getPrimaryKey();
                (*callbackPtr)(HttpResponse::newHttpJsonResponse(ret));
            },
            [callbackPtr](const DrogonDbException &e)
            {
                LOG_ERROR << e.base().what();
                Json::Value ret;
                ret["code"] = k500InternalServerError;
                ret["message"] = "database error";
                auto resp = HttpResponse::newHttpJsonResponse(ret);
                (*callbackPtr)(resp);
            });
    }
    catch (const Json::Exception &e)
    {
        LOG_ERROR << e.what();
        Json::Value ret;
        ret["code"] = k400BadRequest;
        ret["message"] = "Field type error";
        auto resp = HttpResponse::newHttpJsonResponse(ret);
        callback(resp);
        return;
    }
}

/*
void RestfulDishCtrlBase::update(const HttpRequestPtr &req,
                                 std::function<void(const HttpResponsePtr &)> &&callback)
{

}*/

RestfulDishCtrlBase::RestfulDishCtrlBase()
    : RestfulController({"dish_id",
                         "tenant_id",
                         "dish_category_id",
                         "dish_name",
                         "dish_price",
                         "cost_price",
                         "origin_price",
                         "description",
                         "cover_img",
                         "status",
                         "sort_order",
                         "is_deleted",
                         "created_at",
                         "updated_at"})
{
    /**
     * The items in the vector are aliases of column names in the table.
     * if one item is set to an empty string, the related column is not sent
     * to clients.
     */
    enableMasquerading({
        "dish_id",          // the alias for the dish_id column.
        "tenant_id",        // the alias for the tenant_id column.
        "dish_category_id", // the alias for the dish_category_id column.
        "dish_name",        // the alias for the dish_name column.
        "dish_price",       // the alias for the dish_price column.
        "cost_price",       // the alias for the cost_price column.
        "origin_price",     // the alias for the origin_price column.
        "description",      // the alias for the description column.
        "cover_img",        // the alias for the cover_img column.
        "status",           // the alias for the status column.
        "sort_order",       // the alias for the sort_order column.
        "is_deleted",       // the alias for the is_deleted column.
        "created_at",       // the alias for the created_at column.
        "updated_at"        // the alias for the updated_at column.
    });
}
